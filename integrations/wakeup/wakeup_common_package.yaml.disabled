---
automation:
  - alias: Wakeup Light Activate
    id: wakeup_light_activate
    mode: parallel
    # Trigger at the wakeup time everyday.
    trigger:
      - platform: time
        at:
          - input_datetime.wakeup_time_brian
          - input_datetime.wakeup_time_lucas
          - input_datetime.wakeup_time_nerene
    variables:
      time_now: '{{ as_timestamp(now()) | timestamp_custom("%H:%M") }}'
      who: '{{ trigger.entity_id[27:] }}'
      skipnext_entity: "input_boolean.wakeup_skipnext_{{ who }}"
      do_not_skipnext: '{{ is_state(skipnext_entity, "off") }}'
      today_name: '{{ now().strftime("%a")|lower }}'
      wakeup_today_entity: "input_boolean.wakeup_{{ today_name }}_{{ who }}"
      wakeup_today: '{{ is_state(wakeup_today_entity, "on") }}'
    action:
      # - service: script.debug
      #   data:
      #     message: |
      #       who: {{ who }}
      #       wakeup_today_entity: {{ wakeup_today_entity }}
      #       enabled: {{ is_state("input_boolean.wakeup_status_" + who, "on") }}
      #       do_not_skipnext: {{ do_not_skipnext }}
      #       wakeup_today: {{ wakeup_today }}
      #       script: script.wakeup_{{ who }}

      - alias: "Continue if today is a wakeup day and the wakeup light is not deactivated."
        condition: template
        value_template: '{{ wakeup_today and is_state("input_boolean.wakeup_status_" + who, "on") }}'

      # - alias: "Continue if they are home (or unknown if we cannot track their motion)."
      #   condition: template
      #   value_template: '{{ states("person." + who) in ["home","unknown"] }}'

      - service: script.notify_web
        data:
          message: "Automation: Wakeup Light Activate Triggered"

      - choose:
          - conditions:
              - "{{ do_not_skipnext }}"
            sequence:
              # - service: script.debug
              #   data:
              #     message: "{{ who|title }}'s Wakeup Light Activate Start"

              - service_template: "script.wakeup_{{ who }}"

              - service: switch.turn_on
                target:
                  entity_id: switch.hot_water_pump

        default:
          service: input_boolean.turn_off
          data:
            entity_id: "{{ skipnext_entity }}"

  - alias: Wakeup Light Timeout
    id: wakeup_light_timeout
    trigger:
      - platform: event
        event_type: timer.finished
    variables:
      timer: '{{ trigger.event.data.entity_id }}'
      who: '{{ timer|replace("timer.wakeup_timeout_","") }}'
    condition:
      - '{{ timer.startswith("timer.wakeup_timeout_") }}'
    action:
      - service: homeassistant.turn_off
        target:
          entity_id:
            - light.home_entry
            - light.play_room_entry

      - service_template: "script.wakeup_timeout_{{ who }}"

      # - service: script.debug
      #   data:
      #     message: "{{ who|title }}'s Wakeup Light Timeout triggered"

script:
  wakeup_light_start:
    alias: Wakeup Light Start
    sequence:
      # Transition the light to 100% over 10 minutes.
      - service: light.turn_on
        target:
          entity_id: '{{ light }}'
        data:
          brightness: 26
      - repeat:
          sequence:
            - variables:
                brightness: |
                  {% if repeat.index == 1 %}
                    26
                  {% else %}
                    {% set brightness = state_attr(light, "brightness")|int(default=0) + 26 %}
                    {{ brightness if brightness < 254 else 254 }}
                  {% endif %}

            - service: light.turn_on
              target:
                entity_id: '{{ light }}'
              data:
                brightness: "{{ brightness }}"

            - delay:
                minutes: 1
                #seconds: 5

          until:
            - '{{ is_state_attr(light, "brightness", 254)
                  or is_state(light, "off") }}'

      # Start a countdown timer which triggers and automation upon its conclusion.
      # see: automation.wakeup_light_timeout
      - service: timer.start
        target:
          entity_id: '{{ "timer.wakeup_timeout_" ~ who }}'

      - service: script.notify_web
        data:
          message: "{{ who|title }}'s Wakeup Light Complete"
