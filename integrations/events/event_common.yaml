---
automation:
  - alias: Event announcements
    id: event_announcements
    mode: parallel
    trigger:
      - platform: time
        at:
          - input_datetime.event_1st_bedtime_boys_schoolday
          - input_datetime.event_2nd_bedtime_boys_schoolday
          - input_datetime.event_1st_bedtime_boys_dayoff
          - input_datetime.event_2nd_bedtime_boys_dayoff
          - input_datetime.event_1st_wakeup_brian
          - input_datetime.event_2nd_wakeup_brian
          - input_datetime.event_1st_wakeup_lucas
          - input_datetime.event_2nd_wakeup_lucas
          #- input_datetime.event_1st_wakeup_lucas_late_start
          #- input_datetime.event_2nd_wakeup_lucas_late_start
          - input_datetime.event_1st_wakeup_kyle
          - input_datetime.event_2nd_wakeup_kyle
          - input_datetime.event_1st_wakeup_nerene
          - input_datetime.event_2nd_wakeup_nerene
          - input_datetime.event_1st_wakeup_nerene_modified
          - input_datetime.event_2nd_wakeup_nerene_modified
    variables:
      entity_id: '{{ trigger.entity_id }}'
      id: '{{ entity_id[25:] }}'
      second_announcement: '{{ entity_id.startswith("input_datetime.event_2nd") }}'
      event_enabled: '{{ is_state("input_boolean.event_enabled_" + id, "on") }}'
      skipnext_entity: 'input_boolean.event_skipnext_{{ id }}'
      skipnext: '{{ is_state(skipnext_entity, "on") }}'
      announcement_enabled: '{{ is_state("input_boolean.event_announcement_" + id, "on") }}'
      #announcement: '{{ states("input_text.event_" + entity_id[21:]) }}'

      event_hour: '{{ states(entity_id)[:2]|int(default=0) }}'
      work_day: '{{ is_state("binary_sensor.work_day","on") }}'
      work_day_modified: '{{ is_state("binary_sensor.work_day_modified","on") }}'
      middle_school_day: '{{ is_state("binary_sensor.middle_school_day","on") }}'
      middle_school_day_tomorrow: '{{ is_state("binary_sensor.middle_school_day_tomorrow","on") }}'
      high_school_day: '{{ is_state("binary_sensor.high_school_day","on") }}'
      high_school_day_tomorrow: '{{ is_state("binary_sensor.high_school_day_tomorrow","on") }}'

      event_today: |
        {%- if id == "wakeup_kyle" %}
          {{ middle_school_day }}
        {%- elif id in ["wakeup_lucas", "wakeup_lucas_late_start"] %}
          {{ high_school_day }}
        {%- elif id == "wakeup_brian" %}
          {{ middle_school_day or high_school_day }}
        {%- elif id == "wakeup_nerene" %}
          {{ iif(work_day_modified==False, work_day, False) }}
        {%- elif id == "wakeup_nerene_modified" %}
          {{ work_day_modified }}
        {%- elif id == "bedtime_boys_schoolday" %}
          {%- if event_hour < 6 %}
            {{ middle_school_day or high_school_day }}
          {%- else %}
            {{ middle_school_day_tomorrow or high_school_day_tomorrow }}
          {%- endif %}
        {%- elif id == "bedtime_boys_daysoff" %}
          {%- if event_hour < 6 %}
            {{ not (middle_school_day or high_school_day) }}
          {%- else %}
            {{ not (middle_school_day_tomorrow or high_school_day_tomorrow) }}
          {%- endif %}
        {%- else %}
          False
        {%- endif %}
    action:
      # - service: persistent_notification.create
      #   data:
      #     title: '{{ title|default("") }}'
      #     message: |
      #       entity_id: {{ entity_id }}
      #       id: {{ id }}
      #       event_enabled: {{ event_enabled }}
      #       event_today: {{ event_today }}
      #       skipnext: {{ skipnext }}
      #       announcement_enabled: {{ announcement_enabled }}
      #       second_announcement: {{ second_announcement }}
      #     notification_id: '{{ id|default("debug_" ~ as_timestamp(now())) }}'

      - alias: 'Continue if the announcement is enabled, today is an event day, and the event is not deactivated.'
        condition: template
        value_template: '{{ announcement_enabled and event_today and event_enabled }}'

      # Skip the 1st announcemnt when skipnext is on.
      - choose:
          - alias: Make the announcement.
            conditions: '{{ not skipnext }}'
            sequence:
              - service: script.event_announce
                data:
                  id: '{{ id }}'
                  media_player: '{{ states("input_select.event_speakers_" + id) }}'
                  #message: '{{ announcement }}'
                  second_announcement: '{{ second_announcement }}'

          - alias: Skip the announcement and disable skipnext.
            conditions: '{{ skipnext and second_announcement }}'
            sequence:
              - delay:
                  seconds: 15
              - service: input_boolean.turn_off
                data:
                  entity_id: '{{ skipnext_entity }}'

  - alias: Event light
    id: event_light
    mode: parallel
    trigger:
      - platform: time
        at:
          - input_datetime.event_light_wakeup_nerene
          - input_datetime.event_light_wakeup_nerene_modified
          - input_datetime.event_light_wakeup_brian
          - input_datetime.event_light_wakeup_kyle
          - input_datetime.event_light_wakeup_lucas
          #- input_datetime.event_light_wakeup_lucas_late_start
          #- input_datetime.event_light_wakeup_bedtime_boys_schoolday
          #- input_datetime.event_light_wakeup_bedtime_boys_dayoff
    variables:
      entity_id: '{{ trigger.entity_id }}'
      id: '{{ entity_id[27:] }}'
      event_enabled: '{{ is_state("input_boolean.event_enabled_" + id, "on") }}'
      skipnext_entity: 'input_boolean.event_skipnext_{{ id }}'
      do_not_skipnext: '{{ is_state(skipnext_entity, "off") }}'
      light_enabled: '{{ is_state("input_boolean.event_light_" + id, "on") }}'

      event_hour: '{{ states(entity_id)[:2]|int(default=0) }}'
      work_day: '{{ is_state("binary_sensor.work_day","on") }}'
      work_day_modified: '{{ is_state("binary_sensor.work_day_modified","on") }}'
      middle_school_day: '{{ is_state("binary_sensor.middle_school_day","on") }}'
      middle_school_day_tomorrow: '{{ is_state("binary_sensor.middle_school_day_tomorrow","on") }}'
      high_school_day: '{{ is_state("binary_sensor.high_school_day","on") }}'
      high_school_day_tomorrow: '{{ is_state("binary_sensor.high_school_day_tomorrow","on") }}'

      event_today: |
        {%- if id == "wakeup_kyle" %}
          {{ middle_school_day }}
        {%- elif id in ["wakeup_lucas", "wakeup_lucas_late_start"] %}
          {{ high_school_day }}
        {%- elif id == "wakeup_brian" %}
          {{ middle_school_day or high_school_day }}
        {%- elif id == "wakeup_nerene" %}
          {{ iif(work_day_modified==False, work_day, False) }}
        {%- elif id == "wakeup_nerene_modified" %}
          {{ work_day_modified }}
        {%- elif id == "bedtime_boys_schoolday" %}
          {%- if event_hour < 6 %}
            {{ middle_school_day or high_school_day }}
          {%- else %}
            {{ middle_school_day_tomorrow or high_school_day_tomorrow }}
          {%- endif %}
        {%- elif id == "bedtime_boys_daysoff" %}
          {%- if event_hour < 6 %}
            {{ not (middle_school_day or high_school_day) }}
          {%- else %}
            {{ not (middle_school_day_tomorrow or high_school_day_tomorrow) }}
          {%- endif %}
        {%- else %}
          False
        {%- endif %}
    action:
      # - service: persistent_notification.create
      #   data:
      #     title: '{{ title|default("") }}'
      #     message: |
      #       id: {{ id }}
      #       light_enabled: {{ light_enabled }}
      #       event_today: {{ event_today }}
      #       {{ light_enabled and event_today and event_enabled }}
      #       {{ do_not_skipnext }}
      #     notification_id: '{{ id|default("debug_" ~ as_timestamp(now())) }}'

      - alias: 'Continue if the wakeup light is enabled, today is an event day, and the event is not deactivated.'
        condition: template
        value_template: '{{ light_enabled and event_today and event_enabled }}'

      - choose:
          - conditions: '{{ do_not_skipnext }}'
            sequence:
              - service_template: 'script.event_{{ id }}'

              - service: switch.turn_on
                target:
                  entity_id: switch.hot_water_pump

  - alias: Event light timeout
    id: event_light_timeout
    mode: parallel
    trigger:
      - platform: event
        event_type: timer.finished
    variables:
      timer: '{{ trigger.event.data.entity_id }}'
      id: '{{ timer|replace("timer.event_timeout_","") }}'
    condition:
      - '{{ timer.startswith("timer.event_timeout_") }}'
    action:
      - service: homeassistant.turn_off
        target:
          entity_id:
            - light.home_entry
            - light.play_room_entry

      - service_template: "script.event_timeout_{{ id }}"

script:
  event_announce:
    alias: Event announce
    mode: parallel
    variables:
      room: '{{ media_player|lower|replace(" ","_")|replace("[","")|replace("]","") }}'
      speaker:
        bedroom: "media_player.google_bedroom"
        kyles_room: "media_player.google_kyles_room"
        kyle_morning: "media_player.google_kyle_morning"
        lucas_room: "media_player.google_lucas_room"
        lucas_morning: "media_player.google_lucas_morning"
        lucas_sleep: "media_player.google_lucas_sleep"
        boys_rooms: "media_player.google_boys_rooms"
        downstairs: "media_player.google_downstairs"
        kitchen-garage: "media_player.google_welcome"
        kitchen: "media_player.google_kitchen"
        family_room: "media_player.google_family_room"
        family_room_display: "media_player.google_family_room_display"
        garage: "media_player.google_garage"
        play_room: "media_player.google_play_room"
        upstairs: "media_player.google_upstairs"
        upstairs_bathroom: "media_player.google_upstairs_bathroom"
      type: '{{ id.split("_")[0] }}'
      who: '{{ id.split("_")[1] | title }}'
      #event_modifier: '{{ id.split("_")[2] }}'
      modified_schedule: |
        {%- set modified_event = states("sensor.high_school_day_modified_schedule") %}
        {%- if modified_event != "" and who in ["Brian","Lucas"] %}
          {{ "Today is " ~ modified_event ~ " schedule." }}
        {%- endif %}
      current_time: |
        {%- set time_suffix = as_timestamp(now())|timestamp_custom("%p", true) %}
        {%- set hour = now().hour %}
        {%- set minute = now().minute %}
        {%- set current_time = "%01d"|format( iif(hour<13, hour, hour-12) ) %}
        {%- if minute > 0 %}
          {%- set current_time = current_time ~ ":%02d"|format(minute) %}
        {%- endif %}
        {%- set current_time = current_time ~" "~ time_suffix[0] ~" "~ time_suffix[1] %}
        {{ current_time }}
      time_sentence: '{{ "It is " ~ current_time ~ "." }}'
      time_of_day: |
        {%- set hour = now().hour %}
        {%- if 5 <= hour < 12 -%}
          morning
        {%- elif 12 <= hour < 17 -%}
          afternoon
        {%- elif 17 <= hour < 19 -%}
          evening
        {%- else -%}
          night
        {%- endif %}
      message: |
        {%- if type == "wakeup" %}
          {{ time_sentence ~ " Time to start waking up. " if not second_announcement }}
          Good {{ time_of_day }} {{ who ~ ". " }}
          {{ iif(second_announcement, time_sentence, "") }}
          {{ modified_schedule }}
        {%- elif type == "bedtime" -%}
          {%- if not second_announcement %}
            {{- "It's almost bedtime " ~who~ ". Wrap up your activities. " }}
          {%- else %}
            {{- "Goodnight " ~who~ ". It is time to go to bed." }}
          {%- endif %}
        {%- else %}
          Good {{ time_of_day }} {{ who }}.
          {{ time_sentence }}
        {%- endif %}
    sequence:
      # - service: persistent_notification.create
      #   data:
      #     title: '{{ title|default("") }}'
      #     message: |
      #       room: {{ room }}
      #       media_player: {{ speaker[room] }}

      #       type: {{ type }}
      #       who: {{ who }}
      #       modified_schedule: {{ modified_schedule }}
      #       second_announcement: {{ second_announcement }}

      #       current_time: {{ current_time }}
      #       time_sentence: {{ time_sentence }}
      #       time_of_day: {{ time_of_day }}

      #       message:
      #       {{ message }}
      #     notification_id: '{{ id|default("debug_" ~ as_timestamp(now())) }}'

      - service: script.notify_speech
        data:
          message: '{{ message }}'
          media_player: '{{ speaker[room] }}'

  event_light:
    alias: Event light fade-up
    mode: parallel
    variables:
      light_area: '{{ area_name(light) | lower| replace(" ","_") }}'
      adaptive_lighting_entity: '{{ "switch.adaptive_lighting_" ~ light_area }}'
      adaptive_lighting_on: |
        {%- if states(adaptive_lighting_entity) is defined %}
          {{ is_state(adaptive_lighting_entity, "on") }}
        {%- else %}
          False
        {%- endif %}
    sequence:
      # - service: persistent_notification.create
      #   data:
      #     title: script.event_wakeup_brian
      #     message: |
      #       light_area: '{{ light_area }}'
      #       adaptive_lighting_entity: '{{ adaptive_lighting_entity }}'
      #       adaptive_lighting_on: '{{ adaptive_lighting_on }}'
      #     notification_id: '{{ id|default("debug_" ~ as_timestamp(now())) }}'

      - alias: "Temporarily disable adaptive lighting for this room."
        if: '{{ adaptive_lighting_on }}'
        then:
          - service: switch.turn_off
            target:
              entity_id: '{{ adaptive_lighting_entity }}'

      - alias: "Transition the light to 100% over 10 minutes."
        service: light.turn_on
        target:
          entity_id: '{{ light }}'
        data:
          brightness: 26
          transition: 59

      - repeat:
          sequence:
            # Add 10% to the brightness.
            - variables:
                brightness: |
                  {%- set brightness = 26 * repeat.index %}
                  {{ brightness if brightness < 255 else 255 }}

            - service: light.turn_on
              target:
                entity_id: '{{ light }}'
              data:
                brightness: '{{ brightness }}'
                transition: 59

            # - service: script.notify_web
            #   data:
            #     message: |
            #       repeat.index: {{ repeat.index }}
            #       - brightness: {{ brightness }}

            - alias: "Delay before next increase."
              choose:
                - conditions: '{{ repeat.index < 10 }}'
                  sequence:
                    - delay:
                        minutes: 1
                        #seconds: 5
          until:
            - '{{ repeat.index == 10
                  or is_state(light, "off") }}'

      - alias: "Restore adaptive lighting for this room."
        if: '{{ adaptive_lighting_on }}'
        then:
          - service: switch.turn_on
            target:
              entity_id: '{{ adaptive_lighting_entity }}'

      # Start a countdown timer which triggers and automation upon its conclusion.
      # see: automation.event_light_timeout
      - service: timer.start
        target:
          entity_id: '{{ "timer.event_timeout_" ~ id }}'

      - service: script.notify_web
        data:
          message: '{{ id|replace("_"," ")|title }} complete'
