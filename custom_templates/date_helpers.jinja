{#-
day_name_to_number(name)
  ex. Get the number which represents Thursday.
  {{ day_name_to_number("Thursday") }}
-#}
{%- macro day_name_to_number(name) -%}
  {%-
    set days = [0, ["Sunday","Sun"]],
      [1, ["Monday","Mon"]],
      [2, ["Tuesday","Tue"]],
      [3, ["Wednesday","Wed"]],
      [4, ["Thursday","Thu"]],
      [5, ["Friday","Fri"]],
      [6, ["Saturday","Sat"]]
  %}

  {%- for day in days %}
    {#- When day name is matched, return the day number. #}
    {%- if name in day[1] %}
      {{- day[0] }}
      {%- break %}
    {#- When no match is made, return "Unknown" value. #}
    {%- elif loop.last %}
      {{- "Unknown" }}
    {%- endif %}
  {%- endfor %}
{%- endmacro -%}

{#-
last_day_of_month(month, year)
  ex. Get the last day of February 2024.
  {{ last_day_of_month(2, 2024) }}
-#}
{%- macro last_day_of_month(month, year=now().year) -%}
  {%- set days_in_months = [31,28,31,30,31,30,31,31,30,31,30,31] -%}

  {#- Simplified leap year calculation. See https://www.mathsisfun.com/leap-years.html #}
  {%- set is_leap_year = year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) -%}

  {%- set month_index = month-1 -%}
  {%- if month == 2 and is_leap_year -%}
    {{- days_in_months[month_index]+1 }}
  {%- else -%}
    {{- days_in_months[month_index] }}
  {%- endif -%}
{%- endmacro -%}

{#-
nth_day_of_month(nth, day_of_week, month, year)
  ex. Get the nth Monday of May.
  1st: {{ nth_day_of_month(1, "Monday", 5) }}
  2nd: {{ nth_day_of_month(2, "Monday", 5, 2020) }}
  Last: {{ nth_day_of_month("last", "Monday", 5) }}
Reference: https://www.bennadel.com/blog/1446-getting-the-nth-occurrence-of-a-day-of-the-week-for-a-given-month.htm
-#}
{%- macro nth_day_of_month(nth, day_of_week, month, year=now().year) -%}
  {%- set day_of_week = day_name_to_number(day_of_week)|int -%}
  {%- set firstdateofmonth = strptime(year ~"-"~ month ~"-1", "%Y-%m-%d") -%}
  {%- set first_day_of_month = day_name_to_number(firstdateofmonth.strftime("%A"))|int -%}

  {#- Determine the first occurrence of the day. #}
  {%- if first_day_of_month == 1 -%}
    {%- set first_occurrence = day_of_week -%}
  {%- elif first_day_of_month < day_of_week -%}
    {%- set first_occurrence = (day_of_week - day_name_to_number(first_day_of_month)) -%}
  {%- else -%}
    {%- set first_occurrence = (7 - first_day_of_month + day_of_week) + 1 -%}
  {%- endif -%}

  {%- if nth is number -%}
    {#- Determine the nth occurrence of the day_of_week. #}
    {%- set nth_occurrence = first_occurrence + 7 * (nth-1) -%}
  {%- else -%}
    {#-
    Determine the LAST occurrence of the day_of_week.
    Reference: https://cflib.org/udf/GetLastOccOfDayInMonth
    #}
    {%- set last_day_of_month = last_day_of_month(month, year)|int -%}
    {%- set last_day_name = strptime(year ~"-"~ month ~"-"~ last_day_of_month, "%Y-%m-%d").strftime("%A") -%}
    {%- set last_day_number = day_name_to_number(last_day_name)|int -%}
    {%- set day_difference = last_day_number - day_of_week -%}

    {#- Add a week if the result is negative. #}
    {%- if day_difference < 0 -%}
      {%- set day_difference = day_difference + 7 -%}
    {%- endif -%}

    {%- set nth_occurrence = last_day_of_month - day_difference -%}
  {%- endif -%}

  {#- Return the day with the month and year so it can be useful. #}
  {{- strptime(month ~"/"~ nth_occurrence ~"/"~ year, "%m/%d/%Y") }}
{%- endmacro -%}

{#-
list_of_dates(months, year)
  ex. Get dates off during summer months.
  This summer: {{ list_of_dates([6,7,8]) }}
  Summer of 2024: {{ list_of_dates([6,7,8, 2024]) }}

  ex. Get dates off during winter break spanning this year and next.
  End/beginning of next year: {{ list_of_dates([12,1]) }}
-#}
{%- macro list_of_dates(months=[],year=now().year) %}
  {%- set loop_storage = namespace(year=year) %}
  {%- set days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31] %}
  {%- for month in months %}
    {%- if not loop.first and months[loop.index-2]==12 %}
      {%- set loop_storage.year = loop_storage.year + 1 %}
    {%- endif %}
    {%- set last_day = last_day_of_month(month, loop_storage.year)|int %}
    {%- for day in days if day <= last_day %}
- "{{ "%04d-%02d-%02d"|format(loop_storage.year, month, day) }}"
    {%- endfor %}
  {%- endfor %}
{%- endmacro %}
