blueprint:
  name: Inovelli Red Series LZW31-SN Dimmer (ZWave-JS)
  description: Create automations for the Inovelli Red Series LZW31-SN Dimmer using the ZWave-JS integration.
  domain: automation
  input:
    inovelli_switch:
      name: Inovelli Dimmer
      description: "List of available inovelli LZW31-SN dimmers."
      selector:
        device:
          integration: zwave_js
          manufacturer: Inovelli
          model: LZW31-SN
    ## Config Press 1 time
    config_button:
      name: Button C - Config press 1x
      description: "Action to run, when the config button is pressed one time."
      default: []
      selector:
        action: {}
    ## Paddle Press 1 time
    button_a:
      name: Button A - Up/On press 1x
      description: "Action to run, when the button is pressed one time."
      default: []
      selector:
        action: {}
    button_b:
      name: Button B - Down/Off press 1x
      description: "Action to run, when the button is pressed one time."
      default: []
      selector:
        action: {}
    ## Paddle Held Down
    button_a_held:
      name: Button A - Up/On held down
      description: "Action to run, when the button is held down."
      default: []
      selector:
        action: {}
    button_b_held:
      name: Button B - Down/Off held down
      description: "Action to run, when the button is held down."
      default: []
      selector:
        action: {}
    ## Paddle Press 2 times
    button_a2:
      name: Button A - Up/On press 2x
      description: "Action to run, when the button is pressed two times."
      default: []
      selector:
        action: {}
    button_b2:
      name: Button B - Down/Off press 2x
      description: "Action to run, when the button is pressed two times."
      default: []
      selector:
        action: {}
    ## Paddle Press 3 times
    button_a3:
      name: Button A - Up/On press 3x
      description: "Action to run, when the button is pressed three times."
      default: []
      selector:
        action: {}
    button_b3:
      name: Button B - Down/Off press 3x
      description: "Action to run, when the button is pressed three times."
      default: []
      selector:
        action: {}
    ## Paddle Press 4 times
    button_a4:
      name: Button A - Up/On press 4x
      description: "Action to run, when the button is pressed four times."
      default: []
      selector:
        action: {}
    button_b4:
      name: Button B - Down/Off press 4x
      description: "Action to run, when the button is pressed four times."
      default: []
      selector:
        action: {}
    ## Paddle Press 5 times
    button_a5:
      name: Button A - Up/On press 5x
      description: "Action to run, when the button is pressed five times."
      default: []
      selector:
        action: {}
    button_b5:
      name: Button B - Down/Off press 5x
      description: "Action to run, when the button is pressed five times."
      default: []
      selector:
        action: {}
mode: single
max_exceeded: silent
trigger:
  - platform: event
    event_type: zwave_js_value_notification
variables:
  device_id: !input inovelli_switch
condition: "{{ trigger.event.data.device_id == device_id }}"
action:
  - variables:
      presses: |
        {% set value = trigger.event.data.value %}
        {% if value == "KeyPressed" %}
          1
        {% else %}
          {{ value|replace("KeyPressed","")|replace("x","") }}
        {% endif %}
      button: |
        {% if trigger.event.data.property_key_name|int(default=0) == 1 %}
          down
        {% elif trigger.event.data.property_key_name|int(default=0) == 2 %}
          up
        {% elif trigger.event.data.property_key_name|int(default=0) == 3 %}
          config
        {% endif %}
  # - service: persistent_notification.create
  #   data:
  #     title: "button_presses"
  #     message: |
  #       button: {{ button }}
  #       presses: {{ presses }}
  - service: "logbook.log"
    data:
      name: "Button"
      message: "{{ button }}"
  - service: "logbook.log"
    data:
      name: "Presses"
      message: "{{ presses }}"
  - choose:
    - conditions: '{{ button == "config" }}'
      sequence: !input config_button
    - conditions: '{{ button == "up" and presses|int(default=0) == 1 }}'
      sequence: !input button_a
    - conditions: '{{ button == "down" and presses|int(default=0) == 1 }}'
      sequence: !input button_b
    - conditions: '{{ button == "up" and presses == "KeyHeldDown" }}'
      sequence: !input button_a_held
    - conditions: '{{ button == "down" and presses == "KeyHeldDown" }}'
      sequence: !input button_b_held
    - conditions: '{{ button == "up" and presses|int(default=0) == 2 }}'
      sequence: !input button_a2
    - conditions: '{{ button == "down" and presses|int(default=0) == 2 }}'
      sequence: !input button_b2
    - conditions: '{{ button == "up" and presses|int(default=0) == 3 }}'
      sequence: !input button_a3
    - conditions: '{{ button == "down" and presses|int(default=0) == 3 }}'
      sequence: !input button_b3
    - conditions: '{{ button == "up" and presses|int(default=0) == 4 }}'
      sequence: !input button_a4
    - conditions: '{{ button == "down" and presses|int(default=0) == 4 }}'
      sequence: !input button_b4
    - conditions: '{{ button == "up" and presses|int(default=0) == 5 }}'
      sequence: !input button_a5
    - conditions: '{{ button == "down" and presses|int(default=0) == 5 }}'
      sequence: !input button_b5
