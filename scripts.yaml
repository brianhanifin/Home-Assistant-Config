restart_home_assistant:
  alias: Restart Home Assistant
  sequence:
  - service: script.notify_web
    data:
      type: warning
      message: Restarting Home Assistant
      duration: 60
  - service: homeassistant.restart
    data: {}
  mode: single
  icon: mdi:restart-alert
reboot_server:
  alias: Reboot Server
  sequence:
  - service: script.notify_web
    data:
      type: error
      message: Rebooting the server!
      duration: 120
  - service: hassio.host_reboot
    data: {}
  mode: single
  icon: mdi:power-cycle
refresh_count_sensors:
  alias: Refresh entity count sensors
  mode: single
  icon: mdi:cog-refresh
  sequence:
  - service: homeassistant.update_entity
    target:
      entity_id: "{%- set storage = namespace(entities=\"\") %}\n{%- set entities
        = states.sensor | map(attribute=\"entity_id\") | list %}\n{%- for entity in
        entities if entity[(entity|length-6):] == \"_count\" %}\n  {%- set storage.entities
        = storage.entities ~ entity %}\n  {%- if not loop.last %}\n    {%- set storage.entities
        = storage.entities ~ ',' %}\n  {%- endif %}\n{%- endfor %}\n{{ storage.entities.split(\",\")
        }}\n"
    alias: Update templated entities
  - service: script.notify_web
    data:
      type: success
      message: Sensor counts are refreshed.
      duration: 10
refresh_update_sensors:
  alias: Refresh version sensors
  sequence:
  - service: homeassistant.update_entity
    target:
      entity_id:
      - sensor.addon_updates
      - sensor.unifi_gateway_firmware_upgradable
      - sensor.updates
    data: {}
  - delay:
      seconds: 2
  - service: homeassistant.update_entity
    target:
      entity_id:
      - sensor.updates
    data: {}
  - service: script.notify_web
    data:
      type: success
      message: Update sensors are refreshed.
      duration: 10
  mode: single
  icon: mdi:cog-refresh
generate_readme:
  alias: Generate readme
  sequence:
  - service: homeassistant.update_entity
    data: {}
    target:
      entity_id: sensor.code_line_count
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: readme.generate
    data: {}
  - service: script.notify_web
    data:
      message: README + ui-lovelace generation process complete.
  mode: single
  icon: mdi:github
generate_fake_secrets:
  alias: Generate fake secrets
  sequence:
  - service: shell_command.rebuild_test_secrets
    data: {}
  - service: script.notify_web
    data:
      message: Fake_secrets.yaml regenerated.
  mode: single
  icon: mdi:thought-bubble
goodbye_routine:
  alias: Goodbye routine
  sequence:
  - service: script.turn_on
    entity_id: script.shutdown_routine
  - service: homeassistant.turn_off
    entity_id: group.bedroom_lights
  - service: script.say
    data:
      media_player: media_player.google_downstairs
      say_goodbye: 'true'
  - delay:
      seconds: 10
  - wait_for_trigger:
    - platform: state
      entity_id:
      - binary_sensor.front_door
      from: 'on'
      to: 'off'
    timeout:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
    alias: Wait for front door to close.
  - service: lock.lock
    entity_id: lock.front_door
  mode: single
  icon: mdi:exit-run
goodnight_routine:
  alias: Goodnight routine
  sequence:
  - alias: Make sure the garage door is closed.
    service: cover.close_cover
    entity_id: cover.garage_door
  - alias: Lock the front door right away as well.
    service: lock.lock
    entity_id: lock.front_door
  - alias: Shutdown routine
    service: script.shutdown_routine
    data: {}
  - alias: Say goodnight.
    service: script.say
    data:
      media_player: media_player.google_family_room
      say_goodnight: 'true'
  mode: single
  icon: mdi:lightbulb-night-outline
shutdown_routine:
  alias: Shutdown routine
  sequence:
  - alias: Turn off everything except for the play room.
    service: homeassistant.turn_off
    entity_id:
    - fan.family_room
    - media_player.family_room_tv
    - group.kitchen_lights
    - group.dining_room_fixture
    - light.home_entry
    - light.family_room_floor_lamp
    - light.family_room_table_lamp
    - switch.hot_water_pump
  - delay:
      seconds: 2
  - alias: Turn off family room light last after a brief delay.
    service: light.turn_off
    entity_id: light.family_room
  mode: single
  icon: mdi:close-circle
store_mqtt_sensor:
  alias: Store MQTT sensor
  sequence:
  - service: mqtt.publish
    data:
      topic: custom/sensor/{{ name }}/state
      payload: '{{ state }}'
      retain: true
  - alias: Only add attributes if they are present.
    if:
    - condition: template
      value_template: '{{ attributes is defined }}'
    then:
    - service: mqtt.publish
      data:
        topic: custom/sensor/{{ name }}/attributes
        payload: '{{ attributes }}

          '
        retain: true
  mode: queued
  icon: mdi:motion-sensor
holiday_sensors_update:
  alias: Holiday sensors update
  sequence:
  - alias: Update upcoming dynamic holiday - easter.
    service: script.update_next_holiday
    data:
      holiday: easter
  - alias: Update upcoming dynamic holiday - election day.
    service: script.update_next_holiday
    data:
      holiday: election_day
  - alias: Update the holiday sensor.
    service: homeassistant.update_entity
    entity_id: sensor.holiday
  - delay:
      seconds: 10
  - service: script.holiday_color_change
    data: {}
  mode: single
  icon: mdi:calendar-sync
update_next_holiday:
  alias: Update next holiday
  sequence:
  - variables:
      today: '{{ states("sensor.date") }}'
      holiday_sensor: '{{ "sensor.date_" ~ holiday }}'
      next_holiday_sensor: '{{ "sensor.date_next_" ~ holiday }}'
      event_date: '{{ states(holiday_sensor) }}'
      day_after_event: "{%- if event_date != \"unknown\" %}\n  {%- set split_date
        = event_date.split(\"-\") %}\n  {{ \"{:04}-{:02}-{:02}\".format(split_date[0]|int(default=0),
        split_date[1]|int(default=0), (split_date[2]|int(default=0)+1)) }}\n{% endif
        %}\n"
  - alias: Only update the day after the event (or the event date is unknown).
    condition: template
    value_template: '{{ today == day_after_event or event_date == ''unknown'' }}

      '
  - service: persistent_notification.create
    data:
      title: update_next_holiday
      message: Updating {{ next_holiday_sensor }}.
  - service: homeassistant.update_entity
    data:
      entity_id: '{{ next_holiday_sensor }}'
  mode: single
  icon: mdi:calendar-sync
  fields:
    holiday:
      description: Name of the holiday that needs updating. (ex. easter or election_day)
      default: election_day
      required: true
      selector:
        text:
lights_flash:
  alias: Lights flash
  sequence:
  - variables:
      is_hue: '{{ state_attr(entity_id,"effect_list") is sequence }}'
  - service: script.notify_web
    data:
      message: 'entity_id: {{ entity_id }}

        number_of_flashes: {{ number_of_flashes }}

        delay_between_flashes: {{ delay_between_flashes }}

        flash_transition_delay: {{ flash_transition_delay }}

        is_hue: {{ is_hue }}'
    enabled: false
    alias: Debug output (notify_web)
  - alias: Store the current state of the light.
    service: scene.create
    data:
      scene_id: lights_flash_snapshot
      snapshot_entities: '{{ entity_id }}'
  - repeat:
      count: '{{ number_of_flashes }}'
      sequence:
      - choose:
        - alias: Use Hue built in flash when available.
          conditions:
          - '{{ is_hue }}'
          sequence:
          - service: light.turn_on
            data:
              entity_id: '{{ entity_id }}'
              flash: short
        default:
        - service: light.turn_on
          data:
            entity_id: '{{ entity_id }}'
            transition: 0
        - alias: Transition time between flashes.
          delay:
            seconds: '{{ flash_transition_delay }}'
        - service: light.turn_off
          data:
            entity_id: '{{ entity_id }}'
            transition: 0
      - alias: Delay between flashes.
        delay:
          seconds: '{{ delay_between_flashes }}'
  - delay:
      seconds: 2
  - alias: Restore the previous state of the light.
    service: scene.turn_on
    data:
      entity_id: scene.lights_flash_snapshot
      transition: 5
  mode: single
  icon: mdi:lightbulb-on
  fields:
    entity_id:
      description: Select the light to flash.
      required: true
      selector:
        entity:
          multiple: false
          domain: light
    number_of_flashes:
      description: Number of flashes.
      required: true
      default: 3
      selector:
        number:
          min: 1
          max: 10
    delay_between_flashes:
      description: Seconds delay between flashes.
      required: true
      default: 1
      selector:
        number:
          min: 1
          max: 5
    flash_transition_delay:
      description: Transition duration.
      required: true
      default: 0.5
      selector:
        number:
          min: 0.5
          max: 5
          step: 0.5
holiday_color_change:
  alias: Holiday light color set
  sequence:
  - variables:
      holiday_colors:
        test: Green
        birthday: Purple
        christmas: Green
        easter: Orchid
        fathers: Orange
        halloween: OrangeRed
        marti_gras: Purple
        new_years: Violet
        pi: Blue
        st_patty: DarkGreen
        starwars: Red
        thanksgiving: Orange
        usa: Blue
        valentine: Crimson
      holiday: "{% set holiday = states('sensor.holiday') -%}\n{%- if holiday is not
        none and holiday != \"\" -%}\n  {%- set holiday = holiday|lower|trim|replace(\"'\",\"\")|replace(\"
        \",\"_\")|replace(\",_eve\",\"\")|replace(\"_day\",\"\") -%}\n  {%- if holiday
        in [\"constitution\",\"flag\",\"independence\",\"memorial\",\"mlk\",\"presidents\",\"veterans\"]
        -%}\n    {{ \"usa\" }}\n  {%- else -%}\n    {%- if holiday == \"christmas\"
        -%}\n      {{ \"christmas\" }}\n    {%- elif holiday.split('_')|last == \"birthday\"
        -%}\n      {{ \"birthday\" }}\n    {%- else -%}\n      {{ holiday|replace(\"mothers\",\"valentine\")|replace(\"earth\",\"st_patty\")
        }}\n    {%- endif -%}\n  {%- endif %}\n{%- else -%}\n  {{ \"standard\" }}\n{%-
        endif %}\n"
  - if:
    - alias: When today is a holiday/birthday/anniversary.
      condition: template
      value_template: '''{{ holiday != "standard" }}'''
    then:
    - variables:
        color: '{{ holiday_colors[holiday] }}'
      alias: Retrieve the holiday color.
    - if:
      - alias: When the porch light is on.
        condition: template
        value_template: '{{ is_state("light.porch","on") }}'
      then:
      - alias: Set the porch light color.
        service: light.turn_on
        target:
          entity_id: light.porch
        data:
          color_name: '{{ color }}'
    - if:
      - alias: When the family room table lamp is on.
        condition: template
        value_template: '{{ is_state("light.family_room_table_lamp","on") }}'
      then:
      - alias: Set the family room light color.
        service: light.turn_on
        target:
          entity_id: light.family_room_table_lamp
        data:
          color_name: '{{ color }}'
    else:
    - if:
      - alias: When the porch light is on.
        condition: template
        value_template: '{{ is_state("light.porch","on") }}'
      then:
      - alias: Set the porch light color temperature to the default.
        service: light.turn_on
        target:
          entity_id: light.porch
        data:
          kelvin: 4000
    - if:
      - alias: When the family room table lamp is on.
        condition: template
        value_template: '{{ is_state("light.family_room_table_lamp","on") }}'
      then:
      - alias: Set the family room table lamp color temperature to the default.
        service: light.turn_on
        target:
          entity_id: light.family_room_table_lamp
        data:
          kelvin: 4000
  mode: single
  icon: mdi:palette
light_sequence:
  alias: Light sequence
  sequence:
  - variables:
      color_count: '{{ colors|count }}'
  - alias: Display debug info (notify_web).
    enabled: false
    service: script.notify_web
    data:
      message: 'delay: ''{{ delay }}''

        transition: ''{{ transition }}''

        colors: ''{{ colors }}''

        color_count: ''{{ colors_count }}''

        entity_id: ''{{ entity_id }}''

        '
  - alias: Turn on light group before we start.
    repeat:
      count: '{{ color_count|int(default=0) }}'
      sequence:
      - service: script.light_sequence_color
        data:
          entity_id: '{{ entity_id }}'
          brightness: 255
          color: white
          delay: '0'
          transition: '0'
  - alias: Loop through the colors.
    repeat:
      count: '{{ color_count|int(default=0) }}'
      sequence:
      - alias: Change all bulbs to this color one at a time.
        service: script.light_sequence_color
        data:
          entity_id: '{{ entity_id }}'
          color: '{{ colors[repeat.index-1] }}'
          delay: '{{ delay }}'
          transition: '{{ transition }}'
      - alias: Stop
        choose:
        - conditions:
          - '{{ is_state(entity_id,"off") }}'
          sequence:
          - service: script.turn_off
            entity_id:
            - script.light_sequence
            - script.light_sequence_color
          - service: homeassistant.turn_off
            data:
              entity_id: '{{ entity_id }}'
  mode: restart
  max_exceeded: silent
  icon: mdi:string-lights
  fields:
    entity_id:
      description: Select the light sequence.
      required: true
      default: light.dining_room
      example: light.dining_room
      selector:
        entity:
          multiple: false
          domain: light
    delay:
      description: Duration between flashes.
      required: true
      default: 0.5
      selector:
        number:
          min: 0.5
          max: 5
          step: 0.5
    transition:
      description: Transition duration.
      required: true
      default: 2
      selector:
        number:
          min: 0.5
          max: 5
          step: 0.5
    colors:
      description: Choose multiple colors to cycle through. https://www.w3.org/TR/css-color-3/#svg-color
      required: true
      selector:
        select:
          multiple: true
          options:
          - aquamarine
          - blueviolet
          - cadetblue
          - coral
          - cornflowerblue
          - crimson
          - cyan
          - darkslateblue
          - darkgoldenrod
          - darkmagenta
          - darkslategrey
          - darkviolet
          - darkturquoise
          - deeppink
          - deepskyblue
          - firebrick
          - dodgerblue
          - forestgreen
          - gold
          - indigo
          - lavenderblush
          - lawngreen
          - lemonchiffon
          - lightblue
          - darkturquoise
light_sequence_color:
  alias: Light sequence color
  sequence:
  - variables:
      light_groups:
        light.bedroom_east: group.bedroom_east_fixture
        light.dining_room: group.dining_room_fixture
        light.play_room_floor_lamp: group.play_room_floor_lamp_fixture
      entity: '{{ light_groups[entity_id]|default(entity_id) }}'
      bulb_count: '{{ state_attr(entity,"entity_id")|count if entity.startswith("group")
        else 1 }}'
      color: '{{ color|default("cyan") }}

        '
      delay: '{{ delay|float(default=0.5) }}'
      transition: '{{ transition|int(default=5) }}'
  - alias: Show debug info (notify_web).
    service: script.notify_web
    enabled: false
    data:
      message: 'entity: {{ entity }}

        bulb_count: {{ bulb_count }}

        '
  - choose:
    - conditions:
      - '{{ bulb_count|int(default=0) > 1 }}'
      sequence:
      - repeat:
          count: '{{ bulb_count }}'
          sequence:
          - delay:
              seconds: '{{ delay }}'
          - service: light.turn_on
            data:
              brightness: 255
              entity_id: '{{ state_attr(entity,"entity_id")[repeat.index-1] }}'
              color_name: '{{ color }}'
              transition: '{{ transition }}'
    default:
    - delay:
        seconds: '{{ delay }}'
    - service: light.turn_on
      data:
        brightness: 255
        entity_id: '{{ entity }}'
        color_name: '{{ color }}'
        transition: '{{ transition }}'
  - delay:
      seconds: '{{ transition }}'
  mode: queued
  max: 10
  icon: mdi:palette
  fields:
    entity_id:
      description: Select the light sequence.
      required: true
      default: light.dining_room
      example: light.dining_room
      selector:
        entity:
          multiple: false
          domain: light
    delay:
      description: Duration between flashes.
      required: true
      default: 0.5
      selector:
        number:
          min: 0.5
          max: 5
          step: 0.5
    transition:
      description: Transition duration.
      required: true
      default: 2
      selector:
        number:
          min: 0.5
          max: 5
          step: 0.5
    colors:
      description: Choose multiple colors to cycle through. https://www.w3.org/TR/css-color-3/#svg-color
      required: true
      selector:
        select:
          multiple: true
          options:
          - aquamarine
          - blueviolet
          - cadetblue
          - coral
          - cornflowerblue
          - crimson
          - cyan
          - darkslateblue
          - darkgoldenrod
          - darkmagenta
          - darkslategrey
          - darkviolet
          - darkturquoise
          - deeppink
          - deepskyblue
          - firebrick
          - dodgerblue
          - forestgreen
          - gold
          - indigo
          - lavenderblush
          - lawngreen
          - lemonchiffon
          - lightblue
vacuum_room_clean:
  alias: Vacuum room clean
  sequence:
  - variables:
      rooms: "{%- if rooms is defined %}\n  {{ rooms }}\n{%- endif %}\n"
      vacuum: "{%- if vacuum is defined %}\n  {{ vacuum }}\n{%- else %}\n  [\"vacuum.family_room\",\"vacuum.play_room\"]\n{%-
        endif %}\n"
  - if:
    - condition: template
      value_template: '{{ rooms|upper in ["","ALL"] }}'
    then:
    - service: vacuum.send_command
      data:
        command: sweep_auto
      target:
        entity_id: '{{ vacuum }}'
    else:
    - service: vacuum.send_command
      data:
        command: sweep_rooms
        params:
          rooms: ' {{ rooms }} '
      target:
        entity_id: '{{ vacuum }}'
  icon: mdi:update
  mode: parallel
  fields:
    rooms:
      name: Room(s)
      description: Room or rooms to clean
      example: Family room
      selector:
        select:
          multiple: true
          options:
          - ALL
          - Family room
          - Kitchen
    vacuum:
      name: Vacuum
      description: Vacuum to clean.
      example: vacuum.family_room
      selector:
        entity:
          multiple: true
          domain:
          - vacuum
  max: 10
vacuum_update:
  alias: Vacuum update
  sequence:
  - variables:
      vacuum: "{%- if vacuum is defined %}\n  {{ vacuum }}\n{%- else %}\n  [\"vacuum.family_room\",\"vacuum.play_room\"]\n{%-
        endif %}\n"
  - service: vacuum.send_command
    data:
      command: update
    target:
      entity_id: '{{ vacuum }}'
  icon: mdi:update
  mode: parallel
  fields:
    vacuum:
      name: Vacuum
      description: Vacuum to update.
      example: vacuum.family_room
      selector:
        entity:
          multiple: true
          domain:
          - vacuum
  max: 10
cast:
  alias: Cast
  sequence:
  - if:
    - condition: state
      entity_id: automation.startup
      state: 'on'
      alias: When startup is on.
    then:
    - wait_for_trigger:
      - platform: state
        entity_id:
        - automation.startup
        from: 'on'
        to: 'off'
    alias: Should this try to run during startup... wait for startup to complete.
  - variables:
      entities: "{%- set data = namespace(displays=\"\") %}\n{%- if displays is defined
        %}\n  {%- if displays is not string %}\n    {%- for display in displays %}\n
        \     {%- set data.displays = data.displays ~ '\"' ~ device_entities(display)[0]
        ~ '\"' ~ iif(not loop.last, \",\", \"\") %}\n    {%- endfor %}\n  {%- else
        %}\n    {%- set data.displays = '\"' ~ device_entities(displays)[0] ~ '\"'
        %}\n  {%- endif %}\n{%- else %}\n  {%- set data.displays = '\"media_player.google_kitchen\"'
        %}\n{%- endif %}\n[{{ data.displays }}]\n"
  - service: script.debug
    enabled: false
    data:
      message: 'displays is not string: ''{{ displays is not string }}''

        dismiss_after is defined: ''{{ dismiss_after is defined }}''


        displays: ''{{ displays }}''


        entities: ''{{ entities }}''

        count: {{ entities|count }}


        dashboard_path: "{{ dashboard_path }}"

        view_path: "{{ view_path }}"


        dismiss_after: ''{{ dismiss_after }}''

        '
  - alias: Turn off the media players before we cast a new page for it to display.
    service: media_player.turn_off
    target:
      entity_id: '{{ entities }}'
  - alias: Cast a page to the specified displays.
    repeat:
      count: '{{ entities|count }}'
      sequence:
      - alias: Cast a dashboard to a display.
        service: cast.show_lovelace_view
        data:
          entity_id: '{{ entities[repeat.index-1] }}'
          dashboard_path: '{{ dashboard_path }}'
          view_path: '{{ view_path }}'
  - alias: If `dismiss_after` is set, then turn off the displays after the specified
      delay.
    if:
    - condition: template
      value_template: '{{ dismiss_after is defined }}'
      alias: When dismiss_after is set.
    then:
    - delay:
        seconds: '{{ dismiss_after }}'
      alias: Delay for the specified number of seconds.
    - alias: Stop the displays.
      service: media_player.turn_off
      target:
        entity_id: '{{ entities }}'
  mode: parallel
  icon: mdi:cast
  fields:
    displays:
      description: Select the Google cast display(s).
      selector:
        device:
          multiple: true
          integration: cast
          entity:
            domain: media_player
    dashboard_path:
      description: Path to the desired dashboard.
      default: dashboard-cast
      example: lovelace
      required: false
      selector:
        text:
    view_path:
      description: Path to the page within the dashboard
      default: cameras
      example: home
      required: false
      selector:
        text:
    dismiss_after:
      description: 'Reset the display after # seconds.'
      required: false
      selector:
        number:
          min: 60
          max: 300
  max: 10
debug:
  alias: Debug
  sequence:
  - service: persistent_notification.create
    data:
      title: '{{ title|default(''Debug Message'') }}'
      message: '{{ message }}'
      notification_id: '{{ id|default(''debug_'' ~ as_timestamp(now())) }}'
  variables:
    title: '{{ title|default("Debug Message") }}'
  fields:
    title:
      description: Bold first line of the message.
      example: Debug Message
      selector:
        text:
    message:
      description: Useful information to share.
      selector:
        text:
  mode: queued
  icon: mdi:bug
  max: 10
notify_mobile_clear:
  alias: Notify mobile clear
  sequence:
  - variables:
      notification_service: "{%- set who = who|default(\"brian\") %}\n{%- if who.startswith(\"notify.\")
        %}\n  {{ who }}\n{%- else %}\n  notify.{{ who|default(\"brian\") }}\n{% endif
        %}\n"
      tag: '{{ tag }}'
  - alias: Only continue it mobile notifications are enabled.
    condition: state
    entity_id: input_boolean.mobile_notifications
    state: 'on'
  - alias: Clear the notification.
    service: '{{ notification_service }}'
    data:
      message: clear_notification
      data:
        tag: '{{ tag }}'
  mode: queued
  icon: mdi:cellphone-message-off
notify_mobile:
  alias: Notify mobile
  sequence:
  - condition: state
    entity_id: input_boolean.mobile_notifications
    state: 'on'
  - variables:
      notification_service: "{%- set who = who|default(\"brian\") %}\n{%- if who.startswith(\"notify.\")
        %}\n  {{ who }}\n{%- else %}\n  notify.{{ who|default(\"brian\") }}\n{% endif
        %}\n"
      camera: '{{ camera|default("none") }}'
      image: '{{ iif(who.endswith("pc"), camera, "") }}'
      critical: '{{ critical|default(false) }}'
      title: '{{ title|default("") }}'
      subtitle: '{{ subtitle|default("") }}'
      url: "{%- if camera != \"none\" %}\n  homeassistant://navigate/lovelace/outdoor\n{%-
        elif url is string %}\n  {%- if url.startswith(\"/\") %}\n    homeassistant://navigate{{
        url }}\n  {%- else %}\n    {{ url }}\n  {% endif %}\n{%- else %}\n  {{ default
        }}\n{% endif %}\n"
      group: "{%- set group = group|default(\"\") %}\n{%- if camera|default(\"\")
        != \"\" %}\n  {%- set group = \"camera\" %}\n{%- elif image|default(\"\")
        != \"\" %}\n  {%- set group = \"image\" %}\n{% endif %}\n{{ group }}\n"
      tag: '{{ tag }}'
      push:
        category: "{%- if camera|default(\"\") != \"\" %}\n  camera\n{%- else %}\n
          \ {{ default }}\n{%- endif %}\n"
        sound:
          name: "{%- if sound is string %}\n  {%- if sound.startswith(\"/\") %}\n
            \   media-source://media_source{{ sound }}\n  {%- else %}\n    {{ sound
            }}\n  {%- endif %}\n{%- elif critical %}\n  Update.caf\n{%- elif tag ==
            \"doorbell\" or category == \"doorbell\" %}\n  media-source://media_source/local/audio/jetsons-doorbell.mp3\n{%-
            elif tag == \"person_detected\" %}\n  US-EN-Alexa-Motion-At-Front-Door.wav\n{%
            else %}\n  default\n{%- endif %}\n"
          '{{ iif(critical, "critical", "disabled_critical") }}': 1
          '{{ iif(critical, "volume", "disabled_volume") }}': 1
      actions: '{{ actions|default([]) }}'
  - service: '{{ notification_service }}'
    data:
      title: '{{ title }}'
      message: '{{ message }}'
      data:
        subtitle: '{{ subtitle }}'
        url: '{{ url }}'
        entity_id: '{{ camera }}'
        push: '{{ push }}'
        actions: '{{ actions }}'
        '{{ iif(image == "", "disabled_", "") }}image': '{{ image }}'
        '{{ iif(group == "", "disabled_", "") }}group': '{{ group }}'
        '{{ iif(tag == "", "disabled_", "") }}tag': '{{ tag }}'
  fields:
    who:
      description: Who are we sending this message to?
      example: brian
      default: brian
      selector:
        text:
    title:
      description: Bold first line of the message.
      example: Safety Alert!
      default: Home Assistant
      selector:
        text:
    subtitle:
      description: Bold second line of the message.
      example: Notification
      selector:
        text:
    message:
      description: Include details here.
      example: Test message
      default: Test message
      selector:
        text:
          multiline: true
    camera:
      description: Camera entity.
      example: camera.front_door_restream
      selector:
        text:
    critical:
      description: Sound a critical alert sound!
      example: false
      selector:
        boolean:
    group:
      description: Combine notifications together visually. (iOS does not support
        grouping critical notifications.)
      example: person-detected
      selector:
        text:
    tag:
      description: Replace an existing notification by using a tag for the notification.
        All subsequent notifications will take the place of a notification with the
        same tag. (iOS does not support grouping critical notifications.)
      example: front-door-person-detected
      selector:
        text:
    url:
      description: Link to open.
      example: /lovelace/outdoor
      selector:
        text:
    sound:
      description: Audio to play with notification.
      example: /local/audio/jetsons-doorbell.mp3
      selector:
        text:
  mode: single
  icon: mdi:cellphone-message
notify_audio:
  alias: Notify audio
  icon: mdi:cast-audio
  sequence:
  - variables:
      entities: "{%- if speakers is defined %}\n  {%- set entities = speakers %}\n{%-
        else %}\n  {%- set entities = '[\"media_player.google_family_room\"]' %}\n{%-
        endif %}\n{{ entities }}\n"
      audio_file: '{{ audio_file|default("media-source://media_source/local/audio/sfx-pop4.mp3")
        }}'
      content_type: '{{ content_type|default("audio") }}'
      new_volume: "{%- if volume is number %}\n  {%- if volume > 1.0 %}\n    {%- set
        volume = volume / 100 %}\n  {%- else %}\n    {%- set volume = volume %}\n
        \ {%- endif %}\n{%- else %}\n  {%- set volume = states(\"input_number.default_audio_volume\")|float(default=0)
        / 100 %}\n{%- endif %}\n{{ volume }}\n"
      audio_notifications: '{{ is_state("input_boolean.audio_notifications", "on")
        }}'
      quiet_time: '{{ is_state("binary_sensor.noncritical_alert_quiet_time", "on")
        }}'
      family_home: '{{ states("sensor.family_present")|int(default=0) > 0 }}'
      guest_mode: '{{ is_state("input_boolean.guest_mode", "on") }}'
  - alias: Debug output. (Disable to turn off.)
    service: script.debug
    data:
      message: 'speakers: {{ speakers }}

        entities|count: {{ entities|count }}

        {{ speakers[0] }}


        audio_file: {{ audio_file }}

        content_type: {{ content_type }}

        new_volume: {{ new_volume }}


        audio_notifications: {{ audio_notifications }}

        quiet_time: {{ quiet_time }}


        audio_notifications and not quiet_time: {{ audio_notifications and not quiet_time
        }}

        '
    enabled: false
  - alias: When enabled and not quiet time, and family is home or guest mode is enabled.
    if:
    - condition: template
      value_template: '{{ (audio_notifications and not quiet_time) and (family_home
        or guest_mode) }}'
    then:
    - alias: Play the audio on all selected speakers.
      repeat:
        count: '{{ entities|count }}'
        sequence:
        - variables:
            speaker: '{{ entities[repeat.index-1] }}'
            current_volume: '{{ state_attr(speaker, "volume_level")|float(default=states("input_number.default_announcement_volume")|float(default=5)
              / 100) }}'
        - alias: Debug output. (Disable to turn off.)
          service: script.debug
          data:
            message: 'repeat.index: {{ repeat.index-1 }}

              speaker: {{ speaker }}

              current_volume: {{ current_volume }}

              new_volume: {{ new_volume }}

              '
          enabled: false
        - alias: Set player to defined volume.
          service: media_player.volume_set
          data:
            entity_id: '{{ speaker }}'
            volume_level: '{{ new_volume }}'
        - delay:
            seconds: 1
        - alias: Play the audio.
          service: media_player.play_media
          data:
            entity_id: '{{ speaker }}'
            media_content_id: '{{ audio_file }}'
            media_content_type: '{{ content_type }}'
        - alias: Wait for the audio to finish playing.
          wait_for_trigger:
            platform: template
            value_template: '{{ is_state(speaker, "idle") }}'
          timeout:
            minutes: 1
          continue_on_timeout: true
        - alias: Restore previous volume.
          service: media_player.volume_set
          data:
            entity_id: '{{ speaker }}'
            volume_level: '{{ current_volume }}'
    enabled: true
  fields:
    speakers:
      description: Select the speakers the audio should play on.
      selector:
        entity:
          multiple: true
          integration: cast
    audio_file:
      description: Path to the audio file.
      default: media-source://media_source/local/audio/jetsons-doorbell.mp3
      selector:
        text:
    volume:
      description: 'WARNING: this will override your preset "Default audio volume"!'
      default: 10
      selector:
        number:
          min: 5
          max: 100
          step: 5
  mode: single
notify_pc:
  alias: Notify PC
  sequence:
  - variables:
      notification_service: "{%- set pc = pc|default(\"blackpc\") %}\n{%- if pc.startswith(\"notify.\")
        %}\n  {{ pc }}\n{%- else %}\n  notify.{{ pc|default(\"blackpc\") }}\n{% endif
        %}\n"
      title: '{{ title|default("Home Assistant") }}'
      message: '{{ message|default(" ") }}'
      duration: '{{ duration }}'
      image: "{% set camera = camera|default(\"\") %}\n{%- if camera != \"\" %}\n
        \ {%- set image = \"http://homeassistant.local:8123\" + state_attr(camera,\"entity_picture\")
        %}\n{% endif %}\n{{ image|default(\"\") }}\n"
  - service: '{{ notification_service }}'
    data:
      title: '{{ title }}'
      message: '{{ message }}'
      data:
        duration: '{{ duration|int(default=0) }}'
        image: '{{ image }}'
  fields:
    pc:
      description: What PC are we sending this message to?
      example: blackpc
      default: blackpc
      selector:
        text:
    title:
      description: Bold first line of the message.
      example: Safety Alert!
      default: Home Assistant
      selector:
        text:
    message:
      description: Include details here.
      example: Test message
      default: Test message
      selector:
        text:
          multiline: true
    camera:
      description: Camera to pull a still from.
      example: ''
      default:
      selector:
        text:
    image:
      description: URL to an image.
      example: ''
      default:
      selector:
        text:
    duration:
      description: How many seconds before this message dissapears?
      example: 3
      default: 3
      selector:
        number:
  mode: single
  icon: mdi:desktop-classic
notify_persistent:
  alias: Notify persistent
  sequence:
  - service: persistent_notification.create
    data:
      title: '{{ title|default("") }}'
      message: '{{ message }}'
      notification_id: '{{ id|default("debug_" ~ as_timestamp(now())) }}'
  fields:
    title:
      description: Bold first line of the message.
      example: SAFETY ALERT
      selector:
        text:
    message:
      description: Useful information to share.
      selector:
        text:
    id:
      description: Unique identifier.
      selector:
        text:
  mode: single
  icon: mdi:window-maximize
notify_speech:
  alias: Notify speech
  sequence:
  - if:
    - condition: and
      conditions:
      - condition: state
        entity_id: input_boolean.audio_notifications
        state: 'on'
      - condition: state
        entity_id: binary_sensor.noncritical_alert_quiet_time
        state: 'off'
      - condition: or
        conditions:
        - condition: numeric_state
          entity_id: sensor.family_present
          above: 0
        - condition: state
          entity_id: input_boolean.guest_mode
          state: 'on'
    then:
    - service: script.say_local
      data:
        media_player: '{{ media_player }}'
        message: '{{ message }}'
    alias: When enabled and not quiet time, and family is home or guest mode is enabled.
  fields:
    message:
      description: Message for the voice assistant to say.
      example: Please close the windows.
      required: true
      selector:
        text:
          multiline: true
    media_player:
      description: Which speakers are we sending this message to?
      example: media_player.google_kitchen
      selector:
        select:
          options:
          - media_player.google_bedroom
          - media_player.google_kyles_room
          - media_player.google_lucas_room
          - media_player.google_lucas_sleep
          - media_player.google_boys_rooms
          - media_player.google_downstairs
          - media_player.google_welcome
          - media_player.google_kitchen
          - media_player.google_family_room
          - media_player.google_garage
          - media_player.google_play_room
          - media_player.google_upstairs
          - media_player.google_upstairs_bathroom
  mode: single
  icon: mdi:speaker-message
notify_web:
  alias: Notify web
  sequence:
  - service: ll_notify.{{ type|default("success") }}
    data:
      title: '{{ title|default("") }}'
      message: '{{ message|default("") }}'
      wait: '{{ duration|default(0) }}'
  fields:
    type:
      description: Which type of notification?
      example: warning
      selector:
        select:
          options:
          - alert
          - error
          - warning
          - success
    title:
      description: (*optional*) For Alert type messages only.
      example: Config Check Error
      selector:
        text:
    message:
      description: Useful information to share.
      selector:
        text:
    duration:
      description: This notification will disappear after how many seconds? (*Ignored
        for Alert type messages.*)
      default: 5
      selector:
        number:
          min: 0
          max: 3600
  mode: single
  icon: mdi:toaster
z2m_family_room_remote_action:
  alias: 'Remote: family room 5 buttons.'
  mode: restart
  sequence:
  - alias: Debug output. (Disable to turn off.)
    service: script.debug
    data:
      title: family_room_remote_action
      message: 'command: {{ command }}

        click_count: {{ click_count }}

        '
    enabled: false
  - if:
    - condition: template
      value_template: '{{ command == "toggle" }}'
      alias: When the power button is pressed.
    then:
    - choose:
      - conditions:
        - alias: 'Power button: single click.'
          condition: template
          value_template: '{{ click_count == 1 }}'
        sequence:
        - alias: Toggle the fan.
          service: fan.toggle
          target:
            entity_id: fan.family_room
          data: {}
      - conditions:
        - alias: 'Power button: double click.'
          condition: template
          value_template: '{{ click_count == 2 }}'
        sequence:
        - service: homeassistant.toggle
          target:
            entity_id: media_player.family_room_tv
          data: {}
          alias: Toggle the Family room TV.
      - conditions:
        - alias: 'Power button: triple click.'
          condition: template
          value_template: '{{ click_count == 3 }}'
        sequence:
        - choose:
          - conditions:
            - alias: When the door is locked.
              condition: template
              value_template: '{{ is_state("lock.front_door","locked") }}'
            sequence:
            - alias: Unlock the door.
              service: lock.unlock
              target:
                entity_id: lock.front_door
              data: {}
          default:
          - alias: Lock the door.
            service: lock.lock
            target:
              entity_id: lock.front_door
            data: {}
          alias: Toggle the front door lock.
      - conditions:
        - alias: 'Power button: quadruple click.'
          condition: template
          value_template: '{{ click_count == 4 }}'
        sequence:
        - service: input_boolean.toggle
          target:
            entity_id: input_boolean.guest_mode
          data: {}
          alias: Toggle guest mode.
      alias: Take action for that matches the number of clicks.
    alias: 'Power button (middle). .......... Note: no hold event is available for
      this button.'
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ command == "brightness_up_click" }}'
        alias: When brightness up is pressed.
      sequence:
      - alias: Take action for that matches the number of clicks.
        choose:
        - alias: 'Brightness up: single click.'
          conditions:
          - condition: template
            value_template: '{{ click_count == 1 }}'
            alias: Single click.
          sequence:
          - service: light.turn_on
            target:
              entity_id: light.family_room
            data:
              brightness_pct: 100
        - alias: 'Brightness up: double click.'
          conditions:
          - condition: template
            value_template: '{{ click_count == 2 }}'
            alias: Double click.
          sequence:
          - service: light.turn_on
            target:
              entity_id: light.family_room_table_lamp
            data:
              brightness_pct: 100
    - alias: 'Brightness up: hold.'
      conditions:
      - condition: template
        value_template: '{{ command == "brightness_up_hold" }}'
        alias: When brightness up is held.
      sequence:
      - service: light.turn_on
        target:
          entity_id:
          - light.family_room
          - light.family_room_table_lamp
        data:
          brightness_step_pct: 20
    alias: Brightness up (top).
  - alias: Brightness down (bottom).
    choose:
    - alias: Brightness down clicks.
      conditions:
      - condition: template
        value_template: '{{ command == "brightness_down_click" }}'
        alias: When brightness down is pressed.
      sequence:
      - alias: Take action for that matches the number of clicks.
        choose:
        - alias: 'Brightness down: single click.'
          conditions:
          - condition: template
            value_template: '{{ click_count == 1 }}'
            alias: Single click.
          sequence:
          - service: light.turn_off
            target:
              entity_id: light.family_room
            data: {}
        - alias: 'Brightness down: double click.'
          conditions:
          - condition: template
            value_template: '{{ click_count == 2 }}'
            alias: Double click.
          sequence:
          - service: light.turn_off
            target:
              entity_id: light.family_room_table_lamp
            data: {}
    - alias: 'Brightness down: hold.'
      conditions:
      - condition: template
        value_template: '{{ command == "brightness_down_hold" }}'
        alias: When brightness down is held.
      sequence:
      - service: light.turn_on
        target:
          entity_id:
          - light.family_room
          - light.family_room_table_lamp
        data:
          brightness_step_pct: -20
        enabled: true
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ command == "arrow_right_click" }}'
        alias: When Arrow right is pressed.
      sequence:
      - service: light.turn_on
        target:
          entity_id: light.family_room_floor_lamp
        data:
          brightness_pct: 100
    - alias: 'Arrow right: hold.'
      conditions:
      - condition: template
        value_template: '{{ command == "arrow_right_hold" }}'
        alias: When Arrow right is held.
      sequence:
      - service: light.turn_on
        target:
          entity_id: light.family_room_floor_lamp
        data:
          brightness_step_pct: '20'
    alias: Arrow right.
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ command == "arrow_left_click" }}'
        alias: When Arrow left is pressed.
      sequence:
      - service: light.turn_off
        target:
          entity_id: light.family_room_floor_lamp
        data: {}
    - alias: 'Arrow left: hold.'
      conditions:
      - condition: template
        value_template: '{{ command == "arrow_left_hold" }}'
        alias: When Arrow left is held.
      sequence:
      - service: light.turn_on
        target:
          entity_id: light.family_room_floor_lamp
        data:
          brightness_step_pct: '-20'
    alias: Arrow left.
  icon: mdi:remote-tv
say_cloud:
  alias: Say cloud
  sequence:
  - variables:
      message: '{{ message|striptags }}'
      media_player: '{{ media_player|default("media_player.google_kitchen") }}'
      targets: '{{ expand(media_player) | sort(attribute=''name'', reverse=false)
        | map(attribute=''entity_id'') | list }}'
      mqtt_message_attributes: "{\n  \"target\": \"{{ media_player }}\",\n  \"targets\":
        \"{{ targets }}\"\n}\n"
      volume: "{%- if volume is number %}\n  {%- if volume|float(default=0) > 1.0
        %}\n    {%- set volume = volume|float(default=0) / 100 %}\n  {%- else %}\n
        \   {%- set volume = volume|float(default=0) %}\n  {%- endif %}\n{%- else
        %}\n  {{ states(\"input_number.default_announcement_volume\")|int(default=0)
        / 100 }}\n{%- endif %}\n"
  - service: script.debug
    enabled: false
    data:
      message: 'media_player: "{{ media_player }}"

        volume: {{ volume }}

        '
  - alias: Only speak when there is something to say. ;)
    if:
    - condition: template
      value_template: '{{ message is defined }}'
      alias: When message is set.
    then:
    - if:
      - condition: template
        value_template: '{{ not media_player.endswith("pc") }}'
      then:
      - alias: Set volume so announcement can be heard.
        service: media_player.volume_set
        target:
          entity_id: '{{ media_player }}'
        data:
          volume_level: '{{ volume }}'
      alias: If not PC set volume so announcement can be heard.
    - delay:
        hours: 0
        minutes: 0
        seconds: 1
        milliseconds: 0
      enabled: true
    - alias: Say the message out loud.
      service: tts.cloud_say
      data:
        entity_id: '{{ media_player }}'
        message: '{{ message }}'
        language: en-US
        options:
          gender: female
    - service: script.notify_web
      data:
        message: '{{ message }}'
        duration: 10
    - alias: Store Last Message.
      service: script.store_mqtt_sensor
      data:
        name: last_message
        state: '{{ message }}'
        attributes: '{{ mqtt_message_attributes }}

          '
    - wait_for_trigger:
      - platform: template
        value_template: '{{ states(media_player) == "idle" }}'
        alias: Wait for the display to be "idle".
      continue_on_timeout: false
      alias: Wait for the media players to be "idle".
      timeout:
        hours: 0
        minutes: 1
        seconds: 0
        milliseconds: 0
      enabled: true
    - service: media_player.turn_off
      target:
        entity_id: '{{ media_player }}'
      alias: Turn off the media players.
    enabled: true
  mode: parallel
  fields:
    message:
      description: Include details here.
      example: The laundry is ready to be moved to the dryer.
      required: true
      selector:
        text:
          multiline: true
    media_player:
      description: Media Player entity_id.
      example: media_player.google_kitchen
      default: media_player.google_family_room
      selector:
        text:
    volume:
      description: Volume level as a percentage (or a decimal from 0 - 1.0)
      example: 60
      selector:
        number:
          min: 0
          max: 100
  max: 10
  icon: mdi:cloud-circle
repeat_last_message:
  alias: Repeat last message
  sequence:
  - alias: Say the previous message on the last Google speaker that was spoken to.
      Bypass `script.say_cloud` to avoid storing the last message again.
    service: tts.cloud_say
    data:
      entity_id: '{{ states("sensor.last_google") }}'
      message: This message is from {{ relative_time(states.sensor.last_message.last_updated)
        }} ago. {{ states("sensor.last_message") }}
      language: en-US
      options:
        gender: female
  mode: parallel
  icon: mdi:cast-audio
  max: 10
tts_phrase_say:
  alias: TTS phrase say
  sequence:
  - variables:
      media_player: '{{ media_player if media_player is defined else states("input_select.tts_phrase_room")
        }}'
      room: '{{ media_player|lower|replace(" ","_")|replace("[","")|replace("]","")
        }}'
      smart_speakers:
        bedroom: media_player.google_bedroom
        kyles_room: media_player.google_kyles_room
        kyle_morning: media_player.google_kyle_morning
        lucas_room: media_player.google_lucas_room
        lucas_morning: media_player.google_lucas_morning
        lucas_sleep: media_player.google_lucas_sleep
        boys_rooms: media_player.google_boys_rooms
        downstairs: media_player.google_downstairs
        kitchen-garage: media_player.google_welcome
        kitchen: media_player.google_kitchen
        family_room: media_player.google_family_room
        garage: media_player.google_garage
        play_room: media_player.google_play_room
        upstairs: media_player.google_upstairs
        upstairs_bathroom: media_player.google_upstairs_bathroom
      smart_speaker: '{{ smart_speakers[room] }}'
      selected_phrase: "{%- set selection = states(\"input_select.tts_phrases\")|trim
        %}\n{%- if selection not in [\"Unknown\",\"None\",\"\"] %}\n  {{ selection
        }}\n{%- endif %}\n"
      text_phrase: '{%- set text_phrase = states("input_text.tts_phrase")|trim %}

        {{ text_phrase if text_phrase not in ["Unknown","None",""] }}

        '
      message: "{%- if text_phrase|trim != \"\" %}\n  {{ text_phrase }}\n{%- elif
        selected_phrase|trim != \"\" %}\n  {{ selected_phrase }}\n{%- endif %}\n"
  - service: script.debug
    enabled: false
    data:
      message: 'media_player: {{ media_player }}

        room: {{ room }}


        selected_phrase: {{ selected_phrase }}

        text_phrase: {{ text_phrase }}

        message: {{ message }}

        '
  - if:
    - condition: template
      value_template: '{{ message|trim != "" }}'
      alias: When a message is set.
    then:
    - service: script.say_local
      data:
        media_player: '{{ smart_speaker }}'
        message: '{{ message }}'
      enabled: true
    - service: script.say_cloud
      data:
        media_player: '{{ smart_speaker }}'
        message: '{{ message }}'
      enabled: false
    alias: Speak when a message is set.
  mode: single
  icon: mdi:cast-audio-variant
say:
  alias: Say
  sequence:
  - variables:
      media_player: '{{ media_player|default("media_player.google_kitchen") }}'
    alias: Set a default media player.
  - alias: Debug output. (Disable to turn off.)
    service: script.debug
    data:
      message: "{%- from \"speech.jinja\" import get_briefing %}\n{{ get_briefing(\n
        \ message,\n  person_arriving,\n  say_welcome_home,\n  say_greeting,\n  say_inside_weather,\n
        \ say_outside_weather,\n  say_goodbye,\n  say_goodnight\n) }}\n"
    enabled: false
  - if:
    - condition: and
      conditions:
      - condition: state
        entity_id: input_boolean.audio_notifications
        state: 'on'
      - condition: state
        entity_id: binary_sensor.noncritical_alert_quiet_time
        state: 'off'
      alias: When speech is enabled.
    then:
    - service: script.say_local
      data:
        media_player: '{{ media_player }}'
        message: "{%- from \"speech.jinja\" import get_briefing %}\n{{ get_briefing(\n
          \ message,\n  person_arriving,\n  say_welcome_home,\n  say_greeting,\n  say_inside_weather,\n
          \ say_outside_weather,\n  say_goodbye,\n  say_goodnight\n) }}\n"
      enabled: false
    - service: script.say_cloud
      data:
        media_player: '{{ media_player }}'
        message: "{%- from \"speech.jinja\" import get_briefing %}\n{{ get_briefing(\n
          \ message,\n  person_arriving,\n  say_welcome_home,\n  say_greeting,\n  say_inside_weather,\n
          \ say_outside_weather,\n  say_goodbye,\n  say_goodnight\n) }}\n"
      enabled: true
    alias: Speak message when enabled.
    enabled: true
  mode: parallel
  fields:
    media_player:
      description: Media Player entity_id or group id.
      example: media_player.google_kitchen or media_player.google_welcome
      default: media_player.google_family_room
      selector:
        text:
    message:
      description: Include details here.
      example: The laundry is ready to be moved to the dryer.
      selector:
        text:
          multiline: true
    person_arriving:
      selector:
        text:
    say_greeting:
      selector:
        boolean:
    say_inside_weather:
      selector:
        boolean:
    say_outside_weather:
      selector:
        boolean:
    say_goodbye:
      selector:
        boolean:
    say_goodnight:
      selector:
        boolean:
  max: 10
  icon: mdi:cast-audio
docker:
  alias: Docker
  sequence:
  - alias: Debug output. (Disable to turn off.)
    service: script.debug
    data:
      title: '{{ command }} {{ container }}'
      message: 'update entity: {{ update }}

        service: ''rest_command.docker_{{ server|default("unraid") }}''

        '
    enabled: false
  - service: rest_command.docker_{{ server|default("unraid") }}
    data:
      container: '{{container}}'
      command: '{{command}}'
    alias: Make the API call to the server.
  - if:
    - condition: template
      value_template: '{{ update|default("")|length > 0 }}'
      alias: If a sensor entity_id is present update it.
    then:
    - delay:
        hours: 0
        minutes: 0
        seconds: 10
        milliseconds: 0
    - service: homeassistant.update_entity
      target:
        entity_id: '{{ update }}'
      alias: Update the passed sensor.
  mode: queued
  max: 10
refresh_entry_problem_sensors:
  alias: Refresh entity problem sensors
  sequence:
  - service: homeassistant.update_entity
    data: {}
    target:
      entity_id:
      - sensor.unknown_count
      - sensor.unavailable_count
  - service: template.reload
    data: {}
  mode: single
  icon: mdi:cog-refresh
say_local:
  alias: Say local
  sequence:
  - variables:
      message: '{{ message|striptags }}'
      media_player: '{{ media_player|default("media_player.google_kitchen") }}'
      targets: '{{ expand(media_player) | sort(attribute=''name'', reverse=false)
        | map(attribute=''entity_id'') | list }}'
      mqtt_message_attributes: "{\n  \"target\": \"{{ media_player }}\",\n  \"targets\":
        \"{{ targets }}\"\n}\n"
      volume: "{%- if volume is number %}\n  {%- if volume|float(default=0) > 1.0
        %}\n    {%- set volume = volume|float(default=0) / 100 %}\n  {%- else %}\n
        \   {%- set volume = volume|float(default=0) %}\n  {%- endif %}\n{%- else
        %}\n  {{ states(\"input_number.default_announcement_volume\")|int(default=0)
        / 100 }}\n{%- endif %}\n"
  - service: script.debug
    enabled: false
    data:
      message: 'media_player: "{{ media_player }}"

        volume: {{ volume }}

        '
  - alias: Only speak when there is something to say. ;)
    if:
    - condition: template
      value_template: '{{ message is defined }}'
      alias: When message is set.
    then:
    - if:
      - condition: template
        value_template: '{{ not media_player.endswith("pc") }}'
      then:
      - alias: Set volume so announcement can be heard.
        service: media_player.volume_set
        target:
          entity_id: '{{ media_player }}'
        data:
          volume_level: '{{ volume }}'
      alias: If not PC set volume so announcement can be heard.
    - delay:
        hours: 0
        minutes: 0
        seconds: 1
        milliseconds: 0
      enabled: true
    - service: tts.speak
      target:
        entity_id: tts.piper
      data:
        cache: true
        media_player_entity_id: '{{ media_player }}'
        message: '{{ message }}'
    - service: script.notify_web
      data:
        message: '{{ message }}'
        duration: 10
    - alias: Store Last Message.
      service: script.store_mqtt_sensor
      data:
        name: last_message
        state: '{{ message }}'
        attributes: '{{ mqtt_message_attributes }}

          '
    - wait_for_trigger:
      - platform: template
        value_template: '{{ states(media_player) == "idle" }}'
        alias: Wait for the display to be "idle".
      continue_on_timeout: false
      alias: Wait for the media players to be "idle".
      timeout:
        hours: 0
        minutes: 1
        seconds: 0
        milliseconds: 0
      enabled: true
    - service: media_player.turn_off
      target:
        entity_id: '{{ media_player }}'
      alias: Turn off the media players.
    enabled: true
  mode: parallel
  fields:
    message:
      description: Include details here.
      example: The laundry is ready to be moved to the dryer.
      required: true
      selector:
        text:
          multiline: true
    media_player:
      description: Media Player entity_id.
      example: media_player.google_kitchen
      default: media_player.google_family_room
      selector:
        text:
    volume:
      description: Volume level as a percentage (or a decimal from 0 - 1.0)
      example: 60
      selector:
        number:
          min: 0
          max: 100
  max: 10
  icon: mdi:cloud-cancel-outline
notify_pixel_clock:
  alias: Notify pixel clock
  sequence:
  - variables:
      pixel_clock: '{{ pixel_clock|default("pixel_clock1") }}

        '
      add_screen: "{%- set pixel_clock = pixel_clock|default(\"pixel_clock1\") ~ \"_screen\"
        %}\n{%- if pixel_clock.startswith(\"esphome.\") %}\n  {{ pixel_clock }}\n{%-
        else %}\n  esphome.{{ pixel_clock|default(\"pixel_clock1\") }}\n{% endif %}\n"
      remove_screen: "{%- set pixel_clock = pixel_clock|default(\"pixel_clock1\")
        ~ \"_del_screen\" %}\n{%- if pixel_clock.startswith(\"esphome.\") %}\n  {{
        pixel_clock }}\n{%- else %}\n  esphome.{{ pixel_clock|default(\"pixel_clock1\")
        }}\n{% endif %}\n"
      icon: '{{ icon|default("info") }}

        '
      message: '{{ message|default(" ") }}

        '
      duration: '{{ duration|default(3) }}'
  - service: '{{ add_screen }}'
    data:
      icon_name: '{{ icon }}'
      text: '{{ message }}'
  - delay:
      minutes: '{{ duration }}'
    alias: Delay for x minutes.
  - service: '{{ remove_screen }}'
    data:
      icon_name: '{{ icon }}'
  fields:
    pixel_clock:
      description: What pixel clock are we sending this message to?
      example: pixel_clock1
      default: pixel_clock1
      selector:
        text:
    icon:
      description: What icon do you want to appear?
      example: info
      default: info
      selector:
        text:
    message:
      description: What text do you want to display?
      example: Test message
      default: Test message
      selector:
        text:
          multiline: true
    duration:
      description: How many minutes before this message dissapears?
      example: 3
      default: 3
      selector:
        number:
          min: 1
          max: 15
          step: 1
          unit_of_measurement: minutes
          mode: slider
  mode: queued
  icon: mdi:clock-digital
  max: 10
get_nerene_active_wakeup_time:
  alias: Get active wakeup time for Nerene.
  sequence:
  - alias: Determine active wakeup time.
    variables:
      active_wakeup_time: "{%- if is_state(\"automation.nerene_rigid_wakeup\", \"on\")
        %}\n  {%- set wakeup_time = states(\"input_datetime.nerene_rigid_wakeup\")
        %}\n{%- elif is_state(\"timer.nerene_wakeup_light\",\"active\") %}\n  {%-
        set wakeup_time = state_attr(\"timer.nerene_wakeup_light\",\"finishes_at\")
        | as_timestamp | timestamp_custom(\"%I:%M:%S\") %}\n{%- elif is_state(\"binary_sensor.work_day_modified\",
        \"on\") and is_state(\"input_boolean.event_enabled_wakeup_nerene_modified\",
        \"on\") %}\n  {%- set wakeup_time = states(\"input_datetime.event_light_wakeup_nerene_modified\")
        %}\n{%- elif is_state(\"binary_sensor.work_day\", \"on\") and is_state(\"event_enabled_wakeup_nerene\",\"on\")
        %}\n  {%- set wakeup_time = states(\"input_datetime.event_light_wakeup_nerene\")
        %}\n{%- endif %} {{ wakeup_time | default(none) }}"
      result:
        time: '{{active_wakeup_time}}'
  - service: persistent_notification.create
    data:
      title: result
      message: '{{ result }}'
    alias: Debug
    enabled: true
  - stop: Return active wakeup time.
    response_variable: result
    alias: Return active wakeup time. [{{result.time}}]
  mode: single
  icon: mdi:family-tree
