restart_home_assistant:
  alias: Restart Home Assistant
  sequence:
  - service: script.notify_web
    data:
      type: warning
      message: Restarting Home Assistant
      duration: 60
  - service: homeassistant.restart
    data: {}
  mode: single
  icon: mdi:restart-alert
reboot_server:
  alias: Reboot Server
  sequence:
  - service: script.notify_web
    data:
      type: error
      message: Rebooting the server!
      duration: 120
  - service: hassio.host_reboot
    data: {}
  mode: single
  icon: mdi:power-cycle
config_check:
  alias: Config check
  sequence:
  - service: script.notify_web
    data:
      type: warning
      message: Config ✔️ begins.
      duration: 15
  - service: config_check.run
    data: {}
  - wait_template: '{{ states(''persistent_notification.1337'') is string }}'
    timeout: 00:03:00
  - alias: Dismiss the persistent notification if the check went well.
    choose:
    - conditions: '{{ state_attr("persistent_notification.1337", "message")|trim ==
        "Configuration is OK!" }}'
      sequence:
      - service: persistent_notification.dismiss
        data:
          notification_id: '1337'
      - service: script.notify_web
        data:
          type: success
          message: "Config ✔️ = \U0001F44D"
          duration: 15
    default:
    - variables:
        message: '{% set message = state_attr(''persistent_notification.1337'',''message'')
          | trim %}

          {% set message = message | replace("config/integrations/homeassistant/../../",
          "") %}

          {% set message = message | replace("[1m", "") | replace("[1;37m", "") |
          replace("[1;31m", "") %}

          {% set message = message | replace(":", ": ") %}

          {{ message | trim }}

          '
    - service: script.notify_web
      data:
        type: alert
        title: Config check error
        message: '{{ message }}'
  mode: single
  icon: mdi:check-decagram
config_check_and_restart:
  alias: Config check and restart
  sequence:
  - service: script.config_check
    data: {}
  - service: script.restart_home_assistant
    data: {}
  mode: single
  icon: mdi:restart
config_check_and_reboot_server:
  alias: Config check and reboot server
  sequence:
  - service: script.config_check
    data: {}
  - service: script.notify_web
    data:
      type: error
      message: Rebooting the server!
  - service: hassio.host_reboot
    data: {}
  mode: single
  icon: mdi:power
refresh_count_sensors:
  alias: Refresh count sensors
  mode: single
  icon: mdi:cog-refresh
  sequence:
  - service: homeassistant.update_entity
    target:
      entity_id: "{%- set storage = namespace(entities=\"\") %}\n{%- set entities
        = states.sensor | map(attribute=\"entity_id\") | list %}\n{%- for entity in
        entities if entity[(entity|length-6):] == \"_count\" %}\n  {%- set storage.entities
        = storage.entities ~ entity %}\n  {%- if not loop.last %}\n    {%- set storage.entities
        = storage.entities ~ ',' %}\n  {%- endif %}\n{%- endfor %}\n{{ storage.entities.split(\",\")
        }}\n"
    alias: Update templated entities
  - service: script.notify_web
    data:
      type: success
      message: Sensor counts are refreshed.
      duration: 10
refresh_update_sensors:
  alias: Refresh update sensors
  sequence:
  - service: homeassistant.update_entity
    target:
      entity_id:
      - sensor.addon_updates
      - sensor.unifi_gateway_firmware_upgradable
      - sensor.updates
  - delay:
      seconds: 2
  - service: homeassistant.update_entity
    target:
      entity_id:
      - sensor.updates
      - sensor.update_message
  - service: script.notify_web
    data:
      type: success
      message: Update sensors are refreshed.
      duration: 10
  mode: single
  icon: mdi:cog-refresh
generate_readme:
  alias: Generate readme
  sequence:
  - service: readme.generate
  - service: script.notify_web
    data:
      message: README + ui-lovelace generation process complete.
  mode: single
  icon: mdi:github
generate_fake_secrets:
  alias: Generate fake secrets
  sequence:
  - service: shell_command.rebuild_test_secrets
    data: {}
  - service: script.notify_web
    data:
      message: Fake_secrets.yaml regenerated.
  mode: single
  icon: mdi:thought-bubble
goodbye_routine:
  alias: Goodbye routine
  sequence:
  - service: script.turn_on
    entity_id: script.shutdown_routine
  - service: homeassistant.turn_off
    entity_id: group.bedroom_lights
  - service: script.say
    data:
      media_player: media_player.google_downstairs
      say_goodbye: 'true'
  - delay:
      seconds: 10
  - wait_template: '{{ is_state(''sensor.front_door'',''closed'') }}'
    timeout:
      minutes: 1
    continue_on_timeout: 'true'
  - service: lock.lock
    entity_id: lock.front_door
  mode: single
  icon: mdi:exit-run
goodnight_routine:
  alias: Goodnight routine
  sequence:
  - alias: Make sure the garage door is closed.
    service: cover.close_cover
    entity_id: cover.garage_door
  - alias: Lock the front door right away as well.
    service: lock.lock
    entity_id: lock.front_door
  - alias: Shutdown routine
    service: script.shutdown_routine
    data: {}
  - alias: Say goodnight.
    service: script.say
    data:
      media_player: media_player.google_family_room
      say_goodnight: 'true'
  mode: single
  icon: mdi:lightbulb-night-outline
shutdown_routine:
  alias: Shutdown routine
  sequence:
  - alias: Turn off everything except for the play room.
    service: homeassistant.turn_off
    entity_id:
    - fan.family_room
    - media_player.family_room_tv
    - group.kitchen_lights
    - group.dining_room_fixture
    - light.home_entry
    - light.family_room_floor_lamp
    - light.family_room_table_lamp
    - switch.hot_water_pump
  - delay:
      seconds: 2
  - alias: Turn off family room light last after a brief delay.
    service: light.turn_off
    entity_id: light.family_room
  mode: single
  icon: mdi:close-circle
store_mqtt_sensor:
  alias: Store MQTT sensor
  sequence:
  - service: mqtt.publish
    data:
      topic: custom/sensor/{{ name }}/state
      payload: '{{ state }}'
      retain: true
  - alias: Only add attributes if they are present.
    if:
    - condition: template
      value_template: '{{ attributes is defined }}'
    then:
    - service: mqtt.publish
      data:
        topic: custom/sensor/{{ name }}/attributes
        payload: '{{ attributes }}

          '
        retain: true
  mode: queued
  icon: mdi:motion-sensor
holiday_sensors_update:
  alias: Holiday sensors update
  sequence:
  - alias: Update upcoming dynamic holiday - easter.
    service: script.update_next_holiday
    data:
      holiday: easter
  - alias: Update upcoming dynamic holiday - election day.
    service: script.update_next_holiday
    data:
      holiday: election_day
  - alias: Update the holiday sensor.
    service: homeassistant.update_entity
    entity_id: sensor.holiday
  - delay:
      seconds: 10
  - service: script.holiday_color_change
    data: {}
  mode: single
  icon: mdi:calendar-sync
update_next_holiday:
  alias: Update next holiday
  sequence:
  - variables:
      today: '{{ states("sensor.date") }}'
      holiday_sensor: '{{ "sensor.date_" ~ holiday }}'
      next_holiday_sensor: '{{ "sensor.date_next_" ~ holiday }}'
      event_date: '{{ states(holiday_sensor) }}'
      day_after_event: "{%- if event_date != \"unknown\" %}\n  {%- set split_date
        = event_date.split(\"-\") %}\n  {{ \"{:04}-{:02}-{:02}\".format(split_date[0]|int(default=0),
        split_date[1]|int(default=0), (split_date[2]|int(default=0)+1)) }}\n{% endif
        %}\n"
  - alias: Only update the day after the event (or the event date is unknown).
    condition: template
    value_template: '{{ today == day_after_event or event_date == ''unknown'' }}

      '
  - service: persistent_notification.create
    data:
      title: update_next_holiday
      message: Updating {{ next_holiday_sensor }}.
  - service: homeassistant.update_entity
    data:
      entity_id: '{{ next_holiday_sensor }}'
  mode: single
  icon: mdi:calendar-sync
  fields:
    holiday:
      description: Name of the holiday that needs updating. (ex. easter or election_day)
      default: election_day
      required: true
      selector:
        text:
lights_flash:
  alias: Lights flash
  sequence:
  - variables:
      is_hue: '{{ state_attr(entity_id,"effect_list") is sequence }}'
  - service: script.notify_web
    data:
      message: 'entity_id: {{ entity_id }}

        number_of_flashes: {{ number_of_flashes }}

        delay_between_flashes: {{ delay_between_flashes }}

        flash_transition_delay: {{ flash_transition_delay }}

        is_hue: {{ is_hue }}'
    enabled: false
    alias: Debug output (notify_web)
  - alias: Store the current state of the light.
    service: scene.create
    data:
      scene_id: lights_flash_snapshot
      snapshot_entities: '{{ entity_id }}'
  - repeat:
      count: '{{ number_of_flashes }}'
      sequence:
      - choose:
        - alias: Use Hue built in flash when available.
          conditions:
          - '{{ is_hue }}'
          sequence:
          - service: light.turn_on
            data:
              entity_id: '{{ entity_id }}'
              flash: short
        default:
        - service: light.turn_on
          data:
            entity_id: '{{ entity_id }}'
            transition: 0
        - alias: Transition time between flashes.
          delay:
            seconds: '{{ flash_transition_delay }}'
        - service: light.turn_off
          data:
            entity_id: '{{ entity_id }}'
            transition: 0
      - alias: Delay between flashes.
        delay:
          seconds: '{{ delay_between_flashes }}'
  - delay:
      seconds: 2
  - alias: Restore the previous state of the light.
    service: scene.turn_on
    data:
      entity_id: scene.lights_flash_snapshot
      transition: 5
  mode: single
  icon: mdi:lightbulb-on
  fields:
    entity_id:
      description: Select the light to flash.
      required: true
      selector:
        entity:
          multiple: false
          domain: light
    number_of_flashes:
      description: Number of flashes.
      required: true
      default: 3
      selector:
        number:
          min: 1
          max: 10
    delay_between_flashes:
      description: Seconds delay between flashes.
      required: true
      default: 1
      selector:
        number:
          min: 1
          max: 5
    flash_transition_delay:
      description: Transition duration.
      required: true
      default: 0.5
      selector:
        number:
          min: 0.5
          max: 5
          step: 0.5
holiday_color_change:
  alias: Holiday light color set
  sequence:
  - variables:
      holiday_colors:
        test: Green
        birthday: Purple
        christmas: Green
        easter: Orchid
        fathers: Orange
        halloween: OrangeRed
        marti_gras: Purple
        new_years: Violet
        pi: Blue
        st_patty: DarkGreen
        starwars: Red
        thanksgiving: Orange
        usa: Blue
        valentine: Crimson
      holiday: "{% set holiday = states('sensor.holiday') -%}\n{%- if holiday is not
        none and holiday != \"\" -%}\n  {%- set holiday = holiday|lower|trim|replace(\"'\",\"\")|replace(\"
        \",\"_\")|replace(\",_eve\",\"\")|replace(\"_day\",\"\") -%}\n  {%- if holiday
        in [\"constitution\",\"flag\",\"independence\",\"memorial\",\"mlk\",\"presidents\",\"veterans\"]
        -%}\n    {{ \"usa\" }}\n  {%- else -%}\n    {%- if holiday == \"christmas\"
        -%}\n      {{ \"christmas\" }}\n    {%- elif holiday.split('_')|last == \"birthday\"
        -%}\n      {{ \"birthday\" }}\n    {%- else -%}\n      {{ holiday|replace(\"mothers\",\"valentine\")|replace(\"earth\",\"st_patty\")
        }}\n    {%- endif -%}\n  {%- endif %}\n{%- else -%}\n  {{ \"standard\" }}\n{%-
        endif %}\n"
  - choose:
    - conditions:
      - '{{ holiday != "standard" }}'
      sequence:
      - variables:
          color: '{{ holiday_colors[holiday] }}'
      - choose:
        - conditions:
          - '{{ is_state("light.porch","on") }}'
          sequence:
          - service: light.turn_on
            target:
              entity_id: light.porch
            data:
              color_name: '{{ color }}'
      - choose:
        - conditions:
          - '{{ is_state("light.family_room_table_lamp","on") }}'
          sequence:
          - service: light.turn_on
            target:
              entity_id: light.family_room_table_lamp
            data:
              color_name: '{{ color }}'
    default:
    - choose:
      - conditions:
        - '{{ is_state("light.porch","on") }}'
        sequence:
        - service: light.turn_on
          target:
            entity_id: light.porch
          data:
            kelvin: 4000
    - choose:
      - conditions:
        - '{{ is_state("light.family_room_table_lamp","on") }}'
        sequence:
        - service: light.turn_on
          target:
            entity_id: light.family_room_table_lamp
          data:
            kelvin: 4000
  mode: single
  icon: mdi:palette
light_sequence:
  alias: Light sequence
  sequence:
  - variables:
      color_count: '{{ colors|count }}'
  - alias: Display debug info (notify_web).
    enabled: false
    service: script.notify_web
    data:
      message: 'delay: ''{{ delay }}''

        transition: ''{{ transition }}''

        colors: ''{{ colors }}''

        color_count: ''{{ colors_count }}''

        entity_id: ''{{ entity_id }}''

        '
  - alias: Turn on light group before we start.
    repeat:
      count: '{{ color_count|int(default=0) }}'
      sequence:
      - service: script.light_sequence_color
        data:
          entity_id: '{{ entity_id }}'
          brightness: 255
          color: white
          delay: '0'
          transition: '0'
  - alias: Loop through the colors.
    repeat:
      count: '{{ color_count|int(default=0) }}'
      sequence:
      - alias: Change all bulbs to this color one at a time.
        service: script.light_sequence_color
        data:
          entity_id: '{{ entity_id }}'
          color: '{{ colors[repeat.index-1] }}'
          delay: '{{ delay }}'
          transition: '{{ transition }}'
      - alias: Stop
        choose:
        - conditions:
          - '{{ is_state(entity_id,"off") }}'
          sequence:
          - service: script.turn_off
            entity_id:
            - script.light_sequence
            - script.light_sequence_color
          - service: homeassistant.turn_off
            data:
              entity_id: '{{ entity_id }}'
  mode: restart
  max_exceeded: silent
  icon: mdi:string-lights
  fields:
    entity_id:
      description: Select the light sequence.
      required: true
      default: light.dining_room
      example: light.dining_room
      selector:
        entity:
          multiple: false
          domain: light
    delay:
      description: Duration between flashes.
      required: true
      default: 0.5
      selector:
        number:
          min: 0.5
          max: 5
          step: 0.5
    transition:
      description: Transition duration.
      required: true
      default: 2
      selector:
        number:
          min: 0.5
          max: 5
          step: 0.5
    colors:
      description: Choose multiple colors to cycle through. https://www.w3.org/TR/css-color-3/#svg-color
      required: true
      selector:
        select:
          multiple: true
          options:
          - aquamarine
          - blueviolet
          - cadetblue
          - coral
          - cornflowerblue
          - crimson
          - cyan
          - darkslateblue
          - darkgoldenrod
          - darkmagenta
          - darkslategrey
          - darkviolet
          - darkturquoise
          - deeppink
          - deepskyblue
          - firebrick
          - dodgerblue
          - forestgreen
          - gold
          - indigo
          - lavenderblush
          - lawngreen
          - lemonchiffon
          - lightblue
          - darkturquoise
light_sequence_color:
  alias: Light sequence color
  sequence:
  - variables:
      light_groups:
        light.bedroom_east: group.bedroom_east_fixture
        light.dining_room: group.dining_room_fixture
        light.play_room_floor_lamp: group.play_room_floor_lamp_fixture
      entity: '{{ light_groups[entity_id]|default(entity_id) }}'
      bulb_count: '{{ state_attr(entity,"entity_id")|count if entity.startswith("group")
        else 1 }}'
      color: '{{ color|default("cyan") }}

        '
      delay: '{{ delay|float(default=0.5) }}'
      transition: '{{ transition|int(default=5) }}'
  - alias: Show debug info (notify_web).
    service: script.notify_web
    enabled: false
    data:
      message: 'entity: {{ entity }}

        bulb_count: {{ bulb_count }}

        '
  - choose:
    - conditions:
      - '{{ bulb_count|int(default=0) > 1 }}'
      sequence:
      - repeat:
          count: '{{ bulb_count }}'
          sequence:
          - delay:
              seconds: '{{ delay }}'
          - service: light.turn_on
            data:
              brightness: 255
              entity_id: '{{ state_attr(entity,"entity_id")[repeat.index-1] }}'
              color_name: '{{ color }}'
              transition: '{{ transition }}'
    default:
    - delay:
        seconds: '{{ delay }}'
    - service: light.turn_on
      data:
        brightness: 255
        entity_id: '{{ entity }}'
        color_name: '{{ color }}'
        transition: '{{ transition }}'
  - delay:
      seconds: '{{ transition }}'
  mode: queued
  max: 10
  icon: mdi:palette
  fields:
    entity_id:
      description: Select the light sequence.
      required: true
      default: light.dining_room
      example: light.dining_room
      selector:
        entity:
          multiple: false
          domain: light
    delay:
      description: Duration between flashes.
      required: true
      default: 0.5
      selector:
        number:
          min: 0.5
          max: 5
          step: 0.5
    transition:
      description: Transition duration.
      required: true
      default: 2
      selector:
        number:
          min: 0.5
          max: 5
          step: 0.5
    colors:
      description: Choose multiple colors to cycle through. https://www.w3.org/TR/css-color-3/#svg-color
      required: true
      selector:
        select:
          multiple: true
          options:
          - aquamarine
          - blueviolet
          - cadetblue
          - coral
          - cornflowerblue
          - crimson
          - cyan
          - darkslateblue
          - darkgoldenrod
          - darkmagenta
          - darkslategrey
          - darkviolet
          - darkturquoise
          - deeppink
          - deepskyblue
          - firebrick
          - dodgerblue
          - forestgreen
          - gold
          - indigo
          - lavenderblush
          - lawngreen
          - lemonchiffon
          - lightblue
vacuum_room_clean:
  alias: Vacuum room clean
  sequence:
  - variables:
      rooms: "{%- if rooms is defined %}\n  {{ rooms }}\n{%- endif %}\n"
      vacuum: "{%- if vacuum is defined %}\n  {{ vacuum }}\n{%- else %}\n  [\"vacuum.family_room\",\"vacuum.play_room\"]\n{%-
        endif %}\n"
  - if:
    - condition: template
      value_template: '{{ rooms|upper in ["","ALL"] }}'
    then:
    - service: vacuum.send_command
      data:
        command: sweep_auto
      target:
        entity_id: '{{ vacuum }}'
    else:
    - service: vacuum.send_command
      data:
        command: sweep_rooms
        params:
          rooms: ' {{ rooms }} '
      target:
        entity_id: '{{ vacuum }}'
  icon: mdi:update
  mode: parallel
  fields:
    rooms:
      name: Room(s)
      description: Room or rooms to clean
      example: Family room
      selector:
        select:
          multiple: true
          options:
          - ALL
          - Family room
          - Kitchen
    vacuum:
      name: Vacuum
      description: Vacuum to clean.
      example: vacuum.family_room
      selector:
        entity:
          multiple: true
          domain:
          - vacuum
  max: 10
vacuum_update:
  alias: Vacuum update
  sequence:
  - variables:
      vacuum: "{%- if vacuum is defined %}\n  {{ vacuum }}\n{%- else %}\n  [\"vacuum.family_room\",\"vacuum.play_room\"]\n{%-
        endif %}\n"
  - service: vacuum.send_command
    data:
      command: update
    target:
      entity_id: '{{ vacuum }}'
  icon: mdi:update
  mode: parallel
  fields:
    vacuum:
      name: Vacuum
      description: Vacuum to update.
      example: vacuum.family_room
      selector:
        entity:
          multiple: true
          domain:
          - vacuum
  max: 10
cast:
  alias: Cast
  sequence:
  - if:
    - condition: state
      entity_id: automation.startup
      state: 'on'
      alias: When startup is on.
    then:
    - wait_for_trigger:
      - platform: state
        entity_id:
        - automation.startup
        from: 'on'
        to: 'off'
    alias: Should this try to run during startup... wait for startup to complete.
  - variables:
      entities: "{%- set data = namespace(displays=\"\") %}\n{%- if displays is defined
        %}\n  {%- if displays is not string %}\n    {%- for display in displays %}\n
        \     {%- set data.displays = data.displays ~ '\"' ~ device_entities(display)[0]
        ~ '\"' ~ iif(not loop.last, \",\", \"\") %}\n    {%- endfor %}\n  {%- else
        %}\n    {%- set data.displays = '\"' ~ device_entities(displays)[0] ~ '\"'
        %}\n  {%- endif %}\n{%- else %}\n  {%- set data.displays = '\"media_player.google_kitchen\"'
        %}\n{%- endif %}\n[{{ data.displays }}]\n"
  - service: script.debug
    enabled: false
    data:
      message: 'displays is not string: ''{{ displays is not string }}''

        dismiss_after is defined: ''{{ dismiss_after is defined }}''


        displays: ''{{ displays }}''


        entities: ''{{ entities }}''

        count: {{ entities|count }}


        dashboard_path: "{{ dashboard_path }}"

        view_path: "{{ view_path }}"


        dismiss_after: ''{{ dismiss_after }}''

        '
  - alias: Turn off the media players before we cast a new page for it to display.
    service: media_player.turn_off
    target:
      entity_id: '{{ entities }}'
  - alias: Cast a page to the specified displays.
    repeat:
      count: '{{ entities|count }}'
      sequence:
      - alias: Cast a dashboard to a display.
        service: cast.show_lovelace_view
        data:
          entity_id: '{{ entities[repeat.index-1] }}'
          dashboard_path: '{{ dashboard_path }}'
          view_path: '{{ view_path }}'
  - alias: If `dismiss_after` is set, then turn off the displays after the specified
      delay.
    if:
    - condition: template
      value_template: '{{ dismiss_after is defined }}'
      alias: When dismiss_after is set.
    then:
    - delay:
        seconds: '{{ dismiss_after }}'
      alias: Delay for the specified number of seconds.
    - alias: Stop the displays.
      service: media_player.turn_off
      target:
        entity_id: '{{ entities }}'
  mode: parallel
  icon: mdi:cast
  fields:
    displays:
      description: Select the Google cast display(s).
      selector:
        device:
          multiple: true
          integration: cast
          entity:
            domain: media_player
    dashboard_path:
      description: Path to the desired dashboard.
      default: dashboard-cast
      example: lovelace
      required: false
      selector:
        text:
    view_path:
      description: Path to the page within the dashboard
      default: cameras
      example: home
      required: false
      selector:
        text:
    dismiss_after:
      description: 'Reset the display after # seconds.'
      required: false
      selector:
        number:
          min: 60
          max: 300
  max: 10
debug:
  alias: Debug
  sequence:
  - service: persistent_notification.create
    data:
      title: '{{ title|default(''Debug Message'') }}'
      message: '{{ message }}'
      notification_id: '{{ id|default(''debug_'' ~ as_timestamp(now())) }}'
  variables:
    title: '{{ title|default("Debug Message") }}'
  fields:
    title:
      description: Bold first line of the message.
      example: Debug Message
      selector:
        text:
    message:
      description: Useful information to share.
      selector:
        text:
  mode: queued
  icon: mdi:bug
  max: 10
notify_mobile_clear:
  alias: Notify mobile clear
  sequence:
  - variables:
      notification_service: "{%- set who = who|default(\"brian\") %}\n{%- if who.startswith(\"notify.\")
        %}\n  {{ who }}\n{%- else %}\n  notify.{{ who|default(\"brian\") }}\n{% endif
        %}\n"
      tag: '{{ tag }}'
  - alias: Only continue it mobile notifications are enabled.
    condition: state
    entity_id: input_boolean.mobile_notifications
    state: 'on'
  - alias: Clear the notification.
    service: '{{ notification_service }}'
    data:
      message: clear_notification
      data:
        tag: '{{ tag }}'
  mode: single
  icon: mdi:cellphone-message-off
notify_mobile:
  alias: Notify mobile
  sequence:
  - condition: state
    entity_id: input_boolean.mobile_notifications
    state: 'on'
  - variables:
      notification_service: "{%- set who = who|default(\"brian\") %}\n{%- if who.startswith(\"notify.\")
        %}\n  {{ who }}\n{%- else %}\n  notify.{{ who|default(\"brian\") }}\n{% endif
        %}\n"
      camera: '{{ camera|default("none") }}'
      critical: '{{ critical|default(false) }}'
      title: '{{ title|default("") }}'
      subtitle: '{{ subtitle|default("") }}'
      url: "{%- if camera != \"none\" %}\n  homeassistant://navigate/lovelace/outdoor\n{%-
        elif url is string %}\n  {%- if url.startswith(\"/\") %}\n    homeassistant://navigate{{
        url }}\n  {%- else %}\n    {{ url }}\n  {% endif %}\n{%- else %}\n  {{ default
        }}\n{% endif %}\n"
      group: "{%- set group = group|default(\"\") %}\n{%- if camera|default(\"\")
        != \"\" %}\n  {%- set group = \"camera\" %}\n{%- elif image|default(\"\")
        != \"\" %}\n  {%- set group = \"image\" %}\n{% endif %}\n{{ group }}\n"
      tag: '{{ tag }}'
      push:
        category: "{%- if camera|default(\"\") != \"\" %}\n  camera\n{%- else %}\n
          \ {{ default }}\n{%- endif %}\n"
        sound:
          name: "{%- if sound is string %}\n  {%- if sound.startswith(\"/\") %}\n
            \   media-source://media_source{{ sound }}\n  {%- else %}\n    {{ sound
            }}\n  {%- endif %}\n{%- elif critical %}\n  Update.caf\n{%- elif tag ==
            \"doorbell\" or category == \"doorbell\" %}\n  media-source://media_source/local/audio/jetsons-doorbell.mp3\n{%-
            elif tag == \"person_detected\" %}\n  US-EN-Alexa-Motion-At-Front-Door.wav\n{%
            else %}\n  default\n{%- endif %}\n"
          '{{ iif(critical, "critical", "disabled_critical") }}': 1
          '{{ iif(critical, "volume", "disabled_volume") }}': 1
      actions: '{{ actions|default([]) }}'
  - service: '{{ notification_service }}'
    data:
      title: '{{ title }}'
      message: '{{ message }}'
      data:
        subtitle: '{{ subtitle }}'
        url: '{{ url }}'
        entity_id: '{{ camera }}'
        push: '{{ push }}'
        actions: '{{ actions }}'
        '{{ iif(group == "", "disabled_", "") }}group': '{{ group }}'
        '{{ iif(tag == "", "disabled_", "") }}tag': '{{ tag }}'
  fields:
    who:
      description: Who are we sending this message to?
      example: brian
      default: brian
      selector:
        text:
    title:
      description: Bold first line of the message.
      example: Safety Alert!
      default: Home Assistant
      selector:
        text:
    subtitle:
      description: Bold second line of the message.
      example: Notification
      selector:
        text:
    message:
      description: Include details here.
      example: Test message
      default: Test message
      selector:
        text:
          multiline: true
    camera:
      description: Camera entity.
      example: camera.front_door
      selector:
        text:
    critical:
      description: Sound a critical alert sound!
      example: false
      selector:
        boolean:
    group:
      description: Combine notifications together visually. (iOS does not support
        grouping critical notifications.)
      example: person-detected
      selector:
        text:
    tag:
      description: Replace an existing notification by using a tag for the notification.
        All subsequent notifications will take the place of a notification with the
        same tag. (iOS does not support grouping critical notifications.)
      example: front-door-person-detected
      selector:
        text:
    url:
      description: Link to open.
      example: /lovelace/outdoor
      selector:
        text:
    sound:
      description: Audio to play with notification.
      example: /local/audio/jetsons-doorbell.mp3
      selector:
        text:
  mode: single
  icon: mdi:cellphone-message
notify_audio:
  alias: Notify audio
  icon: mdi:cast-audio
  sequence:
  - variables:
      entities: "{%- if speakers is defined %}\n  {%- set entities = speakers %}\n{%-
        else %}\n  {%- set entities = '[\"media_player.google_family_room\"]' %}\n{%-
        endif %}\n{{ entities }}\n"
      audio_file: '{{ audio_file|default("media-source://media_source/local/audio/sfx-pop4.mp3")
        }}'
      content_type: '{{ content_type|default("audio") }}'
      new_volume: "{%- if volume is number %}\n  {%- if volume > 1.0 %}\n    {%- set
        volume = volume / 100 %}\n  {%- else %}\n    {%- set volume = volume %}\n
        \ {%- endif %}\n{%- else %}\n  {%- set volume = states(\"input_number.default_audio_volume\")|float(default=0)
        / 100 %}\n{%- endif %}\n{{ volume }}\n"
      audio_notifications: '{{ is_state("input_boolean.audio_notifications", "on")
        }}'
      quiet_time: '{{ is_state("binary_sensor.noncritical_alert_quiet_time", "on")
        }}'
      family_home: '{{ states("sensor.family_present")|int(default=0) > 0 }}'
      guest_mode: '{{ is_state("input_boolean.guest_mode", "on") }}'
  - alias: Debug output. (Disable to turn off.)
    service: script.debug
    data:
      message: 'speakers: {{ speakers }}

        entities|count: {{ entities|count }}

        {{ speakers[0] }}


        audio_file: {{ audio_file }}

        content_type: {{ content_type }}

        new_volume: {{ new_volume }}


        audio_notifications: {{ audio_notifications }}

        quiet_time: {{ quiet_time }}


        audio_notifications and not quiet_time: {{ audio_notifications and not quiet_time
        }}

        '
    enabled: false
  - alias: When enabled and not quiet time, and family is home or guest mode is enabled.
    if:
    - condition: template
      value_template: '{{ (audio_notifications and not quiet_time) and (family_home
        or guest_mode) }}'
    then:
    - alias: Play the audio on all selected speakers.
      repeat:
        count: '{{ entities|count }}'
        sequence:
        - variables:
            speaker: '{{ entities[repeat.index-1] }}'
            current_volume: '{{ state_attr(speaker, "volume_level")|float(default=states("input_number.default_announcement_volume")|float(default=5)
              / 100) }}'
        - alias: Debug output. (Disable to turn off.)
          service: script.debug
          data:
            message: 'repeat.index: {{ repeat.index-1 }}

              speaker: {{ speaker }}

              current_volume: {{ current_volume }}

              new_volume: {{ new_volume }}

              '
          enabled: false
        - alias: Set player to defined volume.
          service: media_player.volume_set
          data:
            entity_id: '{{ speaker }}'
            volume_level: '{{ new_volume }}'
        - delay:
            seconds: 1
        - alias: Play the audio.
          service: media_player.play_media
          data:
            entity_id: '{{ speaker }}'
            media_content_id: '{{ audio_file }}'
            media_content_type: '{{ content_type }}'
        - alias: Wait for the audio to finish playing.
          wait_for_trigger:
            platform: template
            value_template: '{{ is_state(speaker, "idle") }}'
          timeout:
            minutes: 1
          continue_on_timeout: true
        - alias: Restore previous volume.
          service: media_player.volume_set
          data:
            entity_id: '{{ speaker }}'
            volume_level: '{{ current_volume }}'
    enabled: true
  fields:
    speakers:
      description: Select the speakers the audio should play on.
      selector:
        entity:
          multiple: true
          integration: cast
    audio_file:
      description: Path to the audio file.
      default: media-source://media_source/local/audio/jetsons-doorbell.mp3
      selector:
        text:
    volume:
      description: 'WARNING: this will override your preset "Default audio volume"!'
      default: 10
      selector:
        number:
          min: 5
          max: 100
          step: 5
  mode: single
notify_pc:
  alias: Notify PC
  sequence:
  - variables:
      notification_service: "{%- set pc = pc|default(\"blackpc\") %}\n{%- if pc.startswith(\"notify.\")
        %}\n  {{ pc }}\n{%- else %}\n  notify.{{ pc|default(\"blackpc\") }}\n{% endif
        %}\n"
      title: '{{ title|default("Home Assistant") }}'
      message: '{{ message|default(" ") }}'
      duration: '{{ duration }}'
      image: "{% set camera = camera|default(\"\") %}\n{%- if camera != \"\" %}\n
        \ {%- set image = \"http://homeassistant.local:8123\" + state_attr(camera,\"entity_picture\")
        %}\n{% endif %}\n{{ image|default(\"\") }}\n"
  - service: '{{ notification_service }}'
    data:
      title: '{{ title }}'
      message: '{{ message }}'
      data:
        duration: '{{ duration|int(default=0) }}'
        image: '{{ image }}'
  fields:
    pc:
      description: What PC are we sending this message to?
      example: blackpc
      default: blackpc
      selector:
        text:
    title:
      description: Bold first line of the message.
      example: Safety Alert!
      default: Home Assistant
      selector:
        text:
    message:
      description: Include details here.
      example: Test message
      default: Test message
      selector:
        text:
          multiline: true
    camera:
      description: Camera to pull a still from.
      example: ''
      default:
      selector:
        text:
    image:
      description: URL to an image.
      example: ''
      default:
      selector:
        text:
    duration:
      description: How many seconds before this message dissapears?
      example: 3
      default: 3
      selector:
        number:
  mode: single
  icon: mdi:desktop-classic
notify_persistent:
  alias: Notify persistent
  sequence:
  - service: persistent_notification.create
    data:
      title: '{{ title|default("") }}'
      message: '{{ message }}'
      notification_id: '{{ id|default("debug_" ~ as_timestamp(now())) }}'
  fields:
    title:
      description: Bold first line of the message.
      example: SAFETY ALERT
      selector:
        text:
    message:
      description: Useful information to share.
      selector:
        text:
    id:
      description: Unique identifier.
      selector:
        text:
  mode: single
  icon: mdi:window-maximize
notify_speech:
  alias: Notify speech
  sequence:
  - if:
    - condition: and
      conditions:
      - condition: state
        entity_id: input_boolean.audio_notifications
        state: 'on'
      - condition: state
        entity_id: binary_sensor.noncritical_alert_quiet_time
        state: 'off'
      - condition: or
        conditions:
        - condition: numeric_state
          entity_id: sensor.family_present
          above: 0
        - condition: state
          entity_id: input_boolean.guest_mode
          state: 'on'
    then:
    - service: script.say_cloud
      data:
        media_player: '{{ media_player }}'
        message: '{{ message }}'
    alias: When enabled and not quiet time, and family is home or guest mode is enabled.
  fields:
    message:
      description: Message for the voice assistant to say.
      example: Please close the windows.
      required: true
      selector:
        text:
          multiline: true
    media_player:
      description: Which speakers are we sending this message to?
      example: media_player.google_kitchen
      selector:
        select:
          options:
          - media_player.google_bedroom
          - media_player.google_kyles_room
          - media_player.google_lucas_room
          - media_player.google_lucas_sleep
          - media_player.google_boys_rooms
          - media_player.google_downstairs
          - media_player.google_welcome
          - media_player.google_kitchen
          - media_player.google_family_room
          - media_player.google_garage
          - media_player.google_play_room
          - media_player.google_upstairs
          - media_player.google_upstairs_bathroom
  mode: single
  icon: mdi:speaker-message
notify_web:
  alias: Notify web
  sequence:
  - service: ll_notify.{{ type|default("success") }}
    data:
      title: '{{ title|default("") }}'
      message: '{{ message|default("") }}'
      wait: '{{ duration|default(0) }}'
  fields:
    type:
      description: Which type of notification?
      example: warning
      selector:
        select:
          options:
          - alert
          - error
          - warning
          - success
    title:
      description: (*optional*) For Alert type messages only.
      example: Config Check Error
      selector:
        text:
    message:
      description: Useful information to share.
      selector:
        text:
    duration:
      description: This notification will disappear after how many seconds? (*Ignored
        for Alert type messages.*)
      default: 5
      selector:
        number:
          min: 0
          max: 3600
  mode: single
  icon: mdi:toaster
z2m_family_room_remote_action:
  alias: 'Remote: family room 5 buttons.'
  mode: restart
  sequence:
  - alias: Debug output. (Disable to turn off.)
    service: script.debug
    data:
      title: family_room_remote_action
      message: 'command: {{ command }}

        click_count: {{ click_count }}

        '
    enabled: false
  - if:
    - condition: template
      value_template: '{{ command == "toggle" }}'
      alias: When the power button is pressed.
    then:
    - choose:
      - conditions:
        - alias: 'Power button: single click.'
          condition: template
          value_template: '{{ click_count == 1 }}'
        sequence:
        - alias: Toggle the fan.
          service: fan.toggle
          target:
            entity_id: fan.family_room
          data: {}
      - conditions:
        - alias: 'Power button: double click.'
          condition: template
          value_template: '{{ click_count == 2 }}'
        sequence:
        - service: homeassistant.toggle
          target:
            entity_id: media_player.family_room_tv
          data: {}
          alias: Toggle the Family room TV.
      - conditions:
        - alias: 'Power button: triple click.'
          condition: template
          value_template: '{{ click_count == 3 }}'
        sequence:
        - choose:
          - conditions:
            - alias: When the door is locked.
              condition: template
              value_template: '{{ is_state("lock.front_door","locked") }}'
            sequence:
            - alias: Unlock the door.
              service: lock.unlock
              target:
                entity_id: lock.front_door
              data: {}
          default:
          - alias: Lock the door.
            service: lock.lock
            target:
              entity_id: lock.front_door
            data: {}
          alias: Toggle the front door lock.
      - conditions:
        - alias: 'Power button: quadruple click.'
          condition: template
          value_template: '{{ click_count == 4 }}'
        sequence:
        - service: input_boolean.toggle
          target:
            entity_id: input_boolean.guest_mode
          data: {}
          alias: Toggle guest mode.
      alias: Take action for that matches the number of clicks.
    alias: 'Power button (middle). .......... Note: no hold event is available for
      this button.'
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ command == "brightness_up_click" }}'
        alias: When brightness up is pressed.
      sequence:
      - alias: Take action for that matches the number of clicks.
        choose:
        - alias: 'Brightness up: single click.'
          conditions:
          - condition: template
            value_template: '{{ click_count == 1 }}'
            alias: Single click.
          sequence:
          - service: light.turn_on
            target:
              entity_id: light.family_room
            data:
              brightness_pct: 100
        - alias: 'Brightness up: double click.'
          conditions:
          - condition: template
            value_template: '{{ click_count == 2 }}'
            alias: Double click.
          sequence:
          - service: light.turn_on
            target:
              entity_id: light.family_room_table_lamp
            data:
              brightness_pct: 100
    - alias: 'Brightness up: hold.'
      conditions:
      - condition: template
        value_template: '{{ command == "brightness_up_hold" }}'
        alias: When brightness up is held.
      sequence:
      - service: light.turn_on
        target:
          entity_id:
          - light.family_room
          - light.family_room_table_lamp
        data:
          brightness_step_pct: 20
    alias: Brightness up (top).
  - alias: Brightness down (bottom).
    choose:
    - alias: Brightness down clicks.
      conditions:
      - condition: template
        value_template: '{{ command == "brightness_down_click" }}'
        alias: When brightness down is pressed.
      sequence:
      - alias: Take action for that matches the number of clicks.
        choose:
        - alias: 'Brightness down: single click.'
          conditions:
          - condition: template
            value_template: '{{ click_count == 1 }}'
            alias: Single click.
          sequence:
          - service: light.turn_off
            target:
              entity_id: light.family_room
            data: {}
        - alias: 'Brightness down: double click.'
          conditions:
          - condition: template
            value_template: '{{ click_count == 2 }}'
            alias: Double click.
          sequence:
          - service: light.turn_off
            target:
              entity_id: light.family_room_table_lamp
            data: {}
    - alias: 'Brightness down: hold.'
      conditions:
      - condition: template
        value_template: '{{ command == "brightness_down_hold" }}'
        alias: When brightness down is held.
      sequence:
      - service: light.turn_on
        target:
          entity_id:
          - light.family_room
          - light.family_room_table_lamp
        data:
          brightness_step_pct: -20
        enabled: true
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ command == "arrow_right_click" }}'
        alias: When Arrow right is pressed.
      sequence:
      - service: light.turn_on
        target:
          entity_id: light.family_room_floor_lamp
        data:
          brightness_pct: 100
    - alias: 'Arrow right: hold.'
      conditions:
      - condition: template
        value_template: '{{ command == "arrow_right_hold" }}'
        alias: When Arrow right is held.
      sequence:
      - service: light.turn_on
        target:
          entity_id: light.family_room_floor_lamp
        data:
          brightness_step_pct: '20'
    alias: Arrow right.
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ command == "arrow_left_click" }}'
        alias: When Arrow left is pressed.
      sequence:
      - service: light.turn_off
        target:
          entity_id: light.family_room_floor_lamp
        data: {}
    - alias: 'Arrow left: hold.'
      conditions:
      - condition: template
        value_template: '{{ command == "arrow_left_hold" }}'
        alias: When Arrow left is held.
      sequence:
      - service: light.turn_on
        target:
          entity_id: light.family_room_floor_lamp
        data:
          brightness_step_pct: '-20'
    alias: Arrow left.
  icon: mdi:remote-tv
say_cloud:
  alias: Say cloud
  sequence:
  - variables:
      media_player: '{{ media_player|default("media_player.google_kitchen") }}'
      message: '{{ message|striptags }}'
      mqtt_message_attributes: "{\n  \"target\": \"{{ media_player }}\"\n}\n"
      volume: "{%- if volume is number %}\n  {%- if volume|float(default=0) > 1.0
        %}\n    {%- set volume = volume|float(default=0) / 100 %}\n  {%- else %}\n
        \   {%- set volume = volume|float(default=0) %}\n  {%- endif %}\n{%- else
        %}\n  {{ states(\"input_number.default_announcement_volume\")|int(default=0)
        / 100 }}\n{%- endif %}\n"
  - service: script.debug
    enabled: false
    data:
      message: 'media_player: "{{ media_player }}"

        volume: {{ volume }}

        '
  - alias: Only speak when there is something to say. ;)
    if:
    - condition: template
      value_template: '{{ message is not undefined }}'
      alias: When message is set.
    then:
    - alias: Set volume so announcement can be heard.
      service: media_player.volume_set
      target:
        entity_id: '{{ media_player }}'
      data:
        volume_level: '{{ volume }}'
    - delay:
        seconds: 2
      enabled: false
    - alias: Say the message out loud.
      service: tts.cloud_say
      data:
        entity_id: '{{ media_player }}'
        message: '{{ message }}'
        language: en-US
        options:
          gender: female
    - service: script.notify_web
      data:
        message: '{{ message }}'
        duration: 10
    - alias: Store Last Message.
      service: script.store_mqtt_sensor
      data:
        name: last_message
        state: '{{ message }}'
        attributes: '{{ mqtt_message_attributes }}

          '
    - wait_for_trigger:
      - platform: template
        value_template: '{{ states(media_player) == "idle" }}'
        alias: Wait for the display to be "idle".
      continue_on_timeout: false
      alias: Wait for the media players to be "idle".
    - service: media_player.turn_off
      target:
        entity_id: '{{ media_player }}'
      alias: Turn off the media players.
  mode: parallel
  fields:
    message:
      description: Include details here.
      example: The laundry is ready to be moved to the dryer.
      required: true
      selector:
        text:
          multiline: true
    media_player:
      description: Media Player entity_id.
      example: media_player.google_kitchen
      default: media_player.google_family_room
      selector:
        text:
    volume:
      description: Volume level as a percentage (or a decimal from 0 - 1.0)
      example: 60
      selector:
        number:
          min: 0
          max: 100
  max: 10
  icon: mdi:cloud-circle
repeat_last_message:
  alias: Repeat last message
  sequence:
  - alias: Say the previous message on the last Google speaker that was spoken to.
      Bypass `script.say_cloud` to avoid storing the last message again.
    service: tts.cloud_say
    data:
      entity_id: '{{ states("sensor.last_google") }}'
      message: This message is from {{ relative_time(states.sensor.last_message.last_updated)
        }} ago. {{ states("sensor.last_message") }}
      language: en-US
      options:
        gender: female
  mode: parallel
  icon: mdi:cast-audio
  max: 10
tts_phrase_say:
  alias: TTS phrase say
  sequence:
  - variables:
      media_player: '{{ media_player if media_player is defined else states("input_select.tts_phrase_room")
        }}'
      room: '{{ media_player|lower|replace(" ","_")|replace("[","")|replace("]","")
        }}'
      smart_speakers:
        bedroom: media_player.google_bedroom
        kyles_room: media_player.google_kyles_room
        kyle_morning: media_player.google_kyle_morning
        lucas_room: media_player.google_lucas_room
        lucas_morning: media_player.google_lucas_morning
        lucas_sleep: media_player.google_lucas_sleep
        boys_rooms: media_player.google_boys_rooms
        downstairs: media_player.google_downstairs
        kitchen-garage: media_player.google_welcome
        kitchen: media_player.google_kitchen
        family_room: media_player.google_family_room
        garage: media_player.google_garage
        play_room: media_player.google_play_room
        upstairs: media_player.google_upstairs
        upstairs_bathroom: media_player.google_upstairs_bathroom
      smart_speaker: '{{ smart_speakers[room] }}'
      selected_phrase: "{%- set selection = states(\"input_select.tts_phrases\")|trim
        %}\n{%- if selection not in [\"Unknown\",\"None\",\"\"] %}\n  {{ selection
        }}\n{%- endif %}\n"
      text_phrase: '{%- set text_phrase = states("input_text.tts_phrase")|trim %}

        {{ text_phrase if text_phrase not in ["Unknown","None",""] }}

        '
      message: "{%- if text_phrase|trim != \"\" %}\n  {{ text_phrase }}\n{%- elif
        selected_phrase|trim != \"\" %}\n  {{ selected_phrase }}\n{%- endif %}\n"
  - service: script.debug
    enabled: false
    data:
      message: 'media_player: {{ media_player }}

        room: {{ room }}


        selected_phrase: {{ selected_phrase }}

        text_phrase: {{ text_phrase }}

        message: {{ message }}

        '
  - if:
    - condition: template
      value_template: '{{ message|trim != "" }}'
      alias: When a message is set.
    then:
    - service: script.say_cloud
      data:
        media_player: '{{ smart_speaker }}'
        message: '{{ message }}'
    alias: Speak when a message is set.
  mode: single
  icon: mdi:cast-audio-variant
say:
  alias: Say
  sequence:
  - variables:
      media_player: '{{ media_player|default("media_player.google_kitchen") }}'
    alias: Set a default media player.
  - variables:
      message: "{%- macro goodbye_line() -%}\n  {{ [\n    \"Adios! \",\n    \"Bye
        Guys! \",\n    \"See ya! \" ,\n    \"See you later. \",\n    \"Until next
        time!\",\n    \"How lucky I am to have something that makes saying Goodbye
        so hard. \",\n    \"Good friends never say goodbye, they simply say, see you
        soon! \",\n    \"See you later alligator! \",\n    \"Stay out of trouble.
        \",\n    \"I am out of here. Oh, I'm stuck here, are-nt I?\",\n    \"Okay...bye,
        fry guy! \",\n    \"If I don’t see you around, I'll see you square. \",\n
        \   \"Stay classy. \",\n    \"Fare thee well. \",\n    \"Catch you on the
        rebound. \",\n    \"Gotta go, buffalo. \",\n    \"Peace out! \",\n    \"Gotta
        hit the road. \",\n    \"Live long and prosper!\",\n    \"Well, I guess your
        off! I've got things to do too. \",\n    \"Bye bye, butterfly. \",\n    \"Out
        to the door, dinosaur. \",\n    \"Catch you on the flip side. \",\n    \"See
        you soon, racoon. \",\n    \"You're still here? It's over. Go home. Go! \",\n
        \   \"Don't get run over! \",\n    \"Have a good one. \",\n    \"It was nice
        to see you again. \",\n    \"Later, haters. \",\n    \"Give a hug, ladybug.
        \",\n    \"Compute you later! \",\n    \"See you on the other side. \",\n
        \   \"Have fun storming the castle! \",\n    \"Ah-dieu, cockatoo! \",\n    \"Blow
        a kiss, goldfish. \",\n    \"It's been a pleasure and a privilege to meet
        you. \",\n    \"Be good and don't get caught. \",\n    \"Thank you for your
        cooperation. Farewell. \",\n    \"I look forward to our next meeting. \",\n
        \   \"Are you gonna make like a bakery truck? and haul buh-uns. \",\n    \"Chop
        chop, lollipop! \",\n    \"Gotta roll! \",\n    \"Hello. Oh and in case I
        don't see you, good afternoon good evening and good night! \",\n    \"Don't
        forget to come back! \",\n    \"Once more unto the breach, dear friends! \",\n
        \   \"See yuh, wouldn't wanna be yuh. \",\n    \"Peace out, girl scout! \",\n
        \   \"Adios, hippos. \",\n    \"Time to scoot, little newt. \",\n    \"Smell
        ya later! \",\n    \"Happy trails! \",\n    \"Cheerio! \",\n    \"Bye for
        now. \",\n    \"Tootle-loo, kangaroo. \",\n    \"Love, peace, and chicken
        grease. \",\n    \"I'm off like a dirty shirt. \",\n    \"See you when I see
        you. \",\n    \"Catch ya later, future dudes! \",\n    \"Cya. (Clearly, this
        is just short for ‘see you,’ which makes no sense because you utter ‘cya’
        and not write it. Oh, whatever!) \",\n    \"As you wish, jellyfish! \",\n
        \   \"Later, skater! \",\n    \"May the force be with you... always. \",\n
        \   \"Shine on, you crazy diamonds. \",\n    \"Don't let the door hit ya where
        the good lord split ya. \",\n    \"Better shake, rattlesnake! \",\n    \"Later,
        potato! \",\n    \"Don't forget to be awesome. \",\n    \"Later nerds! \",\n
        \   \"Stay cool, my dude. \",\n    \"Don't get cut by a blade of grass! \",\n
        \   \"Be sweet, parakeet. \",\n    \"Be careful! Don't get mauled by a squirrel!
        \",\n    \"Don't trip on a raindrop! \",\n    \"See you soon, baboon! \",\n
        \   \"Bye! I tolerate you! \",\n    \"Gotta go, the power of the shower compels
        me. \",\n    \"Are you late for your bus, snuffle-up-ahgus? \",\n    \"Move
        out, brussels sprout! \",\n    \"Make sure the doormat says goodbye! \",\n
        \   \"I’ll show you to the door! \",\n    \"Ciao ciao, brown cow! \",\n    \"Forget
        you guys, I'm going home! \",\n    \"See you, space cowboy. \"\n    \"Take
        it easy, greasy. You've got a long way to slide. \",\n    \"Toodaloo, caribou!
        \",\n    \"Adios, amigos. \",\n    \"Why don't you make like a tree, and leave!
        \"\n    \"Why don't you make like a tree, and get outta here! \",\n    \"That's
        all folks. \",\n    \"Take care, polar bear! \",\n    \"Peace out, rainbow
        trout! \",\n    \"Your outta here like spit through a trumpet. \",\n    \"Au
        revoir! \",\n    \"See you in the future. \",\n    \"Be gone! \",\n    \"So
        long, sucker! \",\n    \"Hasta lasagna, don't get any on ya. \",\n    \"Sayonara,
        muchachos! \",\n    \"Next time, bring more cookies. \",\n    \"Party easy,
        drive safe, and return with a smile on your face. \",\n    \"After two, kangaroo!
        \",\n    \"After three, chimpanzee! \",\n    \"After four, dinosaur. \",\n
        \   \"Goodbye forever. \",\n    \"Never look back! \",\n    \"See you on the
        internet! \",\n    \"Forever and forever farewell. If we do meet again, we'll
        smile indeed. If not, 'tis true parting was well made. \",\n    \"See you
        at the restaurant at the edge of the universe! \"\n  ]|random }}\n{%- endmacro
        -%}\n{%- macro goodnight_line() -%}\n  {{ [\n    \"Goodnight, talk to you
        tomorrow. \",\n    \"Goodnight sweetheart. \",\n    \"Go to bed, you sleepy
        head! \",\n    \"Nighty Night. \",\n    \"Sleep snug as a bug in a rug! \",\n
        \   \"Lights out! Uh huh. Dance, dance dance. \",\n    \"Time to ride the
        rainbow to dreamland! \",\n    \"Sweet dreams. \",\n    \"See ya' in the mornin'!
        \",\n    \"I-ill be right here when you wake up. moo ahh .. ha .. ha \",\n
        \   \"I-ill be dreaming of your face! \",\n    \"You're the most wonderful
        user in the whole world! \",\n    \"I'm yours, forever and always. \",\n    \"Parting
        is such sweet sorrow, that I shall say good night till it be tomorrow. \",\n
        \   \"Can you hear that? Its your soft warm bed calling your name. You really
        must go and see what it wants. \",\n    \"Grumpy cat says goodnight.\",\n
        \   \"Goodnight, sweet dreams. \",\n    \"You have so much to be greatful
        for... goodnight.\",\n    \"Wishing you a goodnight and sweetest dreams.\",\n
        \   \"What about good night kisses? \"\n  ]|random }}\n{%- endmacro -%}\n{%-
        macro greeting_line() %}\n  {%- if now().hour < 10  %}\n    Good morning.\n
        \ {%- elif now().hour < 17 %}\n    Good afternoon.\n  {%- else %}\n    Good
        evening.\n  {%- endif %}\n{%- endmacro %}\n{%- macro holiday() %}\n  {% if
        states(\"sensor.holiday\") not in [\"unknown\",\"\"] %}\n    Today is {{ states(\"sensor.holiday\")
        }}.\n  {% endif %}\n{%- endmacro %}\n{%- macro inside_weather() %}\n  {%-
        set temperature = states('sensor.home_thermostat_temperature')|int(default=0)
        %}\n  {%- if temperature > 0 %}\n    Inside the house, it is {{ temperature
        }} degrees.\n  {%- endif %}\n{%- endmacro %}\n{%- macro outside_weather()
        -%}\n  {%- set conditions = {\n    \"clear-night\": \"clear night skies\",\n
        \   \"partlycoudly\": \"mostly cloudy skies\",\n    \"sunny\": \"clear skies
        and sun\"\n  } -%}\n  {%- set condition = conditions[states('weather.home')]
        %}\n  {%- set condition = iif(condition is string, condition, states('weather.home'))
        %}\n\n  {{- ['Currently', 'Right now, ']|random }} outside, it is\n  {{ state_attr('weather.home','temperature')|int(default=0)
        }} degrees fahrenheit,\n  with {{ condition }}. {{ states(\"sensor.forecast\")
        }}\n{%- endmacro -%}\n{%- macro random_pet() %}\n  {{ [\"Bailey\", \"Parker\"]
        | random }}\n{%- endmacro %}\n{%- macro welcome_home(person) %}\n  {{ [\n
        \ \"Welcome back home \" ~ person ~ \".\",\n  \"Guess who is home?   \" ~
        person ~ \" is!\",\n  person ~ \" is now in the house.\",\n  \"Welcome Home
        \" ~ person ~ \".  We have missed you.  I know \" ~ random_pet() ~ \" sure
        did.\",\n  \"Our home is now complete, Rest your head and relax your feet!
        Welcome Back \" ~ person ~ \".\",\n  \"Life is like a song, you’re back where
        you belong. Welcome home \" ~ person ~ \".\",\n  \"Hey there \" ~ person ~
        \" Welcome Home!\",\n  \"Knock Knock.   Who is There?  \" ~ person ~ \" is!\",\n
        \ \"The garage door just told me that \"   ~ person ~ \" is home.\",\n  person
        ~ \" can not hide from the system.  Welcome home.\",\n  person ~ \"!  You
        are home!\",\n  \"I know a secret! \"  ~ person ~ \" is home!\",\n  \"Hey
        \"  ~ person ~ \". Your arrival has been recorded by the Smartest house on
        the block.\",\n  \"Take note \" ~ random_pet() ~ \"!   \"  ~ person ~ \" is
        home.\",\n  \"I am sensing a disturbance in the force.  \"  ~ person ~ \"
        must be home!\",\n  \"And the house becomes a home.   Welcome back \" ~ person
        ~ \".\",\n  person ~ \" is now here.   Hash tag Welcome Home.\",\n  person
        ~ \" is now here.   Hash tag Home.\",\n  person ~ \" is now here.   Hash tag
        Smart Home.\",\n  \"Just a quick announcement. \" ~ person ~ \" has arrived!\",\n
        \ \"Pardon the interruption but \" ~ person ~ \" is home!\",\n  \"My systems
        are picking up the presence of additional humans.   \" ~ person ~ \" has been
        identified as home.\"\n  ] | random }}\n{% endmacro %}\n{%- macro get_briefing()
        %}\n  {%- if person_arriving is not undefined %}\n    {%- set say_greeting
        = true %}\n    {%- set say_inside_weather = true %}\n    {%- set say_outside_weather
        = true %}\n  {%- endif %}\n\n  {# Output starts here. #}\n  {%- if say_greeting|default(false)
        == true %}\n    {{ greeting_line() }}\n\n    {{ holiday() }}\n  {%- endif
        %}\n\n  {%- if person_arriving is not undefined %}\n    {{ welcome_home(person_arriving)
        }}\n  {%- endif %}\n\n  {{ message|default(\"\") }}\n\n  {%- if say_inside_weather|default(false)
        == true %}\n    {{ inside_weather() }}\n  {%- endif %}\n\n  {%- if say_outside_weather|default(false)
        == true %}\n    {{ outside_weather() }}\n  {%- endif %}\n\n  {%- if say_goodbye|default(false)
        == true %}\n    {{ \" \" ~ goodbye_line() }}\n  {%- endif %}\n\n  {%- if say_goodnight|default(false)
        == true %}\n    {{ \" \" ~ goodnight_line() }}\n  {%- endif -%}\n{%- endmacro
        %}\n{#- Get briefing, and strip unnecessary characters. -#} {% filter replace(\"\\n\",
        \"\")|replace(\"\\t\", \" \")|replace(\"    \", \" \")|replace(\"   \", \"
        \")|replace(\"  \", \" \")|replace(\"  \", \" \")|replace(\". .\",\". \")|replace(\",
        ,\",\", \")|trim %}\n  {{ get_briefing() }}\n{% endfilter %}\n"
    alias: Set a custom briefing message based on passed parameters.
  - if:
    - condition: and
      conditions:
      - condition: state
        entity_id: input_boolean.audio_notifications
        state: 'on'
      - condition: state
        entity_id: binary_sensor.noncritical_alert_quiet_time
        state: 'off'
      alias: When speech is enabled.
    then:
    - service: script.say_cloud
      data:
        media_player: '{{ media_player }}'
        message: '{{ message }}'
    alias: Speak message when enabled.
  mode: queued
  fields:
    media_player:
      description: Media Player entity_id or group id.
      example: media_player.google_kitchen or media_player.google_welcome
      default: media_player.google_family_room
      selector:
        text:
    message:
      description: Include details here.
      example: The laundry is ready to be moved to the dryer.
      selector:
        text:
          multiline: true
    person_arriving:
      selector:
        text:
    say_greeting:
      selector:
        boolean:
    say_inside_weather:
      selector:
        boolean:
    say_outside_weather:
      selector:
        boolean:
    say_goodbye:
      selector:
        boolean:
    say_goodnight:
      selector:
        boolean:
  max: 10
  icon: mdi:cast-audio
