- id: '1588556714529'
  alias: Maintenance at midnight
  description: Runs every night at midnight.
  trigger:
  - platform: time
    at: 00:00:00
  condition: []
  action:
  - data:
      message: Daily maintenance begins.
      type: warning
      duration: 300
    service: script.notify_web
  - service: homeassistant.turn_off
    target:
      entity_id:
      - input_boolean.guest_mode
      - input_boolean.leave_unlocked
    data: {}
  - data: {}
    service: script.holiday_sensors_update
  - data:
      keep_days: 10
      repack: true
    service: recorder.purge
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.docker_unifi
  - delay:
      hours: 0
      minutes: 0
      seconds: 15
      milliseconds: 0
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.docker_unifi
  - service: script.notify_web
    data:
      type: success
      message: Daily maintenance complete.
  mode: single
- id: '1615053055187'
  alias: 'Remote: Bedroom switch '
  description: Bedroom dimmer switch multi-click handler.
  use_blueprint:
    path: kpine/ge_double.yaml
    input:
      device: 8bef4ccfe78c1356e14212171ff1bfc7
      double_tap_on:
      - service: light.turn_on
        data:
          transition: 0
          brightness_pct: 100
        target:
          entity_id:
          - light.bedroom
          - light.bedroom_east
          - light.bedroom_table_lamp
      double_tap_off:
      - service: homeassistant.turn_off
        data: {}
        target:
          entity_id:
          - switch.sound_machine
          - climate.bedroom_thermostat
          - fan.bedroom
          - switch.sound_machine
          - light.bedroom
          - light.bedroom_table_lamp
          - light.bedroom_east
- id: '1618159056314'
  alias: Startup
  description: Actions to run at startup.
  trigger:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - service: script.notify_web
    data:
      message: Startup automation begins.
      type: warning
      duration: 120
  - service: frontend.set_theme
    data:
      name: Mushroom
  - delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  - service: script.inovelli_led_set_defaults
    data:
      entity_id: light.family_room
      color: Teal
  - service: watchman.report
    data: {}
  - service: script.notify_web
    data:
      message: Startup automation complete.
      type: success
      duration: 60
  - service: automation.turn_off
    data: {}
    target:
      entity_id: automation.startup
  mode: single
  initial_state: true
- id: '1620056955070'
  alias: 'Scheduled tasks: hourly'
  description: Tasks to run every hour.
  trigger:
  - platform: time_pattern
    hours: /1
  condition: []
  action:
  - service: script.refresh_update_sensors
  mode: single
- id: '1620532169172'
  alias: Keep startup automation off
  description: The startup automation will turn back on after an automation reload.
    So turn it right back off when it changes from "unavailable" to "on".
  trigger:
  - platform: event
    event_type: automation_reloaded
  condition:
  - condition: template
    value_template: '{%- set uptime_minutes = as_timestamp(now()) - as_timestamp(states("sensor.last_restart"))|float(default=0)
      / 60 %}

      {{ uptime_minutes > 5 }}'
  action:
  - service: automation.turn_off
    target:
      entity_id: automation.startup
  mode: single
- id: '1624556633877'
  alias: Safety alert garage door obstruction detected
  description: Alert when the garage door is unable to close due an obstruction.
  trigger:
  - platform: state
    entity_id:
    - cover.garage_door
    attribute: obstruction-detected
    to: 'true'
    for:
      hours: 0
      minutes: 1
      seconds: 0
    from: 'false'
  condition: []
  action:
  - service: script.notify_speech
    data:
      media_player: media_player.google_welcome
      message: The garage door cannot close due to an obstruction. Please help the
        garage door close safely.
  - service: script.notify_mobile
    data:
      title: Garage door obstructed
      url: /lovelace/outdoor
      message: The garage door cannot close due to an obstruction. Please help the
        garage door close safely.
      critical: true
  mode: single
- id: '1638465871838'
  alias: Maintenance before sunrise
  description: 'Runs every day 2 hours before sunrise.

    1. Reset adaptive lighting switches.

    2. Update watchman report.

    3. Ensure bedroom do not disturb is enabled.'
  trigger:
  - platform: sun
    event: sunrise
    offset: '-2:00:00'
  condition: []
  action:
  - service: switch.turn_off
    data:
      entity_id: '{{ switches }}'
  - delay:
      seconds: 5
  - service: switch.turn_on
    data:
      entity_id: '{{ switches }}'
  - service: watchman.report
    data: {}
  - if:
    - condition: state
      entity_id: switch.google_bedroom_do_not_disturb
      state: 'off'
    then:
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.google_bedroom_do_not_disturb
  mode: single
  variables:
    switches: "{% set adaptive_lighting = namespace(switches=[]) %}\n{%- for entity
      in states.switch if 'switch.adaptive_lighting_' in entity.entity_id\n      and
      entity.entity_id[25:30] not in [\"adapt\",\"sleep\"] %}\n  {%- set adaptive_lighting.switches
      = adaptive_lighting.switches + [ entity ] %}\n{%- endfor %} {{- adaptive_lighting.switches
      | map(attribute='entity_id') | list }}\n"
- id: '1638910619111'
  alias: 'Maintenace: lights off after sunrise'
  description: Turn the entry and porch lights off after sunrise.
  trigger:
  - platform: sun
    event: sunrise
    offset: +00:15:00
  action:
  - service: light.turn_off
    data:
      transition: 10
    target:
      entity_id:
      - light.home_entry
      - light.path_lights
      - light.porch
- id: '1640128623256'
  alias: 'Maintenance: lights before sunset'
  description: ''
  trigger:
  - platform: sun
    event: sunset
    offset: -00:30:00
  action:
  - service: light.turn_on
    data:
      transition: 10
    target:
      entity_id:
      - light.porch
      - light.path_lights
  - service: script.say
    data:
      media_player: media_player.google_kitchen
      message: '{{ [

        ''It is about to get dark outside. I will turn on the lights now.'',

        ''It is almost sunset.  Time to turn on the lights.'',

        ''I will switch on the outdoor lights.'',

        ''Time to turn on the front lights.''

        ]|random }}

        '
  - if:
    - condition: state
      entity_id: binary_sensor.work_day
      state: 'on'
    then:
    - service: light.turn_on
      data: {}
      target:
        entity_id:
        - light.family_room
        - light.family_room_table_lamp
    enabled: false
  mode: single
- id: '1640887750655'
  alias: Wet laundry Family room LED indicator
  description: The light will chase blue when the laundry wet alert is active.
  use_blueprint:
    path: brianhanifin/inovelli_led_notify.yaml
    input:
      trigger_entity_id: alert.wet_laundry
      on_trigger_state: 'on'
      off_trigger_state: idle
      inovelli_entity_id: light.family_room
      color: Blue
      effect: Chase
      duration: Indefinitely
- id: '1642400705340'
  alias: 'Remote: Brian bedside'
  description: ''
  use_blueprint:
    path: mozartbanging/zigbee2mqtt-aqara-opple-wxcjkg13lm-3-band-switch-all-custom-buttons.yaml
    input:
      switch: sensor.remote_brian_bedside_action
      button_1_single:
      - service: light.toggle
        data:
          transition: 0
        target:
          entity_id: light.bedroom
      button_2_single:
      - service: light.toggle
        data:
          transition: 0
        target:
          entity_id: light.bedroom_east
      button_1_double:
      - service: light.toggle
        target:
          device_id: ca15d133b0892224f12740ec003bf25c
        data:
          transition: 0
      button_2_double:
      - service: light.toggle
        data:
          transition: 0
        target:
          device_id: ca15d133b0892224f12740ec003bf25c
      button_3_single:
      - choose:
        - conditions:
          - condition: state
            entity_id: binary_sensor.bedroom_fan_power
            state: 'on'
          sequence:
          - service: fan.turn_off
            data: {}
            target:
              entity_id: fan.bedroom
        default:
        - service: fan.turn_on
          data: {}
          target:
            entity_id: fan.bedroom
      button_4_single:
      - service: switch.toggle
        target:
          device_id: 4fb4fa5e3d2742488c93b02c34bbd7e8
        data: {}
      button_6_single:
      - service: climate.turn_off
        target:
          entity_id: climate.bedroom_thermostat
        data: {}
      button_5_single:
      - choose:
        - conditions:
          - condition: state
            entity_id: climate.bedroom_thermostat
            state: cool
          sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: climate.bedroom_thermostat
            data:
              hvac_mode: fan_only
        default:
        - service: climate.set_hvac_mode
          target:
            entity_id: climate.bedroom_thermostat
          data:
            hvac_mode: cool
- id: '1642402019243'
  alias: 'Remote: Nerene bedside'
  description: ''
  use_blueprint:
    path: mozartbanging/zigbee2mqtt-aqara-opple-wxcjkg13lm-3-band-switch-all-custom-buttons.yaml
    input:
      switch: sensor.remote_nerene_bedside_action
      button_1_single:
      - service: light.toggle
        data:
          transition: 0
        target:
          entity_id: light.bedroom
      button_2_single:
      - service: light.toggle
        data:
          transition: 0
        target:
          entity_id: light.bedroom_east
      button_1_double:
      - service: light.toggle
        target:
          device_id: ca15d133b0892224f12740ec003bf25c
        data:
          transition: 0
      button_2_double:
      - service: light.toggle
        data:
          transition: 0
        target:
          device_id: ca15d133b0892224f12740ec003bf25c
      button_3_single:
      - choose:
        - conditions:
          - condition: state
            entity_id: binary_sensor.bedroom_fan_power
            state: 'on'
          sequence:
          - service: fan.turn_off
            data: {}
            target:
              entity_id: fan.bedroom
        default:
        - service: fan.turn_on
          data: {}
          target:
            entity_id: fan.bedroom
      button_4_single:
      - service: switch.toggle
        target:
          device_id: 4fb4fa5e3d2742488c93b02c34bbd7e8
        data: {}
      button_6_single:
      - service: climate.turn_off
        target:
          entity_id: climate.bedroom_thermostat
        data: {}
      button_5_single:
      - choose:
        - conditions:
          - condition: state
            entity_id: climate.bedroom_thermostat
            state: cool
          sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: climate.bedroom_thermostat
            data:
              hvac_mode: fan_only
        default:
        - service: climate.set_hvac_mode
          target:
            entity_id: climate.bedroom_thermostat
          data:
            hvac_mode: cool
- id: '1642448378521'
  alias: 'Remote: printer toggle'
  description: ''
  use_blueprint:
    path: freakshock/zigbee2mqtt-xiaomi-mijia-round-wireless-remote-switch-wxkg01lm-actions.yaml
    input:
      button_sensor: sensor.remote_printer_action
      remote_button_single_press:
      - service: switch.toggle
        target:
          device_id: b397a55fe03e4571a4cb668d7064b277
        data: {}
- id: '1642908642407'
  alias: Doorbell pushed
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.doorbell_action
    to: bell1
  condition: []
  action:
  - service: script.notify_audio
    data:
      audio_file: media-source://media_source/local/audio/jetsons-doorbell.mp3
      speakers:
      - media_player.google_family_room
      volume: 75
    alias: Play the doorbell sound in the Family room.
  - parallel:
    - service: script.notify_mobile
      data:
        who: brian
        title: Doorbell
        message: Someone pushed the doorbell.
        camera: camera.front_door
    - service: script.notify_web
      data:
        message: Someone pressed the doorbell!
        duration: 60
  - delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
    alias: Cooldown before allow another ring.
  mode: single
- id: '1643829963937'
  alias: HACS install event - update sensors
  description: ''
  trigger:
  - platform: event
    event_type: hacs/repository
    event_data:
      action: install
  condition: []
  action:
  - delay:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
  - service: homeassistant.update_entity
    data: {}
    target:
      entity_id: sensor.updates
  mode: single
- id: '1643862026593'
  alias: External IP changed
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.external_ip
  condition: []
  action:
  - service: script.notify_mobile
    data:
      who: brian
      title: IP changed
      message: 'From: {{trigger.from_state.state}}

        To: {{trigger.to_state.state}}'
  - if:
    - condition: template
      value_template: '{{ trigger.to_state.state=="unavailable"}}'
    then:
    - service: switch.turn_off
      data: {}
      target:
        entity_id: switch.docker_unifi
    - delay:
        hours: 0
        minutes: 0
        seconds: 15
        milliseconds: 0
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.docker_unifi
    else: []
  mode: single
- id: '1644783738380'
  alias: Google next timer actions
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.google_next_timer
    attribute: end_time
    id: update_end_time
  - platform: event
    event_type: timer.started
    event_data:
      entity_id: timer.google_next_timer
    id: timer_started
    enabled: true
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.google_next_timer
    id: timer_finished
  - platform: event
    event_type:
    - timer.cancelled
    - timer.paused
    event_data:
      entity_id: timer.google_next_timer
    id: timer_cancelled
  - platform: state
    entity_id: input_button.google_next_timer_cancel
    id: cancel_button_pressed
  condition: []
  action:
  - if:
    - condition: template
      value_template: '{{ state_attr("sensor.google_next_timer","end_time") == none
        }}'
    then:
    - service: timer.cancel
      data: {}
      target:
        entity_id: timer.google_next_timer
    - service: media_player.turn_off
      target:
        entity_id: media_player.google_kitchen
      data: {}
    else:
    - choose:
      - conditions:
        - condition: trigger
          id: update_end_time
        sequence:
        - service: timer.start
          target:
            entity_id: timer.google_next_timer
          data:
            duration: '{%- set now = now()|as_timestamp %}

              {%- set end_time = state_attr("sensor.google_next_timer","end_time")|as_timestamp
              %}

              {%- set seconds_until_end = end_time - now %}

              {{ seconds_until_end }}

              '
        - delay:
            seconds: 5
        - service: script.cast
          continue_on_error: true
          data:
            dashboard_path: dashboard-cast
            view_path: timers
            display:
            - 0aae07dda66f42e9b8a67979e34770d0
            - 7d6b52507e25e7eeba10914e56052d1c
      - conditions:
        - condition: trigger
          id: timer_started
          enabled: true
        sequence:
        - service: script.cast
          data:
            displays:
            - 7d6b52507e25e7eeba10914e56052d1c
            dashboard_path: dashboard-cast
            view_path: timers
      - conditions:
        - condition: trigger
          id: timer_finished
        sequence:
        - service: script.notify_speech
          data:
            media_player: media_player.google_kitchen
            message: Your {{ state_attr("sensor.google_next_timer", "label") }} just
              ended.
        - service: script.notify_web
          data:
            type: alert
            title: '{{ state_attr("sensor.google_next_timer", "label") }} has ended'
            message: '{%- set end_time = state_attr("sensor.google_next_timer","end_time")|default(now())|as_datetime
              %}

              **{{ state_attr("sensor.google_next_timer", "label") }}** {{ " ended
              at " ~

              "{:1}:{:02}:{:02}".format(end_time.hour, end_time.minute, end_time.second)
              }}

              '
        - service: script.cast
          continue_on_error: true
          data:
            dashboard_path: dashboard-cast
            view_path: timers
            dismiss_after: 120
            display:
            - 0aae07dda66f42e9b8a67979e34770d0
            - 7d6b52507e25e7eeba10914e56052d1c
      - conditions:
        - condition: or
          conditions:
          - condition: trigger
            id: cancel_button_pressed
          - condition: trigger
            id: timer_cancelled
        sequence:
        - service: google_home.delete_timer
          data:
            entity_id: '{{ state_attr("sensor.google_next_timer","active_sensor")
              }}'
            timer_id: '{{ state_attr("sensor.google_next_timer","id") }}'
        - service: timer.cancel
          target:
            entity_id: timer.google_next_timer
          data: {}
        - service: script.notify_web
          data:
            message: Timer stopped
      default: []
  mode: single
- id: '1654047415255'
  alias: Wireless access point restart
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.alert_wirelessap2_offline
    to: 'on'
    alias: 'Wireless Access Point #2 stays offline'
    for:
      hours: 0
      minutes: 0
      seconds: 0
  condition: []
  action:
  - type: turn_off
    device_id: bc23d534656122cd2d15fcbaf69c2dbd
    entity_id: switch.wirelessap2_power_cycler
    domain: switch
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.docker_unifi
  - delay:
      hours: 0
      minutes: 0
      seconds: 15
      milliseconds: 0
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.docker_unifi
  - delay:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
  mode: single
- id: '1654483867439'
  alias: Vacuum update status periodically
  description: ''
  trigger:
  - platform: time_pattern
    hours: /3
    minutes: '0'
  condition:
  - condition: device
    device_id: 8532ec8c935bfb73fc9438d6a98033cb
    domain: vacuum
    entity_id: vacuum.family_room
    type: is_docked
  - condition: device
    device_id: 05429a8986c6f325628f5d664519825e
    domain: vacuum
    entity_id: vacuum.play_room
    type: is_docked
  action:
  - service: script.vacuum_update
    data:
      vacuum:
      - vacuum.family_room
      - vacuum.play_room
  mode: single
- id: '1654484047176'
  alias: Vacuum update status while not docked
  description: ''
  trigger:
  - platform: event
    event_type: call_service
    id: family_room
    event_data:
      domain: vacuum
      service: start
      service_data:
        entity_id: vacuum.family_room
  - platform: event
    event_type: call_service
    id: play_room
    event_data:
      domain: vacuum
      service: start
      service_data:
        entity_id: vacuum.play_room
  condition: []
  action:
  - service: script.vacuum_update
    data: {}
  - wait_for_trigger:
    - platform: event
      event_type: state_changed
      event_data:
        entity_id: vacuum.family_room
    - platform: event
      event_type: state_changed
      event_data:
        entity_id: vacuum.play_room
    timeout:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  - if:
    - condition: trigger
      id: family_room
    then:
    - repeat:
        until:
        - condition: device
          device_id: 8532ec8c935bfb73fc9438d6a98033cb
          domain: vacuum
          entity_id: vacuum.family_room
          type: is_docked
        sequence:
        - delay:
            hours: 0
            minutes: 2
            seconds: 30
            milliseconds: 0
        - service: script.vacuum_update
          data:
            vacuum:
            - vacuum.family_room
  - if:
    - condition: trigger
      id: play_room
    then:
    - repeat:
        until:
        - condition: device
          device_id: 05429a8986c6f325628f5d664519825e
          domain: vacuum
          entity_id: vacuum.play_room
          type: is_docked
        sequence:
        - delay:
            hours: 0
            minutes: 2
            seconds: 30
            milliseconds: 0
        - service: script.vacuum_update
          data:
            vacuum:
            - vacuum.play_room
  mode: parallel
  max: 2
- id: '1654547714136'
  alias: Vacuum refresh until charged
  description: 'Refresh state when docked until 100% charged.

    '
  trigger:
  - platform: device
    device_id: 8532ec8c935bfb73fc9438d6a98033cb
    domain: vacuum
    entity_id: vacuum.family_room
    type: docked
    id: family_room
  - platform: device
    device_id: 05429a8986c6f325628f5d664519825e
    domain: vacuum
    entity_id: vacuum.play_room
    type: docked
    id: play_room
  condition: []
  action:
  - if:
    - condition: trigger
      id: family_room
    then:
    - repeat:
        until:
        - condition: numeric_state
          entity_id: vacuum.family_room
          attribute: battery_level
          above: '99'
        sequence:
        - delay:
            hours: 0
            minutes: 10
            seconds: 0
            milliseconds: 0
        - service: script.vacuum_update
          data:
            vacuum:
            - vacuum.family_room
  - if:
    - condition: trigger
      id: play_room
    then:
    - repeat:
        until:
        - condition: numeric_state
          entity_id: vacuum.play_room
          attribute: battery_level
          above: '99'
        sequence:
        - delay:
            hours: 0
            minutes: 10
            seconds: 0
            milliseconds: 0
        - service: script.vacuum_update
          data:
            vacuum:
            - vacuum.play_room
  mode: single
- id: '1655258894395'
  alias: Update day off + work day modified sensors
  description: ''
  trigger:
  - id: calendar
    platform: calendar
    entity_id: calendar.nerene
    event: start
  - platform: homeassistant
    event: start
    id: restart
    enabled: true
  - id: end_of_day
    platform: time
    at: '23:59:00'
  - platform: time
    at: 00:01:00
    id: start_of_day
  condition: []
  action:
  - if:
    - condition: or
      conditions:
      - condition: trigger
        id: calendar
      - condition: trigger
        id: start_of_day
      - condition: trigger
        id: restart
    then:
    - service: script.store_mqtt_sensor
      data:
        name: nerene_events_today
        state: "{%- set today = now()|as_timestamp %} {%- set event_date = state_attr(\"calendar.nerene\",\"start_time\")|as_timestamp
          %} {%- if today >= event_date %}\n  {%- set events = state_attr(\"binary_sensor.days_off\",\"events_today\")|trim
          %}\n  {%- set events = events ~ \",\" if events not in [\"\",\"None\"] %}\n
          \ {{ events ~ state_attr(\"calendar.nerene\",\"message\") }}\n{%- else %}\n
          \ {%- set events_today = state_attr(\"binary_sensor.days_off\",\"events_today\")
          %}\n  {{ iif(events_today is not none, events_today, \"\") }}\n{%- endif
          %}\n"
    else: []
  - if:
    - condition: trigger
      id: end_of_day
    then:
    - service: script.store_mqtt_sensor
      data:
        name: nerene_events_today
        state: ''
    - delay:
        hours: 0
        minutes: 0
        seconds: 0
        milliseconds: 0
  - service: homeassistant.update_entity
    data: {}
    target:
      entity_id:
      - binary_sensor.day_off
      - binary_sensor.work_day_modified
      - binary_sensor.work_day
  mode: queued
  max: 10
- id: '1662393782118'
  alias: 'Remote: family room switch'
  description: Family room dimmer switch multi-click handler.
  use_blueprint:
    path: brianhanifin/zwave_js_inovelli_lzw31_sn_red_series_dimmer.yaml
    input:
      inovelli_switch: 2d8b03f66fda68a6e0f7b2a506a33b02
      config_button:
      - service: homeassistant.turn_off
        data: {}
        target:
          area_id: family_room
      button_a2:
      - service: light.turn_on
        data:
          brightness_pct: 100
        target:
          area_id:
          - family_room
      button_b:
      - service: light.turn_off
        data: {}
        target:
          area_id: family_room
      button_b2:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.family_room_floor_lamp
      button_a3:
      - service: fan.turn_on
        data: {}
        target:
          entity_id: fan.family_room
      button_b3:
      - service: fan.turn_off
        data: {}
        target:
          entity_id: fan.family_room
      button_a4:
      - service: light.turn_on
        data:
          brightness_pct: 100
        target:
          area_id:
          - family_room
          - kitchen
          - dining_room
          - outside
          entity_id:
          - light.home_entry
      button_b4:
      - service: light.turn_off
        data: {}
        target:
          area_id:
          - family_room
          - kitchen
          - dining_room
          entity_id: light.home_entry
      button_a5:
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.guest_mode
      button_b5:
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id: input_boolean.guest_mode
- id: '1664133526340'
  alias: 'Remote: Nerene wakeup button'
  description: Sets wakeup light to turn on in 8 hours. Each subsequent push adds
    one hour to the timer.
  use_blueprint:
    path: freakshock/zigbee2mqtt-xiaomi-mijia-round-wireless-remote-switch-wxkg01lm-actions.yaml
    input:
      button_sensor: sensor.remote_nerene_wakeup_action
      remote_button_single_press:
      - if:
        - condition: not
          conditions:
          - condition: state
            entity_id: timer.nerene_wakeup_light
            state: active
          alias: If the timer is not active
        then:
        - service: timer.cancel
          data: {}
          target:
            entity_id: timer.nerene_wakeup_light
          alias: Reset the timer
        - service: timer.start
          data:
            duration: '8:00:00'
          target:
            entity_id: timer.nerene_wakeup_light
          alias: Start wakeup light countdown
        else:
        - service: timer.pause
          data: {}
          target:
            entity_id: timer.nerene_wakeup_light
          alias: Pause the timer
        - service: timer.start
          data:
            duration: '{%- set time = state_attr("timer.nerene_wakeup_light", "remaining").split(":")
              %} {%- set hours_remaining = time[0]|int %} {%- set new_time = (hours_remaining+1)
              ~":"~ time[1] ~":"~ time[2] %} {{ new_time }}

              '
          target:
            entity_id: timer.nerene_wakeup_light
          alias: Continue timer with added hour
      remote_button_long_press:
      - service: timer.cancel
        data: {}
        target:
          entity_id: timer.nerene_wakeup_light
        alias: Cancel wakeup light
- id: '1664135234650'
  alias: Nerene wakeup timer complete
  description: ''
  trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.nerene_wakeup_light
  condition: []
  action:
  - service: script.event_wakeup_nerene
    data: {}
    alias: Call script.event_wakeup_nerene
  mode: single
- id: '1664912203010'
  alias: Open/close house thermostat (a/c) change
  description: Actions to take when the alert has been cleared.
  trigger:
  - id: windows_open
    platform: state
    entity_id: binary_sensor.house_windows
    from: 'off'
    to: 'on'
    for:
      seconds: 30
    alias: When the windows stay open.
  - id: sliding_door_open
    platform: state
    entity_id: binary_sensor.sliding_door
    from: 'off'
    to: 'on'
    for:
      minutes: 1
    alias: When the sliding door stays open.
  - platform: state
    entity_id:
    - binary_sensor.house_windows
    from: 'on'
    to: 'off'
    id: windows_closed
    alias: When the windows close.
  - platform: state
    entity_id:
    - binary_sensor.sliding_door
    from: 'on'
    to: 'off'
    id: door_closed
    alias: When the sliding door closes.
  condition: []
  action:
  - if:
    - condition: or
      conditions:
      - condition: trigger
        id: windows_open
      - condition: trigger
        id: sliding_door_open
      alias: When the windows or sliding door have been opened.
    then:
    - service: climate.turn_off
      data: {}
      target:
        entity_id: climate.home_thermostat
    alias: Turn off the thermostat when the house is left open.
  - if:
    - condition: and
      conditions:
      - condition: template
        value_template: "{{\n  trigger.id in [\"windows_closed\",\"door_closed\"]\n
          \ and is_state(\"binary_sensor.house_windows\",\"off\")\n  and is_state(\"binary_sensor.sliding_door\",\"off\")\n}}"
        alias: When the house has just been closed.
      - condition: template
        value_template: '{{ is_state("climate.home_thermostat","off") }}'
        alias: Thermostat is off
      alias: When the house is closed and the thermostat is off.
    then:
    - service: climate.set_hvac_mode
      data:
        hvac_mode: cool
      target:
        entity_id: climate.home_thermostat
    else: []
    alias: Turn on the thermostat when the house when closed
  mode: single
- id: '1664913334700'
  alias: Away mode
  description: ''
  trigger:
  - id: to_on
    platform: state
    entity_id: input_boolean.away_mode
    from: 'off'
    to: 'on'
    alias: Away mode on
  - id: to_off
    platform: state
    entity_id: input_boolean.away_mode
    from: 'on'
    to: 'off'
    alias: Away mode off
    enabled: false
  condition: []
  action:
  - if:
    - condition: trigger
      id: to_on
    then:
    - if:
      - condition: device
        device_id: 251811656468e59987a59a49a5018a8e
        domain: cover
        entity_id: cover.garage_door
        type: is_open
      then:
      - service: cover.close_cover
        entity_id: cover.garage_door
      alias: Close an open garage door.
    - if:
      - condition: device
        device_id: f6a7f9561a7a8b48602809e1789385f4
        domain: lock
        entity_id: lock.front_door
        type: is_unlocked
      then:
      - service: lock.lock
        data: {}
        target:
          device_id: f6a7f9561a7a8b48602809e1789385f4
        alias: Lock front door
      alias: Lock an unlocked front door.
    - if:
      - condition: not
        conditions:
        - condition: device
          device_id: 90294c771af3341b24b8836b59e002ad
          domain: climate
          entity_id: climate.bedroom_thermostat
          type: is_hvac_mode
          hvac_mode: 'off'
          alias: Is the bedroom A/C off?
        alias: Bedroom A/C is running
      then:
      - device_id: 90294c771af3341b24b8836b59e002ad
        domain: climate
        entity_id: climate.bedroom_thermostat
        type: set_hvac_mode
        hvac_mode: 'off'
        alias: Turn off Bedroom A/C
      alias: Turn off a running bedroom A/C
    - if:
      - condition: not
        conditions:
        - condition: device
          device_id: 877557b634269a08b5bf0439f9a314b5
          domain: climate
          entity_id: climate.lucas_room_thermostat
          type: is_hvac_mode
          hvac_mode: 'off'
          alias: Is Lucas' A/C off?
        alias: Lucas' A/C is running
      then:
      - device_id: 877557b634269a08b5bf0439f9a314b5
        domain: climate
        entity_id: climate.lucas_room_thermostat
        type: set_hvac_mode
        hvac_mode: 'off'
      alias: Turn off a running Lucas A/C
    - service: script.turn_on
      entity_id: script.shutdown_routine
      alias: Shutdown routine
    alias: When away mode is activated.
  mode: restart
- id: '1664914391038'
  alias: Leave unlocked
  description: ''
  trigger:
  - id: to_on
    platform: state
    entity_id: input_boolean.leave_unlocked
    from: 'off'
    to: 'on'
    alias: Leave unlocked turns on
  - id: to_off
    platform: state
    entity_id: input_boolean.leave_unlocked
    from: 'on'
    to: 'off'
    alias: Leave unlocked turns off
  condition: []
  action:
  - alias: Cancel the relock countdown timer.
    service: timer.cancel
    target:
      entity_id: timer.front_door_unlocked
    data: {}
  - alias: If the mode is turned on AND the door is currently unlocked
    choose:
    - conditions: '{{ trigger.id == "to_off" and is_state("lock.front_door","unlocked")
        }}'
      sequence:
      - alias: Restart the timer.
        service: timer.start
        target:
          entity_id: timer.front_door_unlocked
        data: {}
  mode: restart
- id: '1664914465831'
  alias: Guest mode
  description: ''
  trigger:
  - id: to_on
    platform: state
    entity_id: input_boolean.guest_mode
    from: 'off'
    to: 'on'
  - id: to_off
    platform: state
    entity_id: input_boolean.guest_mode
    from: 'on'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions: '{{ trigger.id == "to_on" }}'
      sequence:
      - alias: Disable the automatic front door lock.
        service: input_boolean.turn_on
        target:
          entity_id: input_boolean.leave_unlocked
        data: {}
      - alias: Disable Adaptive Lighting automated control.
        service: switch.turn_off
        data:
          entity_id: '{{ adaptive_switches }}'
      - delay:
          seconds: 2
      - alias: 'Kitchen Lights: Turn On'
        service: switch.turn_on
        target:
          area_id:
          - kitchen
        data: {}
      - alias: 'Dining + Family room Lights: Turn On'
        service: light.turn_on
        data:
          entity_id: '{{ lights_on }}'
          brightness: 255
          kelvin: 4000
        target:
          area_id:
          - dining_room
          - family_room
    default:
    - alias: Restore the automatic front door lock.
      service: input_boolean.turn_off
      target:
        entity_id: input_boolean.leave_unlocked
      data: {}
    - alias: Kitchen lights to turn off
      service: switch.turn_off
      target:
        area_id:
        - kitchen
      data: {}
    - alias: Dining + Family room lights to turn off
      service: light.turn_off
      target:
        entity_id: light.family_room_floor_lamp
        area_id:
        - dining_room
      data: {}
    - delay:
        seconds: 2
    - alias: Restore Adaptive Lighting automated control.
      service: switch.turn_on
      data:
        entity_id: '{{ adaptive_switches }}'
  - service: script.say
    data:
      message: '{{ speech }}'
  mode: restart
  variables:
    adaptive_switches: "{% set adaptive_lighting = namespace(switches=[]) %}\n{%-
      for entity in states.switch if 'switch.adaptive_lighting_' in entity.entity_id\n
      \     and entity.entity_id[25:30] not in [\"adapt\",\"sleep\"] %}\n  {%- set
      adaptive_lighting.switches = adaptive_lighting.switches + [ entity ] %}\n{%-
      endfor %}\n{{- adaptive_lighting.switches | map(attribute='entity_id') | list
      }}\n"
    lights_on: '{% set group_id= ''group.guest_mode_lights'' %}

      {%- set lights_on = expand(group_id) | selectattr(''entity_id'',''in'',state_attr(group_id,''entity_id''))
      | selectattr(''state'',''eq'',''on'') | map(attribute=''entity_id'') | list
      %}

      {{- "none" if lights_on|count==0 else lights_on }}

      '
    speech: "{%- if trigger.id == \"to_on\" %}\n  {{ [\n    \"Guest Mode has been
      enabled for the rest of the day.\",\n    \"Switching to guest mode! \",\n    \"I
      have enabled guest mode for the rest of the day. \",\n    \"System Guest Mode
      has been enabled.\",\n    \"Guest mode enabled.\",\n    \"Awesome! I will take
      the rest of the day off.  Guest mode has been enabled.\",\n    \"Guest Mode
      enabled.  In other words, Manual Mode engaged.\",\n    \"Guest mode enabled.
      \ Have Fun!\",\n    \"Family, Friends and Fun.  Guest mode has been enabled
      today.\",\n    \"Guest Mode enabled.  I am still doing stuff behind the scenes
      but probably will not turn off the lights on you.\"\n  ] | random }}\n{%- else
      %}\n  {{ [\n    \"Guest Mode has been disabled.\",\n    \"Guest Mode disabled.\"\n
      \   ] | random }}\n{%- endif %}\n"
- id: '1664914665819'
  alias: Holiday colors apply
  description: Apply the light colors assigned to the current holiday.
  trigger:
  - platform: state
    entity_id:
    - light.porch
    - light.family_room_table_lamp
    from: 'off'
    to: 'on'
  condition:
  - condition: template
    value_template: '{{ states("sensor.holiday")|lower not in ['''',''unavailable'']
      }}'
  action:
  - service: script.holiday_color_change
    data: {}
  mode: single
- id: '1664914752234'
  alias: TTS phrase selected
  description: ''
  trigger:
  - platform: state
    entity_id: input_select.tts_phrases
  condition: []
  action:
  - service: script.tts_phrase_say
    data: {}
  mode: single
- id: '1664914932708'
  alias: Event template reload
  description: ''
  trigger:
  - platform: event
    event_type: event_template_reloaded
  condition: []
  action:
  - service: script.refresh_count_sensors
    data: {}
  mode: single
- id: '1664915034973'
  alias: 'Restart addon: SDR'
  description: Restart the SDR addon when a sensor temperature goes unavailable.
  trigger:
  - platform: state
    entity_id:
    - sensor.backyard_temperature
    - sensor.fridge_temperature
    - sensor.garage_fridge_temperature
    to: unavailable
    for:
      minutes: 5
  condition: []
  action:
  - alias: Check again, and restart the addon to resolve the MQTT connection failure?
    choose:
    - conditions: '{{ is_state(''sensor.backyard_temperature'',''unavailable'') or
        is_state(''sensor.fridge_temperature'',''unavailable'') or is_state(''sensor.garage_fridge_temperature'',''unavailable'')
        }}'
      sequence:
      - service: hassio.addon_restart
        data:
          addon: d63406df_sdr2mqtt
      - service: script.notify_web
        data:
          type: warning
          title: 'Restart addon: SDR to Home Assistant [Automation]'
          message: The backyard temperature sensor has been unavailable for 5 minutes.
            An attempt has been made to restart the addon.
  mode: single
- id: '1664915086230'
  alias: Restart Unifi
  description: When a disabled PC is re-enabled restart the Unifi docker to ensure
    the change is applied.
  trigger:
  - platform: state
    entity_id:
    - switch.network_blackpc
    - switch.network_bluepc
    - switch.network_greenpc
    - switch.network_redpc
    from: 'off'
    to: 'on'
  condition: []
  action:
  - service: switch.turn_off
    target:
      entity_id: switch.docker_unifi
    data: {}
  - delay:
      seconds: 15
  - service: switch.turn_on
    target:
      entity_id: switch.docker_unifi
    data: {}
  mode: single
- id: '1664915161123'
  alias: Restart Z-wave_JS 2 mqtt
  description: ''
  trigger:
  - platform: state
    entity_id: switch.docker_zwavejs2mqtt
    from: 'on'
    to:
    for:
      minutes: 10
  condition: []
  action:
  - service: switch.turn_off
    target:
      entity_id: switch.docker_zwavejs2mqtt
    data: {}
  - delay:
      seconds: 30
  - service: switch.turn_on
    target:
      entity_id: switch.docker_zwavejs2mqtt
    data: {}
  mode: single
- id: '1664915191810'
  alias: Restart Zigbee 2 mqtt
  description: ''
  trigger:
  - platform: state
    entity_id: switch.docker_zigbee2mqtt
    from: 'on'
    to:
    for:
      minutes: 10
  condition: []
  action:
  - service: switch.turn_off
    target:
      entity_id: switch.docker_zigbee2mqtt
    data: {}
  - delay:
      seconds: 30
  - service: switch.turn_on
    target:
      entity_id: switch.docker_zigbee2mqtt
    data: {}
  mode: single
- id: '1664918803941'
  alias: 'Presence: activate/deactivate away mode'
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.family_present
    for:
      hours: 0
      minutes: 30
      seconds: 0
    enabled: true
    to: '0'
    id: away
  - platform: numeric_state
    entity_id: sensor.family_present
    above: 0
    id: home
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: away
      sequence:
      - service: notify.brian
        data:
          title: Away mode on
          message: Family present is 0.
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.away_mode
    - conditions:
      - condition: and
        conditions:
        - condition: trigger
          id: home
        - condition: state
          entity_id: input_boolean.away_mode
          state: 'on'
      sequence:
      - service: notify.brian
        data:
          title: Away mode off
          message: Family present is {{ states("sensor.family_present") }}
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id: input_boolean.away_mode
  mode: single
- id: '1664919499650'
  alias: 'Presence: family arrival'
  description: The house will welcome the family member home, after the entry the
    house via the front or garage entry doors.
  trigger:
  - platform: state
    entity_id:
    - person.brian
    - person.eric
    - person.heather
    - person.lucas
    - person.nerene
    - person.sandy
    from: not_home
    to: home
    variables:
      old_state: '{{ trigger.from_state.state }}'
      new_state: '{{ trigger.to_state.state }}'
      person: '{{ trigger.to_state.object_id }}'
      source: '{{ trigger.to_state.attributes.source }}'
    alias: When someone arrives at home
  condition:
  - condition: template
    value_template: '{{ old_state != new_state }}'
    alias: old_state != new_state
  - condition: template
    value_template: '{{ new_state != ''unknown'' }}'
    alias: new_state != 'unknown'
  - condition: template
    value_template: '{{ is_state(''automation.startup'',''off'') }}'
    alias: Don't allow status change shortly after startup to avoid phantom changes.
  - condition: and
    conditions:
    - condition: time
      before: 06:00:00
      alias: Between midnight and 6am
      after: 00:00:00
    - condition: template
      value_template: '{{ is_state_attr(source,''vlan'',''0'') }}'
      alias: 'Ignore UniFi sourced changes (vlan: 0)'
    alias: 'Ignore UniFi sourced changes (vlan: 0) overnight to help avoid false "aways"
      caused by sleepy iPhones.'
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.away_mode
    alias: Turn off away mode
  - alias: Wait for an entry door to open before making the announcement.
    wait_for_trigger:
      platform: state
      entity_id:
      - binary_sensor.front_door
      - binary_sensor.garage_entry_door
      from: 'off'
      to: 'on'
    timeout:
      minutes: '5'
    continue_on_timeout: false
    enabled: false
  - service: script.say
    data:
      media_player: media_player.google_welcome
      person_arriving: '{{ trigger.entity_id.split(''.'')[1]|title|replace(''_'',
        '' '') }}'
    alias: Welcome home announcement!
  mode: single
- id: '1664922391248'
  alias: 'Presence: leaving costco'
  description: Notify when Nerene or Brian leaves Costco.
  trigger:
  - platform: zone
    event: leave
    zone: zone.costco
    entity_id:
    - person.brian
    - person.nerene
  condition:
  - condition: time
    after: 06:00:00
    before: '21:00:00'
  action:
  - service: script.say
    data:
      media_player: media_player.google_downstairs
      message: "{% set message = [\n  \"Just a head's up, [name1] is done at Costco.\",\n
        \ \"Your [name2] is on the way home from Costco.\"\n]|random %} {% set name
        = trigger.to_state.friendly_name %} {% if ['name2'] in message %}\n  {% if
        name == \"Nerene\" %}\n    {% set name = \"mom\" %}\n  {% elif name == \"Brian\"
        %}\n    {% set name = \"dad\" %}\n  {% endif %}\n{% endif %} {{ message|replace(\"[name1]\",name)|replace(\"[name2]\",name)
        }}"
  - delay:
      minutes: 5
    alias: 'Cool down timer. When "mode: single" this stops this automation from running
      more often than this.'
  mode: single
- id: '1664922577571'
  alias: 'Presence: Nerene is almost home!'
  description: Notify when Nerene is almost home!
  trigger:
  - platform: numeric_state
    entity_id: proximity.nerene_home
    value_template: '{{ states(''proximity.nerene_home'')|float(default=0) }}'
    below: 1
    alias: When Nerene is near home
  condition:
  - condition: state
    entity_id: input_select.nerene
    state: Away
  action:
  - service: script.say
    data:
      media_player: media_player.google_downstairs
      message: "{{ [\n  \"Your mom is almost home. Be ready to give her a big hug
        after her long day! \",\n  \"One of your favorite people is almost here! Mah,
        ma, mama, mom. \",\n  \"Guess what? ... Chicken butt. ... Your mom is almost
        home. \"\n]|random }}\n"
  - delay:
      minutes: 60
    alias: Cool down timer.
  mode: single
- id: '1664922676671'
  alias: 'Presence: Nerene has left court'
  description: Notify when Nerene leaves court.
  trigger:
  - platform: zone
    event: leave
    zone: zone.court
    entity_id: person.nerene
  condition:
  - condition: time
    after: '13:00:00'
    before: '17:00:00'
  action:
  - service: script.say
    data:
      media_player: media_player.google_downstairs
      message: "{{ [\n  \"Just a head's up, Nerene is done with court.\",\n  \"Your
        mom is on her way home from court.\"\n]|random }}\n"
  mode: single
- id: '1664922848999'
  alias: 'Extended presence: location update'
  description: When someone's standard presence location updates
  trigger:
  - platform: state
    entity_id:
    - person.brian
    - person.eric
    - person.heather
    - person.lucas
    - person.nerene
    - person.sandy
    variables:
      new_state: '{{ trigger.to_state.state }}'
      old_state: '{{ trigger.from_state.state }}'
      option: "{%- if new_state == \"home\" -%}\n  Just arrived\n{%- else -%}\n  Just
        left\n{%- endif -%}\n"
      person: '{{ trigger.to_state.object_id }}'
      source: '{{ trigger.to_state.attributes.source }}'
  condition:
  - '{{ old_state != new_state }}'
  - '{{ new_state != "unknown"}}'
  - '{{ is_state("automation.startup","off") }}'
  - condition: not
    conditions:
    - '{{ now().hour < 6 and state_attr(source,"vlan") == "0" }}'
  action:
  - service: input_select.select_option
    data:
      entity_id: input_select.{{ person }}
      option: '{{ option }}'
  - service: timer.start
    data:
      entity_id: timer.xpresence_{{ person }}
      duration: 00:10:00
  mode: queued
- id: '1664923113559'
  alias: 'Extended presence: timer expired'
  description: When a timer finishes it is time to update their extended presence
    status.
  trigger:
  - platform: event
    event_type: timer.finished
    variables:
      person: '{{ trigger.event.data.entity_id[16:] }}'
      current_option: '{{ states("input_select." + person) }}

        '
  condition:
  - condition: template
    value_template: '{{ trigger.event.data.entity_id[:15] == "timer.xpresence" }}'
    alias: Continue for Extended Presence timers only.
  - condition: template
    value_template: '{{ current_option not in [none,"unknown",""] }}'
    alias: When current option is valid.
  action:
  - variables:
      next_options:
        Just arrived: Home
        Just left: Away
        Away: Extended away
      next_option: '{{ next_options[current_option] }}'
  - service: input_select.select_option
    data:
      entity_id: input_select.{{ person }}
      option: '{{ next_option }}'
    alias: Update with the status.
  - if:
    - condition: template
      value_template: '{{ next_option == "Away" }}'
      alias: Status is Away.
    then:
    - service: timer.start
      data:
        entity_id: timer.xpresence_{{ person }}
        duration: '23:59:59'
    alias: Start the timer when the status is Away.
  mode: queued
- id: '1664993172895'
  alias: Computer schedule
  description: Cut internet when the boys should be in bed, and restore the internet
    when play is allowed.
  trigger:
  - platform: state
    entity_id:
    - schedule.computer_school
    - schedule.computer_vacation
    alias: When schedule state changes
    from: 'off'
    to: 'on'
  condition: []
  action:
  - variables:
      schedule: '{{ trigger.to_state.object_id.split("_")[1]}}'
      new_state: '{{ trigger.to_state.state }}'
      middle_school_day: '{{ is_state("binary_sensor.middle_school_day","on") }}'
      middle_school_day_tomorrow: '{{ is_state("binary_sensor.middle_school_day_tomorrow","on")
        }}'
      high_school_day: '{{ is_state("binary_sensor.high_school_day","on") }}'
      high_school_day_tomorrow: '{{ is_state("binary_sensor.high_school_day_tomorrow","on")
        }}'
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ schedule == "school" }}'
        alias: Triggered by school schedule
      sequence:
      - if:
        - condition: time
          before: 08:01:00
          after: 01:01:00
          alias: Before middle school
        - condition: template
          value_template: '{{ middle_school_day }}'
          alias: Today is a middle school day.
        then:
        - service: switch.turn_{{ new_state }}
          target:
            entity_id: switch.network_bluepc
          alias: Turn on/off the network connection.
        else:
        - if:
          - condition: template
            value_template: '{{ middle_school_day_tomorrow }}'
            alias: Tomorrow is a middle school day.
          then:
          - service: switch.turn_{{ new_state }}
            target:
              entity_id: switch.network_bluepc
            alias: Turn on/off the network connection.
        alias: Middle school day
      - if:
        - condition: time
          before: 09:31:00
          after: 01:01:00
          alias: Before high school
        - condition: template
          value_template: '{{ high_school_day }}'
          alias: Today is a high school day.
        then:
        - service: switch.turn_{{ new_state }}
          target:
            entity_id:
            - switch.network_redpc
            - switch.network_greenpc
          alias: Turn on/off the network connection.
        else:
        - if:
          - condition: template
            value_template: '{{ high_school_day_tomorrow }}'
            alias: Tomorrow is a high school day.
          then:
          - service: switch.turn_{{ new_state }}
            target:
              entity_id:
              - switch.network_redpc
              - switch.network_greenpc
            alias: Turn on/off the network connection.
        alias: High school day
    - conditions:
      - condition: template
        value_template: '{{ schedule == "vacation" }}'
        alias: Triggered by vacation schedule
      sequence:
      - if:
        - condition: time
          before: 08:01:00
          after: 01:01:00
          alias: Vacation day morning
        - condition: template
          value_template: '{{ not middle_school_day }}'
          alias: Today is not a middle school day.
        then:
        - service: switch.turn_{{ new_state }}
          target:
            entity_id: switch.network_bluepc
          alias: Turn on/off the network connection.
        else:
        - if:
          - condition: template
            value_template: '{{ not middle_school_day_tomorrow }}'
            alias: Tomorrow is not a middle school day.
          then:
          - service: switch.turn_{{ new_state }}
            target:
              entity_id: switch.network_bluepc
            alias: Turn on/off the network connection.
          alias: Tomorrow is not a middle school day
        alias: Middle school vacation
      - if:
        - condition: time
          before: 09:31:00
          after: 01:01:00
          alias: Vacation day morning
        - condition: template
          value_template: '{{ not high_school_day }}'
          alias: Today is not a high school day.
        then:
        - service: switch.turn_{{ new_state }}
          target:
            entity_id:
            - switch.network_redpc
            - switch.network_greenpc
          alias: Turn on/off the network connection.
        else:
        - if:
          - condition: template
            value_template: '{{ not high_school_day_tomorrow }}'
            alias: Tomorrow is not a high school day.
          then:
          - service: switch.turn_{{ new_state }}
            target:
              entity_id:
              - switch.network_redpc
              - switch.network_greenpc
            alias: Turn on/off the network connection.
          alias: Tomorrow is not a high school day
        alias: High school vacation
    alias: Choose actions based on which schedule triggered.
  mode: single
- id: '1665190408046'
  alias: Instant pot status update
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sensor.instant_pot_power_monitor_power
    for:
      hours: 0
      minutes: 5
      seconds: 0
    above: 0
    id: 'Off'
    alias: '[Off] When power below 1 for 5 minutes.'
    below: 1
  - platform: numeric_state
    entity_id: sensor.instant_pot_power_monitor_power
    alias: '[On] Power above 100 for 30 seconds.'
    for:
      hours: 0
      minutes: 0
      seconds: 30
    id: 'On'
    above: 100
  condition:
  - condition: template
    value_template: '{{ previous_status != trigger.id }}'
  action:
  - variables:
      status_list:
        'Off': Preheat
        Preheat: Cooking
        Cooking: Warming
      previous_status: '{{ states("input_select.instant_pot_status") }}

        '
      status: '{{ iif(trigger.id=="On", status_list[previous_status], "Off") }}

        '
  - service: input_select.select_option
    target:
      entity_id: input_select.instant_pot_status
    data:
      option: '{{ status }}'
    alias: Update status.
  - if:
    - condition: state
      entity_id: input_select.instant_pot_status
      state: Keep warm
    then:
    - service: script.say
      data:
        media_player: media_player.google_downstairs
        message: The instant pot is finished cooking.
  - service: script.notify_mobile
    data:
      who: brian
      title: Instant pot status update
      message: '{{ status }}


        trigger.id: "{{ trigger.id }}"

        previous_status: "{{ previous_status }}"

        status: "{{ status }}"

        '
  mode: queued
  max: 10
- id: '1665853645675'
  alias: Light group turn off - force to stay off
  description: ''
  trigger:
  - platform: state
    entity_id:
    - light.bedroom_east
    - light.dining_room
    - light.play_room_floor_lamp
    from: 'on'
    to: 'off'
  condition: []
  action:
  - variables:
      light: '{{ trigger.entity_id }}'
      group: '{{ light | replace("light.","group.") + "_fixture" }}

        '
      bulbs: '{{ expand(group) | map(attribute="entity_id") | list }}

        '
  - service: script.turn_off
    target:
      entity_id:
      - script.light_sequence
      - script.light_sequence_color
    data: {}
    alias: Stop light sequence scripts (in case they are running).
  - alias: Turn the light group off repeatedly until it stays off.
    repeat:
      sequence:
      - delay:
          seconds: 5
      - repeat:
          count: '{{ bulbs|count }}'
          sequence:
          - service: light.turn_off
            data:
              entity_id: '{{ bulbs[repeat.index-1] }}'
            alias: Turn off each bulb.
        alias: Attempt to turn off every bulb in the fixture one at a time.
      until:
      - condition: template
        value_template: '{{ is_state(light, ''off'') }}'
        enabled: false
        alias: Until the light entity is off.
      - condition: template
        value_template: '{{ is_state(group, ''off'') }}'
        alias: Until the light group is off.
  mode: single
- id: '1665947789596'
  alias: Family room light sync
  description: Sync the state & brightness of the lights in the family room.
  trigger:
  - platform: state
    entity_id: light.family_room
  condition: []
  action:
  - if:
    - condition: and
      conditions:
      - condition: state
        entity_id: light.family_room
        state: 'on'
      - condition: numeric_state
        entity_id: light.family_room
        attribute: brightness
        above: 0
      alias: If family room is on and brightness is > 0.
    then:
    - service: light.turn_on
      data:
        brightness: '{{ state_attr("light.family_room","brightness") }}

          '
      target:
        entity_id: light.family_room_table_lamp
      alias: Turn on table lamp and match brightness.
    else:
    - service: light.turn_off
      data: {}
      target:
        area_id: family_room
  - if:
    - condition: state
      entity_id: light.family_room_floor_lamp
      state: 'on'
    then:
    - service: light.turn_on
      target:
        entity_id: light.family_room_floor_lamp
      data:
        brightness: '{{ state_attr("light.family_room","brightness") }}

          '
      alias: Match brightness of the floor lamp with the family room lamp.
    alias: Match the brightness if the floor lamp is on.
  mode: single
- id: '1665948763862'
  alias: Front door/driveway person detected
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.driveway_parking_person_occupancy
    - binary_sensor.front_yard_person_occupancy
    - binary_sensor.driveway_flood_motion
    from: 'off'
    to: 'on'
    id: driveway
    alias: When a person is detected in the driveway/front yard.
  - platform: state
    entity_id:
    - binary_sensor.front_walkway_person_occupancy
    from: 'off'
    to: 'on'
    id: front_door
    alias: When a person is detected approaching the front door.
  action:
  - variables:
      last_opened: '{{ states.binary_sensor.front_door.last_changed | as_timestamp
        }}'
      time_now: '{{ now() | as_timestamp }}'
      seconds_difference: '{{ time_now - last_opened }}'
  - alias: When door has not been opened within the past 2 minutes.
    if:
    - condition: template
      value_template: '{{ seconds_difference|round(default=0) > 120 }}'
    then:
    - if:
      - condition: and
        conditions:
        - condition: or
          conditions:
          - condition: trigger
            id: driveway
          - condition: trigger
            id: front_door
          alias: When a person is detected in the driveway or by the front door.
        - condition: numeric_state
          entity_id: sensor.outdoor_illuminance_educated_guessor
          below: 2000
          alias: Confirm Outdoor Illuminance Educated Guessor is below 2,000.
      then:
      - service: scene.create
        data:
          scene_id: driveway_front_door_presence_snapshot
          snapshot_entities:
          - light.home_entry
          - light.porch
          - select.driveway_flood_mode
          - light.driveway_flood_accent
        alias: Store current light settings.
      - service: select.select_option
        data:
          option: Manual
        target:
          entity_id: select.driveway_flood_mode
        alias: Take manual control of the driveway flood light.
      - parallel:
        - service: light.turn_on
          data:
            brightness: 255
          target:
            entity_id:
            - light.driveway_flood
            - light.driveway_flood_accent
          alias: Turn driveway flood light on.
        - service: light.turn_on
          data:
            brightness: 255
            kelvin: 3500
          target:
            entity_id:
            - light.home_entry
            - light.porch
          alias: Turn on the front porch and entry lights.
        - service: light.turn_on
          data:
            color_name: white
            brightness: 255
          target:
            entity_id: light.path_lights
          alias: Turn on the front door path and entry lights.
        alias: Set lights to full + start countdown timer.
      alias: When a person is detected + it is dark outside.
    - if:
      - condition: trigger
        id: front_door
      then:
      - parallel:
        - service: script.notify_mobile
          data:
            title: Front Door
            message: Person Detected
            camera: camera.front_door
            who: brian
            tag: person_detected
            url: /lovelace/outdoor
          continue_on_error: true
        - service: script.cast
          data:
            displays:
            - 0aae07dda66f42e9b8a67979e34770d0
            - 7d6b52507e25e7eeba10914e56052d1c
            dashboard_path: dashboard-cast
            view_path: cameras
            dismiss_after: 120
          alias: Display the cameras on the Google displays.
          enabled: false
        - service: script.notify_pc
          continue_on_error: true
          data:
            title: Front Door
            message: Person Detected
            camera: camera.front_door_rtsp
            pc: blackpc
        alias: Show notifications on various devices.
      alias: When a person is detected approaching the front door.
    - delay:
        hours: 0
        minutes: 5
        seconds: 0
        milliseconds: 0
  mode: single
- id: '1665949560382'
  alias: Front door open state
  description: ''
  trigger:
  - id: door_open
    platform: state
    entity_id: binary_sensor.front_door
    from: 'off'
    to: 'on'
  - id: door_closed
    platform: state
    entity_id: binary_sensor.front_door
    from: 'on'
    to: 'off'
  condition:
  - alias: Only start the lock countdown when certain modes are disabled.
    condition: and
    conditions:
    - condition: state
      entity_id:
      - input_boolean.guest_mode
      - input_boolean.leave_unlocked
      state: 'off'
  action:
  - choose:
    - alias: Cancel the unlocked countdown timer when front door is opened.
      conditions:
      - condition: trigger
        id: door_open
      sequence:
      - alias: First pause the timer.
        service: timer.pause
        target:
          entity_id: timer.front_door_unlocked
        data: {}
      - alias: Now cancel the timer.
        service: timer.cancel
        target:
          entity_id: timer.front_door_unlocked
        data: {}
    - alias: Start the unlocked countdown timer when front door is closed.
      conditions:
      - condition: trigger
        id: door_closed
      sequence:
      - alias: Restart the timer.
        service: timer.start
        target:
          entity_id: timer.front_door_unlocked
        data: {}
  mode: single
- id: '1665949808088'
  alias: Front door lock timer
  description: ''
  trigger:
  - platform: state
    entity_id:
    - lock.front_door
    to: unlocked
    id: unlocked
    alias: When door is unlocked.
  - platform: state
    entity_id:
    - lock.front_door
    to: locked
    alias: When door is locked.
    id: locked
  - platform: state
    entity_id:
    - binary_sensor.front_door
    to: 'on'
    from: 'off'
    alias: When door is opened.
    id: opened
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.front_door_unlocked
    alias: When door unlocked timer finishes.
    id: timer_finished
  condition:
  - condition: or
    conditions:
    - condition: trigger
      id: locked
    - condition: and
      conditions:
      - condition: trigger
        id: opened
      - condition: state
        entity_id:
        - input_boolean.guest_mode
        - input_boolean.leave_unlocked
        state: 'off'
        alias: Confirm both leave unlocked + guest mode are off.
      alias: 'When triggered by opened: leave unlocked + guest mode must be off.'
    - condition: and
      conditions:
      - condition: or
        conditions:
        - condition: trigger
          id: timer_finished
        - condition: trigger
          id: unlocked
        alias: When triggered by unlocked or timer_finished
      - condition: state
        entity_id:
        - binary_sensor.front_door
        - input_boolean.guest_mode
        - input_boolean.leave_unlocked
        state: 'off'
        alias: Confirm the door is closed, and both leave unlocked + guest mode are
          off.
      alias: 'When triggered by unlocked or timer_finished: the door must be closed,
        and leave unlocked + guest mode must be off.'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: unlocked
      sequence:
      - alias: Start a countdown timer to relock the front door.
        service: timer.start
        target:
          entity_id: timer.front_door_unlocked
        data: {}
      - service: script.turn_on
        target:
          entity_id: script.notify_mobile_clear
        data:
          variables:
            who: brian
            tag: person_detected
        alias: Clear the person_detected mobile notification.
      - if:
        - condition: numeric_state
          entity_id: sensor.outdoor_illuminance_educated_guessor
          below: 2000
        then:
        - alias: Store the current state of the path, porch, + entry lights.
          service: scene.create
          data:
            scene_id: front_door_locked_snapshot
            snapshot_entities:
            - light.home_entry
            - light.path_lights
            - light.porch
        - alias: Full brightness!
          service: light.turn_on
          target:
            entity_id:
            - light.home_entry
            - light.path_lights
            - light.porch
          data:
            brightness: 255
        alias: 'When it is dark outside. '
      - alias: Update Light Switch LED Status Color.
        service: script.turn_on
        target:
          entity_id: script.inovelli_led_status_start
        data:
          variables:
            color: pink
            state_entity: lock.front_door
            state: unlocked
            entity_id: light.family_room
    - conditions:
      - condition: trigger
        id: locked
      sequence:
      - alias: Cancel and reset the unlocked timer.
        service: timer.cancel
        target:
          entity_id: timer.front_door_unlocked
        data: {}
      - alias: Disable Leave Unlocked mode.
        service: input_boolean.turn_off
        target:
          entity_id: input_boolean.leave_unlocked
        data: {}
      - alias: Clear the person_detected mobile notification.
        service: script.turn_on
        target:
          entity_id: script.notify_mobile_clear
        data:
          variables:
            who: brian
            tag: KEEP_UNLOCKED
      - if:
        - condition: numeric_state
          entity_id: sensor.outdoor_illuminance_educated_guessor
          below: 2000
        then:
        - alias: Restore the previous state of the porch + entry lights.
          service: scene.turn_on
          target:
            entity_id: scene.front_door_locked_snapshot
          data:
            transition: 5
        - delay:
            seconds: 10
        - if:
          - condition: state
            entity_id: switch.adaptive_lighting_home_entry
            state: 'on'
          then:
          - service: switch.turn_off
            target:
              entity_id: switch.adaptive_lighting_home_entry
            alias: Turn off adaptive lighting control temporarily.
            data: {}
          - delay:
              seconds: 1
          - service: switch.turn_on
            target:
              entity_id: switch.adaptive_lighting_home_entry
            alias: Turn adaptive lighting control back on.
            data: {}
          alias: Restore adaptive lighting automated control.
        alias: Skip turning on the entry lights in the middle of the day.
      - alias: Update Light Switch LED Status Color.
        service: script.turn_on
        target:
          entity_id: script.inovelli_led_off
        data:
          variables:
            entity_id: light.family_room
    alias: When the door locks or unlocks.
  - choose:
    - conditions:
      - condition: trigger
        id: timer_finished
        alias: When triggered by the timer finishing.
      sequence:
      - alias: Lock the front door.
        service: lock.lock
        data: {}
        target:
          entity_id: lock.front_door
    - conditions:
      - condition: trigger
        id: opened
        alias: When triggered by the door opening.
      sequence:
      - alias: Cancel the existing lock countdown timer.
        service: timer.cancel
        target:
          entity_id: timer.front_door_unlocked
        data: {}
      - alias: Restart the lock countdown timer.
        service: timer.start
        target:
          entity_id: timer.front_door_unlocked
        data: {}
    alias: When the door opens or the timer finishes.
  mode: single
- id: '1665953966268'
  alias: Kitchen cabinet lights
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.kitchen_motion
    to: 'on'
    from: 'off'
    alias: When kitchen motion is detected.
  - platform: state
    entity_id:
    - binary_sensor.kitchen_motion
    to: 'off'
    from: 'on'
    alias: When kitchen motion is cleared.
  condition: []
  action:
  - if:
    - condition: state
      entity_id: binary_sensor.kitchen_motion
      state: 'on'
      alias: When motion is detected.
    then:
    - service: light.turn_on
      data: {}
      target:
        entity_id: light.kitchen_cabinet
      alias: Turn on cabinet light.
    else:
    - service: light.turn_off
      data: {}
      target:
        entity_id: light.kitchen_cabinet
      alias: 'When motion clears: turn off the cabinet light.'
    alias: Perform an action based on kitchen motion state.
  mode: single
- id: '1666205350404'
  alias: 'Actionable notification: Keep unlocked'
  description: 'Prompt Brian''s mobile to select a front door lock mode: Lock now,
    Allow to lock (after a timeout period), or Keep unlocked.'
  trigger:
  - alias: Trigger the notification when the door unlocks.
    id: door_unlocked
    platform: state
    entity_id:
    - lock.front_door
    - lock.test_door
    from: locked
    to: unlocked
  condition: []
  action:
  - alias: Send the actionable notification.
    service: script.notify_mobile
    data:
      who: brian
      title: Door Unlocked
      message: Would you like the door to remain unlocked?
      tag: KEEP_UNLOCKED
      url: /lovelace/downstairs#entry
      actions:
      - action: LOCK_NOW
        title: Lock now
      - action: KEEP_UNLOCKED
        title: Leave unlocked
        behavior: default
      - action: ALLOW_TO_LOCK
        title: Allow to lock
        destructive: true
  - alias: Await possible selection.
    wait_for_trigger:
    - alias: LOCK NOW
      platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: LOCK_NOW
    - alias: KEEP_UNLOCKED
      platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: KEEP_UNLOCKED
    - alias: ALLOW_TO_LOCK
      platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: ALLOW_TO_LOCK
    timeout:
      minutes: '10'
    continue_on_timeout: true
  - variables:
      chosen_action: '{{ wait.trigger.event.data.action }}'
  - alias: Clear the message prompt after the timeout ends.
    service: script.notify_mobile_clear
    data:
      who: brian
      tag: '{{ tag }}'
  - alias: Take the requested action!
    choose:
    - alias: Lock the front door now.
      conditions:
      - alias: When LOCK_NOW is requested.
        condition: template
        value_template: '{{ chosen_action == "LOCK_NOW" }}'
      sequence:
      - service: lock.lock
        target:
          entity_id: lock.front_door
        data: {}
        alias: Lock the front door.
    - alias: Keep the front door unlocked.
      conditions:
      - alias: When KEEP_UNLOCKED is requested.
        condition: template
        value_template: '{{ chosen_action == "KEEP_UNLOCKED" }}'
      sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.leave_unlocked
        data: {}
        alias: Enable LEAVE UNLOCKED mode.
    - alias: Allow the door to lock automatically after the timer expires.
      conditions:
      - alias: When ALLOW_TO_LOCK is requested.
        condition: template
        value_template: '{{ chosen_action == "ALLOW_TO_LOCK" or wait.completed ==
          false }}'
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.leave_unlocked
        data: {}
        alias: Disable LEAVE UNLOCKED mode.
  mode: restart
- id: '1666206586172'
  alias: 'Actionable notification: Insecure doors at 8pm.'
  description: Warn us if any doors or windows are open or unlocked.
  trigger:
  - alias: Trigger the notification at 8pm.
    platform: time
    at: '20:00:00'
  condition: []
  action:
  - condition: or
    conditions:
    - condition: state
      entity_id: lock.front_door
      state: unlocked
      alias: If the front door is unlocked
    - condition: state
      entity_id: cover.garage_door
      state: open
      alias: or the Garage door is open
    alias: Continue if the front door is unlocked or the garage door is open.
  - alias: Send the actionable notification.
    service: script.notify_mobile
    data:
      who: brian
      title: 'SAFETY ALERT: INSECURE DOOR{% if is_state("lock.front_door","locked")
        and is_state("cover.garage_door","open") %}S{% endif %}'
      message: '{{ "The front door is unlocked!" if is_state("lock.front_door","locked")
        }}

        {{ "The garage door is open!" if is_state("cover.garage_door","open") }}

        '
      tag: INSECURE_DOOR
      url: /lovelace/outdoor
      actions:
      - action: SECURE_DOORS
        title: Secure doors
        behavior: default
      - action: NO_ACTION
        title: Leave them be
        destructive: true
  - alias: Awaiting action selection.
    wait_for_trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: SECURE_DOORS
      alias: SECURE_DOORS
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: NO_ACTION
      alias: NO_ACTION
    timeout:
      minutes: '15'
    continue_on_timeout: true
  - variables:
      chosen_action: '{{ wait.trigger.event.data.action }}'
  - choose:
    - conditions:
      - '{{ chosen_action == "SECURE_DOORS" or wait.completed == false }}'
      sequence:
      - alias: Lock the front door.
        choose:
        - conditions:
          - condition: state
            entity_id: lock.front_door
            state: unlocked
          sequence:
          - service: lock.lock
            entity_id: lock.front_door
      - alias: Close the garage door.
        choose:
        - conditions:
          - condition: state
            entity_id: cover.garage_door
            state: open
          sequence:
          - service: cover.close_cover
            entity_id: cover.garage_door
  mode: restart
- id: nws_alerts_notification
  alias: National weather service notification
  trigger:
  - platform: numeric_state
    entity_id: sensor.nws_alerts
    above: 0
  action:
  - service: script.notify_mobile
    data:
      title: '{{ state_attr("sensor.nws_alerts","title") }}

        '
      message: '{{ state_attr("sensor.nws_alerts","spoken_desc") }}

        '
      who: brian
      group: safety
      tag: weather-alert
      url: /lovelace/
  - service: script.notify_web
    data:
      type: warning
      title: '{{ state_attr("sensor.nws_alerts","title") }}

        '
      message: '{{ state_attr("sensor.nws_alerts","spoken_desc") }}

        '
- id: '1666207348480'
  alias: National weather service notification
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sensor.nws_alerts
    above: 0
  condition: []
  action:
  - service: script.notify_mobile
    data:
      title: '{{ state_attr("sensor.nws_alerts","title") }}

        '
      message: '{{ state_attr("sensor.nws_alerts","spoken_desc") }}

        '
      who: brian
      group: safety
      tag: weather-alert
      url: /lovelace/
  - service: script.notify_web
    data:
      type: warning
      title: '{{ state_attr("sensor.nws_alerts","title") }}

        '
      message: '{{ state_attr("sensor.nws_alerts","spoken_desc") }}

        '
  mode: single
- id: '1666207802970'
  alias: Update notification
  description: Sends alerts when a new release is available.
  trigger:
  - platform: numeric_state
    entity_id: sensor.updates
    above: 0
  condition: []
  action:
  - service: script.notify_mobile
    data:
      title: Home Assistant update
      message: "{% set updates = states(\"sensor.updates\")|int(default=0) %}\n\n{%-
        if updates == 1 %}\n  There is an update available.\n{% else %}\n  There are
        {{ updates }} updates available.\n{% endif %}\n"
      who: brian
      tag: update-notification
      url: /config
  - service: script.notify_web
    data:
      type: warning
      message: "{% set updates = states(\"sensor.updates\")|int(default=0) %}\n\n{%-
        if updates == 1 %}\n  There is an update available.\n{% else %}\n  There are
        {{ updates }} updates available.\n{% endif %}\n"
      duration: 0
  mode: single
- id: '1666207934690'
  alias: Fridge/freezer temperature alert
  description: Notify us if the temperature goes above a threshold.
  trigger:
  - id: fridge
    platform: numeric_state
    entity_id:
    - sensor.fridge_temperature
    - sensor.garage_fridge_temperature
    above: input_number.fridge_temperature_threshold
  - id: freezer
    platform: numeric_state
    entity_id:
    - sensor.freezer_temperature
    - sensor.garage_freezer_temperature
    above: input_number.freezer_temperature_threshold
  condition: []
  action:
  - variables:
      entity_id: '{{ trigger.to_state.entity_id }}'
      entity_name: '{{ state_attr(entity_id, "friendly_name") | replace(" temperature",
        "") }}

        '
      threshold_id: '{{ "input_number." + trigger.id + "_temperature_threshold" }}

        '
      title: '{{ entity_name }} is warm'
      message: 'The {{ entity_name }} is {{ states(entity_id)|round(default=0) }}°F.

        The threshold is currently set to {{ states(threshold_id)|round(default=0)
        }}°F.

        '
  - service: script.notify_mobile
    data:
      critical: true
      title: '{{ title }}'
      message: '{{ message }}'
      who: brian
      group: safety
      url: /lovelace/home
  - service: script.notify_web
    data:
      type: alert
      title: '{{ title }}'
      message: '{{ message }}'
  mode: single
- id: '1666208255624'
  alias: Holiday change
  description: This lets me know the sensor is updating.
  trigger:
  - platform: state
    entity_id:
    - sensor.holiday
  condition: []
  action:
  - variables:
      state: '{{ trigger.to_state.state|trim }}'
      time_from_midnight: '{{ now()|as_timestamp - today_at("0:00")|as_timestamp }}'
  - if:
    - condition: and
      conditions:
      - condition: template
        value_template: '{{ state|lower not in ['''',none,''unknown'',''unavailable'']
          }}'
        alias: State is a valid holiday.
      - condition: template
        value_template: '{{ time_from_midnight < 900 }}'
        alias: Stops notification repeating for every template sensor refresh.
    then:
    - service: script.notify_mobile
      data:
        title: '{{ state }}'
        message: Today is {{ state }}.
        group: holiday
        url: /lovelace/family-days
  mode: single
- id: '1666208582988'
  alias: Z-wave network unavailable alert
  description: Notify me if the Z-wave network goes offline.
  trigger:
  - platform: state
    entity_id: switch.docker_zwavejs2mqtt
    from: 'on'
    to:
    for:
      minutes: 30
  action:
  - variables:
      title: Z-Wave JS network unavailable
      message: 'The USB controller is no longer reporting a status of "alive".

        '
  - condition: state
    entity_id: automation.startup
    state: 'off'
  - service: script.notify_mobile
    data:
      title: '{{ title }}'
      message: '{{ message }}'
      who: brian
      group: server-issue
      url: /lovelace/home
  - service: script.notify_web
    data:
      type: alert
      title: '{{ title }}'
      message: '{{ message }}'
  mode: single
- id: '1666213876915'
  alias: Safety alert bathroom window open
  description: Warn us if the upstairs bathroom window is left open.
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.upstairs_bathroom_window
    for:
      hours: 0
      minutes: 30
      seconds: 0
    to: 'on'
  condition: []
  action:
  - service: script.notify_mobile
    data:
      critical: true
      title: WINDOW OPEN
      message: The upstairs bathroom has been open 30 minutes.
      who: brian
      group: safety
      url: /lovelace/home
  - service: script.notify_speech
    data:
      media_player: media_player.google_welcome
      message: The upstairs bathroom has been open for a half hour.
    enabled: true
  mode: single
- id: '1666214168418'
  alias: Safety alert leak
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.dishwasher_leak
    - binary_sensor.downstairs_bathroom_leak
    - binary_sensor.garage_water_heater_leak
    - binary_sensor.goez_suite_bathroom_1_leak
    - binary_sensor.goez_suite_bathroom_2_leak
    - binary_sensor.goez_suite_water_heater_leak
    - binary_sensor.kitchen_leak
    - binary_sensor.master_bathroom_1_leak
    - binary_sensor.master_bathroom_2_leak
    - binary_sensor.upstairs_bathroom_leak
    - binary_sensor.safety_alarm_test_leak
    from: 'off'
    to: 'on'
    alias: When any leak sensor detects water
  condition:
  - condition: template
    value_template: '{{ trigger.to_state.name|trim != "" }}'
    alias: Stop if entity name is empty.
  action:
  - variables:
      room: '{{ trigger.to_state.name|lower|replace(" leak", "")|replace(" #1", "")|replace("
        #2", "")|trim }}'
      title: WATER LEAK DETECTED!
      message: WATER LEAK detected in the {{ room|upper }}.
  - service: script.notify_speech
    data:
      media_player: media_player.google_speakers
      message: A leak has been detected in the {{ room }}!
    enabled: true
  - service: script.notify_mobile
    data:
      critical: true
      title: '{{ title }}'
      message: '{{ message }}'
      who: brian
      group: safety
      url: /lovelace/home
    enabled: true
  - service: script.notify_web
    data:
      type: alert
      title: '{{ title }}'
      message: '{{ message }}'
  - service: script.notify_persistent
    data:
      title: '{{ title }}'
      message: '{{ message }}'
      id: '{{ "safety_alert_" ~ as_timestamp(now()) }}'
    enabled: true
  - delay:
      minutes: 5
    enabled: true
  mode: single
- id: '1666214583383'
  alias: Safety alert smoke or carbon monoxide
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.safety_alarm_bedroom_type
    - sensor.safety_alarm_kyles_bedroom_type
    - sensor.safety_alarm_lucas_bedroom_type
    - sensor.safety_alarm_garage_type
    - sensor.safety_alarm_goez_suite_type
    - sensor.safety_alarm_guest_room_type
    - sensor.safety_alarm_stairs_type
    - sensor.safety_alarm_test_type
    alias: When smoke or CO/2 is detected
  condition:
  - condition: template
    value_template: '{{ trigger.to_state.state|int(default=0) in [1,2,12] }}'
    alias: Ignore unknown states as these can occur when the Z-wave docker restarts.
  action:
  - variables:
      type: '{{ trigger.to_state.state|int(default=0) }}'
      room: '{{ trigger.to_state.name | replace("Safety alarm","") | replace(" type","")
        | trim }}'
      alarm_state: "{%- if type == 1 %}\n  SMOKE\n{%- elif type == 2 %}\n  CARBON
        MONOXIDE\n{%- elif type == 12 %}\n  Test button press\n{%- endif %}\n"
      title: '{{ alarm_state }} DETECTED!'
      message: '{{ alarm_state }} detected in the {{ room|upper }}.'
  - service: script.notify_mobile
    data:
      critical: true
      title: '{{ title }}'
      message: '{{ message }}'
      who: brian
      group: safety
      url: /lovelace/home
    enabled: true
  - service: script.notify_speech
    data:
      media_player: media_player.google_downstairs
      message: '{{ message }}'
    enabled: true
  - service: script.notify_web
    data:
      type: alert
      title: '{{ title }}'
      message: '{{ message }}'
  - service: script.notify_persistent
    data:
      title: '{{ title }}'
      message: '{{ message }}'
      id: '{{ "safety_alert_" ~ as_timestamp(now()) }}'
    enabled: true
  - alias: Cool down timer.
    delay:
      minutes: 5
    enabled: true
  mode: single
- id: '1666214849323'
  alias: Z-wave JS Event Sniffer
  description: ''
  trigger:
  - alias: Scene events (value notification).
    id: scene_event
    platform: event
    event_type: zwave_js_value_notification
  - alias: Node events (notification).
    id: node_event
    platform: event
    event_type: zwave_js_notification
  - alias: Value updated event.
    id: value_updated_event
    platform: event
    event_type: zwave_js_value_updated
    event_data:
      entity_id: light.family_room
  action:
  - variables:
      event_type: '{{ trigger.event.event_type }}'
      event_data: '{{ trigger.event.data }}'
      event_label: '{{ event_data.event_label }}'
      notification_label: '{{ event_data.label }}'
      node_id: '{{ event_data.node_id }}'
  - condition: and
    conditions:
    - alias: Ignore lock operation.
      condition: template
      value_template: '{{ event_label.endswith("lock operation") == False }}

        '
    - alias: Ignore a list of node_ids.
      condition: template
      value_template: '{{ node_id in ["2"] == False }}

        '
      enabled: false
  - service: script.debug
    data:
      title: zwjs_event_sniffer
      message: 'trigger.id: {{ trigger.id }}

        node_id: {{ node_id }}


        event_type: {{ event_type }}

        event_label: {{ event_label }}

        notification_label: {{ notification_label }}


        event_data: {{ event_data }}

        '
  mode: parallel
- id: '1666215284920'
  alias: Zigbee2MQTT Button Click
  description: ''
  trigger:
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: sensor.family_room_remote_action
  condition: []
  action:
  - delay:
      seconds: 0.01
  - alias: Increment the counter.
    service: counter.increment
    entity_id: counter.z2m_button_click
  - delay:
      seconds: 0.49
  - variables:
      remote: '{{ trigger.event.data.new_state.object_id }}'
      remote_script: script.z2m_{{ remote }}
      command: '{{ trigger.event.data.old_state.state|trim|lower }}'
      click_count: '{{ states("counter.z2m_button_click") }}

        '
  - alias: Reset the counter.
    service: counter.reset
    entity_id: counter.z2m_button_click
  - alias: Debug output. (Disable to turn off.)
    service: script.debug
    data:
      title: '{{ remote }}'
      message: 'remote_script: "{{ remote_script }}"

        command: {{ command }}

        click_count: {{ click_count }}

        '
    enabled: false
  - if:
    - condition: template
      value_template: '{{ command not in ["", "none", "unknown", "unavailable"] }}

        '
    then:
    - alias: Call the script to interpret the requested command.
      service: '{{ remote_script }}'
      data:
        command: '{{ command }}'
        click_count: '{{ click_count }}'
    alias: When a valid command is given.
  mode: restart
  max_exceeded: silent
- id: '1666215299157'
  alias: 'Remote: pico click'
  description: ''
  trigger:
  - platform: event
    event_type: lutron_caseta_button_event
    event_data:
      action: press
  condition: []
  action:
  - service: script.debug
    data:
      message: "{{ trigger.event.data }}\n\nremote_name: {{ remote_name }}\nbutton_id:
        {{ button_id }}\nbutton: {{ button }}\nentities: {{ entities }}\n\n{%- set
        data = namespace(on_state=false) %}\n{%- for entity in entities %}\n  {%-
        set data.on_state = is_state(entity,\"on\") or data.on_state %}\n{% endfor
        %}\n{%- set on_state = data.on_state %}\n\nservice: homeassistant.turn_{{
        iif(on_state,\"off\",\"on\") }}\ndata:\n  entity_id: \"{{ entities }}\"\nalias:
        Turn on or off the alternate entities.\n"
    enabled: false
  - choose:
    - conditions:
        alias: On or off buttons.
        condition: template
        value_template: '{{ button in ["on","off"] and entities != "" }}

          '
      sequence:
      - service: homeassistant.turn_{{ button }}
        data:
          entity_id: '{{ entities }}'
        alias: Turn on or off the primary entities.
    - conditions:
        alias: Middle button.
        condition: template
        value_template: '{{ button == "middle" and entities != "" }}

          '
      sequence:
      - variables:
          on_state: "{%- set data = namespace(on_state=false) %}\n{%- for entity in
            entities %}\n  {%- set data.on_state = is_state(entity,\"on\") or data.on_state
            %}\n{% endfor %}\n{{ iif(data.on_state,\"off\",\"on\") }}\n"
      - service: homeassistant.turn_{{ on_state }}
        data:
          entity_id: '{{ entities }}'
        alias: Turn on or off the alternate entities.
    - conditions:
        alias: Up or down buttons.
        condition: template
        value_template: '{{ button in ["step_up","step_down"] and entities != "" }}

          '
      sequence:
      - service: homeassistant.turn_on
        data:
          entity_id: '{{ entities }}'
          brightness_step_pct: '{{ "-" if button == "step_down" }}20

            '
        alias: Increase or decrease brightness by 20%.
  variables:
    remote_name: '{{ trigger.event.data.device_name|lower|replace(" ","_") }}'
    button_id: '{{ trigger.event.data.button_number }}'
    buttons:
    - ''
    - ''
    - 'on'
    - middle
    - 'off'
    - step_up
    - step_down
    button: '{{ buttons[button_id] }}'
    remotes:
      bedroom:
        'on':
        - light.bedroom_east
        - light.bedroom_table_lamp
        'off':
        - light.bedroom
        - light.bedroom_east
        - light.bedroom_table_lamp
        - fan.bedroom
        - climate.bedroom_thermostat
        - switch.sound_machine
      dining_room:
        'on': light.dining_room
        'off': light.dining_room
        middle:
        - light.kitchen
        - light.kitchen_prep
        step_up: light.dining_room
        step_down: light.dining_room
      entry:
        'on': light.home_entry
        'off': light.home_entry
        middle: ''
        step_up: light.home_entry
        step_down: light.home_entry
      play_room_1:
        'on':
        - light.play_room
        - light.play_room_floor_lamp
        'off':
        - light.play_room
        - light.play_room_floor_lamp
        - light.play_room_entry
        middle: light.play_room_floor_lamp
        step_up:
        - light.play_room
        - light.play_room_floor_lamp
        step_down:
        - light.play_room
        - light.play_room_floor_lamp
      play_room_2:
        'on':
        - light.play_room
        - light.play_room_floor_lamp
        - light.play_room_entry
        'off':
        - light.play_room
        - light.play_room_floor_lamp
        - light.play_room_entry
        middle: light.play_room_entry
        step_up:
        - light.play_room
        - light.play_room_floor_lamp
        - light.play_room_entry
        step_down:
        - light.play_room
        - light.play_room_floor_lamp
        - light.play_room_entry
    entities: '{{ remotes[remote_name][button] }}'
  mode: parallel
- id: '1666216108903'
  alias: Play room light off
  description: Turn the floor lamp off when the main switch is turned off.
  trigger:
  - alias: When the primary light is turned on.
    platform: state
    entity_id: light.play_room
    from: 'on'
    to: 'off'
  condition: []
  action:
  - alias: Turn the secondary lights off.
    service: light.turn_off
    target:
      entity_id:
      - light.play_room_floor_lamp
      - light.play_room_entry
    data: {}
  - alias: Turn off VR mode.
    enabled: false
    service: switch.turn_off
    target:
      entity_id: switch.vr_mode
  mode: single
- id: '1666216858369'
  alias: Garage door status change
  description: ''
  trigger:
  - id: garage_opening
    platform: state
    entity_id:
    - cover.garage_door
    - cover.test
    from:
    to: opening
  - id: garage_closed
    platform: state
    entity_id:
    - cover.garage_door
    - cover.test
    from:
    to: closed
  action:
  - variables:
      old_state: '{{ trigger.from_state.state|lower }}'
      new_state: '{{ trigger.to_state.state|lower }}'
      alert_flashes: 5
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ old_state != new_state }}'
      alias: New state is different from old state.
    - condition: template
      value_template: '{{ new_state in ["opening","open","closed"] }}

        '
      alias: Door new state is opening, open, or closed.
  - alias: Turn the light for every door state so nobody falls in the dark!
    service: light.turn_on
    entity_id: light.laundry
  - choose:
    - alias: Garage Door Open
      conditions:
      - '{{ trigger.id == "garage_opening" }}'
      sequence:
      - alias: Update Light Switch LED Status Color.
        service: script.turn_on
        target:
          entity_id: script.inovelli_led_status_start
        data:
          variables:
            color: purple
            state_entity: cover.garage_door
            state: open
            entity_id: light.family_room
      - alias: Store current light states.
        service: scene.create
        data:
          scene_id: garage_door_closed_lights_snapshot
          snapshot_entities:
          - light.play_room_entry
          - light.family_room_table_lamp
      - delay:
          seconds: 1
      - alias: Turn on the notification lights.
        service: light.turn_on
        target:
          entity_id:
          - light.play_room_entry
          - light.family_room_table_lamp
        data:
          brightness_pct: 100
      - alias: Flash the bulbs to draw attention.
        repeat:
          count: '{{ alert_flashes }}'
          sequence:
          - service: light.turn_on
            target:
              entity_id: light.family_room_table_lamp
            data:
              flash: short
          - delay:
              seconds: 1
      - alias: Activate colorloop on table lamp.
        service: light.turn_on
        target:
          entity_id: light.family_room_table_lamp
        data:
          brightness_pct: 100
          effect: colorloop
      - delay:
          minutes: 5
      - alias: If after 5 minutes the garage is still open, dim the lights.
        choose:
        - conditions:
          - '{{ is_state("cover.garage_door","open") }}'
          sequence:
          - service: light.turn_on
            target:
              entity_id:
              - light.play_room_entry
              - light.family_room_table_lamp
            data:
              brightness_pct: 30
              transition: 5
    - alias: Garage door closed.
      conditions:
      - '{{ trigger.id == "garage_closed" }}'
      sequence:
      - alias: Turn off the LED notification.
        service: script.turn_on
        target:
          entity_id: script.inovelli_led_off
        data:
          variables:
            entity_id: light.family_room
      - alias: Restore the previous state of the notification lights.
        service: scene.turn_on
        target:
          entity_id: scene.garage_door_closed_lights_snapshot
        data:
          transition: 5
      - service: light.turn_off
        target:
          entity_id: light.play_room_entry
        data: {}
  mode: restart
- id: '1666217038936'
  alias: Garage motion change
  description: ''
  trigger:
  - id: motion_detected
    platform: state
    entity_id:
    - binary_sensor.garage_entry_door
    - sensor.garage_motion
    from: 'off'
    to: 'on'
    alias: When door opens or motion is detected.
  - id: timer_finished
    platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.garage_motion
  condition: []
  action:
  - choose:
    - alias: 'motion detected: turn on the light + start the timer.'
      conditions: '{{ trigger.id == "motion_detected" }}'
      sequence:
      - service: light.turn_on
        entity_id: light.laundry
      - alias: Cancel the existing countdown timer.
        choose:
        - conditions: '{{ states("timer.garage_motion") != "idle" }}'
          sequence:
          - service: timer.cancel
            target:
              entity_id: timer.garage_motion
            data: {}
      - alias: (Re)start the countdown timer.
        service: timer.start
        data:
          entity_id: timer.garage_motion
    - alias: 'Countdown finished: turn off the light.'
      conditions: '{{ trigger.id == "timer_finished" }}'
      sequence:
      - service: light.turn_off
        entity_id: light.laundry
  mode: restart
- id: '1666217162800'
  alias: 3D print status update
  description: Notify me when a 3D print status changes.
  trigger:
  - platform: state
    entity_id: binary_sensor.octoprint_printing
    from: 'on'
    to: 'off'
  condition:
  - condition: time
    after: 08:00:00
    before: '20:00:00'
  action:
  - variables:
      state: '{{ states("sensor.octoprint_current_state") }}

        '
      message: "{% if is_state(\"binary_sensor.octoprint_printing_error\",\"on\")
        %}\n  Your 3D print has paused with an error.\n{% elif state in [\"pausing\",\"paused\"]
        %}\n  Your 3D print has paused.\n{% else %}\n  Your 3D print is complete.\n{%
        endif %}\n"
  - service: script.notify_mobile
    data:
      title: 3D print status change
      message: '{{ message }}'
      who: brian
      url: /lovelace/making
  - service: script.notify_speech
    data:
      media_player: media_player.google_downstairs
      message: '{{ message }}'
  mode: single
- id: '1666217428873'
  alias: Dishwasher status update
  description: Update the current dishwasher status when certain criteria are met.
  trigger:
  - alias: Washing when motor vibration is detected.
    id: Washing
    platform: state
    entity_id: binary_sensor.dishwasher_moving
    from: 'off'
    to: 'on'
    for:
      minutes: 2
  - alias: Drying when temp is greater than 15 degrees above kitchen temperature.
    id: Drying
    platform: template
    value_template: '{{ is_state("binary_sensor.dishwasher_moving","off") and states("sensor.kitchen_temperature")|int(default=0)
      < (states("sensor.dishwasher_temperature")|int(default=0) - 15) }}'
    for:
      minutes: 10
  - alias: Clean when status has been Drying for a bit.
    id: Clean
    platform: state
    entity_id: input_select.dishwasher_status
    to: Drying
    for:
      minutes: 60
  - alias: Dirty when door is open for longer than 1 minute.
    id: Dirty
    platform: state
    entity_id: binary_sensor.dishwasher_door
    from: 'off'
    to: 'on'
    for:
      minutes: 1
  condition: []
  action:
  - variables:
      status: '{{ trigger.id }}'
      previous_status: '{{ states("input_select.dishwasher_status") }}'
      notify_title: '{{ "Dishwasher: " ~ status|lower if status in ["Clean","Dirty"]
        }}'
      notify_message: '{{ "The dishes are " ~ status|lower ~ "." if status in ["Clean","Dirty"]
        }}'
  - condition:
    - condition: template
      value_template: '{{ status != previous_status and status != "Unknown" }}'
  - alias: Update dishwasher status.
    service: input_select.select_option
    data:
      entity_id: input_select.dishwasher_status
      option: '{{ status }}'
  - service: script.notify_web
    data:
      message: '{{ "Dishwasher: " ~ status|lower }}'
  - choose:
    - conditions: '{{ status in ["Clean","Dirty"] }}'
      sequence:
      - service: script.notify_mobile
        data:
          title: '{{ notify_title }}'
          message: '{{ notify_message }}'
          who: brian
          url: /lovelace-special/dishwasher
  - alias: Cool down timer.
    delay:
      minutes: 5
  mode: single
- id: '1666217525653'
  alias: Smart plugs always on
  description: These plugs are for power monitoring only! They should not ever be
    turned off.
  trigger:
  - platform: state
    entity_id:
    - switch.bedroom_ac_power_monitor
    - switch.instant_pot_power_monitor
    - switch.lucas_ac_power_monitor
    - switch.prusa
    to: 'off'
  condition: []
  action:
  - service: switch.turn_on
    data:
      entity_id: '{{ trigger.to_state.entity_id }}'
  mode: parallel
  max: 10
- id: '1666218601527'
  alias: Network closet door on state change
  description: ''
  trigger:
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: binary_sensor.network_closet_door
  action:
  - variables:
      old_state: '{{ trigger.event.data.old_state.state }}'
      new_state: '{{ trigger.event.data.new_state.state }}'
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ old_state != new_state }}'
    - condition: template
      value_template: '{{ (new_state in ["off","on"] and old_state in ["off","on"])
        }}'
  - alias: Turn on or off the light.
    service: light.turn_{{ "on" if new_state == "on" else "off" }}
    target:
      entity_id: light.network_closet
  - alias: Turn the light off after 5 minutes.
    condition: state
    entity_id: light.network_closet
    state: 'on'
    for:
      minutes: 5
  - service: light.turn_off
    entity_id: light.network_closet
  mode: restart
- id: '1666218872839'
  alias: Printer status update and auto off
  description: Update the printer status while it is on and turn it off after it has
    been idle for a while.
  trigger:
  - id: update_status
    platform: state
    entity_id: switch.printer
    from: 'off'
    to: 'on'
    for:
      minutes: 1
      seconds: 30
  - id: idle
    platform: state
    entity_id: sensor.hp_colorlaserjet
    to: idle
    for:
      minutes: 15
  condition: []
  action:
  - if:
    - condition: trigger
      id: update_status
    then:
    - alias: Repeat update every minute until the power is turned off.
      repeat:
        sequence:
        - delay:
            seconds: 30
        - service: homeassistant.update_entity
          target:
            entity_id:
            - sensor.hp_colorlaserjet
          data: {}
        until:
        - condition: state
          entity_id: switch.printer
          state: 'off'
    - alias: Update the printer status after the printer switch turns off.
      service: homeassistant.update_entity
      target:
        entity_id: sensor.hp_colorlaserjet
      data: {}
      enabled: false
    - stop: ''
    alias: When triggered by update_status.
  - if:
    - condition: trigger
      id: idle
    then:
    - service: switch.turn_off
      data: {}
      target:
        entity_id: switch.printer
    - stop: Printer was turned off as expected.
    alias: When triggered by idle.
  mode: parallel
  max: 2
- id: '1666219596992'
  alias: 'Sensibo thermostats: AC sync power state'
  description: Using power monitoring to update the Sensibo device when the a/c state
    is changed at the control panel.
  trigger:
  - id: cool
    platform: numeric_state
    entity_id:
    - sensor.bedroom_ac_power
    - sensor.lucas_ac_power
    above: 100
    for:
      seconds: 10
    variables:
      powered_state: 'on'
  - id: 'off'
    platform: numeric_state
    entity_id:
    - sensor.bedroom_ac_power
    - sensor.lucas_ac_power
    below: 10
    for:
      minutes: 15
    variables:
      powered_state: 'off'
  condition: []
  action:
  - alias: 'Set climate_entity + assumed_state (hvac_modes: off, cool, fan_only, dry,
      heat_cool).'
    variables:
      climate_entity: "{%- if trigger.to_state.entity_id == \"sensor.bedroom_ac_power\"
        %}\n  climate.bedroom_thermostat\n{%- elif trigger.to_state.entity_id == \"sensor.lucas_ac_power\"
        %}\n  climate.lucas_room_thermostat\n{%- endif %}\n"
      assumed_state: '{{ states(climate_entity) }}'
  - if:
    - alias: When powered_state does not equal assumed_state.
      condition:
      - condition: template
        value_template: '{{ powered_state != assumed_state }}'
    then:
    - service: sensibo.assume_state
      target:
        entity_id: '{{ climate_entity }}'
      data:
        state: '{{ powered_state }}'
      alias: Update sensibo assumed state value.
  mode: restart
- id: '1666220470470'
  alias: Glowforge status update
  description: ''
  trigger:
  - id: 'Off'
    platform: numeric_state
    entity_id: sensor.glowforge_power_monitor_power
    below: 10
  - id: Idle
    platform: numeric_state
    entity_id: sensor.glowforge_power_monitor_power
    above: 10
    below: 50
  - id: Running
    platform: numeric_state
    entity_id: sensor.glowforge_power_monitor_power
    above: 150
  - id: Complete
    platform: numeric_state
    entity_id: sensor.glowforge_power_monitor_power
    below: 150
    above: 50
  condition: []
  action:
  - variables:
      debug: false
      status: "{%- if trigger.id == \"status_change\" %}\n  {{ states(\"input_select.glowforge_status\")
        }}\n{%- else %}\n  {{ trigger.id }}\n{%- endif %}\n"
      previous_status: "{%- if trigger.id == \"status_change\" %}\n  {{ \"Running\"
        if status == \"Complete\" }}\n{%- else %}\n  {{ states(\"input_select.glowforge_status\")
        }}\n{%- endif %}\n"
  - if: '{{ debug is defined and debug == true }}'
    then:
    - service: script.debug
      data:
        message: 'trigger.id: {{ trigger.id }}

          status: {{ status }}

          {{ "previous_status: " ~ previous_status if previous_status|trim != "" }}

          '
  - alias: Do not update the status if this is not true.
    if:
    - condition: template
      value_template: '{{ status == "Complete" and previous_status != "Running" }}'
    then:
    - stop: Stop right here!
  - if:
    - condition: template
      value_template: '{{ trigger.id != "status_change" }}'
    then:
    - alias: Update the status.
      service: input_select.select_option
      target:
        entity_id: input_select.glowforge_status
      data:
        option: '{{ status }}'
  - choose:
    - alias: Off actions.
      conditions: '{{ status == "Off" }}'
      sequence:
      - alias: Turn off the camera.
        service: switch.turn_off
        target:
          entity_id:
          - switch.glowforge_camera
          - switch.docker_wyze_bridge
        data: {}
    - alias: Idle/Running actions.
      conditions: '{{ status in ["Idle","Running"] }}'
      sequence:
      - alias: Turn on the wyze camera bridge docker container.
        if:
        - condition: template
          value_template: '{{ is_state("switch.docker_wyze_bridge","off") }}'
        then:
        - service: switch.turn_on
          target:
            entity_id: switch.docker_wyze_bridge
          data: {}
        - delay:
            seconds: 10
      - alias: Turn on the camera.
        if:
        - condition: template
          value_template: '{{ is_state("switch.glowforge_camera","off") }}'
        then:
        - service: switch.turn_on
          target:
            entity_id: switch.glowforge_camera
          data: {}
    - alias: Complete actions.
      conditions: '{{ status == "Complete" and previous_status == "Running" }}'
      sequence:
      - alias: Speech notification.
        service: script.notify_speech
        data:
          media_player: media_player.google_downstairs
          message: Glowforge is complete!
      - alias: Mobile app notification.
        service: script.notify_mobile
        data:
          title: Glowforge
          message: Glowforge is complete!
          who: brian
          group: status
          tag: glowforge-status
          url: /lovelace/making
  - alias: Mode single cooldown.
    delay:
      seconds: 10
  mode: single
- id: '1666220627171'
  alias: Bedroom light on state change
  description: ''
  trigger:
  - id: light_on
    platform: state
    entity_id: light.bedroom
    from: 'off'
    to: 'on'
  - id: secondary_light_on
    platform: state
    entity_id:
    - light.bedroom_east
    - light.bedroom_table_lamp
    from: 'off'
    to: 'on'
  - id: light_off
    platform: state
    entity_id: light.bedroom
    from: 'on'
    to: 'off'
  condition: []
  action:
  - variables:
      nerene_battery_charging: '{{ is_state_attr("device_tracker.life360_nerene","battery_charging",True)
        }}'
      now_timestamp: '{{ as_timestamp(now()) }}'
      timezone_offset: '{{ now_timestamp|timestamp_custom("%z") }}'
      wakeup_time: '{{ states("input_datetime.event_light_wakeup_nerene") }}'
      wakeup: '{{ now_timestamp | timestamp_custom("%Y-%m-%d "+wakeup_time+timezone_offset,
        true) }}'
      wakeup_time_difference: '{{ ((now_timestamp - as_timestamp(wakeup)) / 60) |int(default=0)
        }}'
      near_wakeup: '{{ wakeup_time_difference|abs <= 60 }}'
  - if:
    - condition: template
      value_template: '{{ is_state("script.event_light", "off") }}'
    then:
    - if:
      - condition: template
        value_template: '{{ trigger.id == "light_on" }}'
      then:
      - service: light.turn_on
        target:
          entity_id:
          - light.bedroom
          - light.bedroom_east
          - light.bedroom_table_lamp
        data:
          brightness: 255
    - if:
      - condition: template
        value_template: '{{ trigger.id == "secondary_light_on" }}'
      then:
      - service: light.turn_on
        target:
          entity_id: '{{ trigger.to_state.entity_id }}'
        data:
          brightness: 255
  - if:
    - condition: template
      value_template: '{{ trigger.id == "light_off" }}'
    then:
    - if:
      - condition: template
        value_template: '{{ nerene_battery_charging == False and near_wakeup == True
          }}'
      then:
      - service: homeassistant.turn_off
        entity_id:
        - fan.bedroom
        - switch.sound_machine
    - if:
      - condition: template
        value_template: '{{ is_state("script.event_light", "off") }}'
      then:
      - service: light.turn_off
        target:
          entity_id:
          - light.bedroom_east
          - light.bedroom_table_lamp
        data: {}
  mode: single
- id: '1666279149478'
  alias: TV power on
  description: 'Set TV volume to zero. '
  trigger:
  - platform: device
    device_id: 32d18497e45ef4b0b2ced17b5e477538
    domain: media_player
    entity_id: media_player.family_room_tv
    type: turned_on
    for:
      hours: 0
      minutes: 0
      seconds: 0
  condition: []
  action:
  - service: media_player.volume_set
    data:
      volume_level: 0
    target:
      device_id: 32d18497e45ef4b0b2ced17b5e477538
  mode: single
- id: '1667158538897'
  alias: 'Remote: Lucas bedside'
  description: ''
  use_blueprint:
    path: rhl2401/zigbee2mqtt_aqara_wireless_switch.yaml
    input:
      switch: sensor.remote_lucas_bedside_action
      press_single:
      - service: light.toggle
        data:
          transition: 0
        target:
          entity_id: light.lucas_room
        enabled: false
      - if:
        - condition: device
          type: is_on
          device_id: 759c08b03f409722c65c5fddb29837d1
          entity_id: light.lucas_room
          domain: light
        then:
        - type: turn_off
          device_id: 759c08b03f409722c65c5fddb29837d1
          entity_id: light.lucas_room
          domain: light
        else:
        - type: turn_on
          device_id: 759c08b03f409722c65c5fddb29837d1
          entity_id: light.lucas_room
          domain: light
      press_double:
      - choose:
        - conditions:
          - condition: state
            entity_id: climate.lucas_room_thermostat
            state: 'off'
            alias: Confirm Lucas' thermostat is off.
          sequence:
          - service: climate.turn_on
            target:
              entity_id: climate.lucas_room_thermostat
            data: {}
            alias: Turn Lucas' thermostat on.
        default:
        - service: climate.turn_off
          target:
            entity_id: climate.lucas_room_thermostat
          data: {}
          alias: Otherwise turn off Lucas' thermostat.
        alias: Toggle Lucas' thermostat.
- id: '1667158746192'
  alias: 'Remote: Kyle bedside'
  description: ''
  use_blueprint:
    path: rhl2401/zigbee2mqtt_aqara_wireless_switch.yaml
    input:
      switch: sensor.remote_kyle_bedside_action
      press_single:
      - service: light.toggle
        data:
          transition: 0
          brightness_pct: 100
        target:
          entity_id: light.kyle_bedside
- id: '1667248465722'
  alias: 'Reminder: Lucas Xolaire'
  description: ''
  trigger:
  - platform: calendar
    event: start
    entity_id: calendar.lucas
    alias: When Lucas calendar events start.
    id: reminder_start
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.reminder_lucas_xolaire
    alias: When reminder timer finishes.
    id: timer_complete
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: SHOT_GIVEN
    id: shot_given
    alias: When the SHOT_GIVEN actionable notication button is pressed.
  condition: []
  action:
  - if:
    - condition: and
      conditions:
      - condition: trigger
        id: reminder_start
        alias: When triggered by REMINDER_START.
      - condition: template
        value_template: '{{ "Xolaire" in trigger.calendar_event.summary }}'
        alias: When event contains "Xolaire".
      alias: When triggered by REMINDER_START and event contains "Xolaire".
    then:
    - parallel:
      - service: script.say
        data:
          media_player: media_player.google_family_room
          message: It is time for Lucas's allergy shot.
        alias: Announce "It is time for Lucas's allergy shot."
      - service: timer.start
        data:
          duration: '1:00:00'
        target:
          entity_id: timer.reminder_lucas_xolaire
    alias: When triggered by REMINDER_START calendar event.
  - if:
    - condition: trigger
      id: timer_complete
    then:
    - parallel:
      - alias: Send the actionable notification.
        service: script.notify_mobile
        data:
          who: brian
          title: Xolaire for Lucas
          message: 'It is time for Lucas'' allergy shot.

            '
          tag: REMINDER_XOLAIRE
          url: /lovelace
          actions:
          - action: SHOT_GIVEN
            title: Stop the reminder. The shot has been given.
            destructive: true
      - service: script.say
        data:
          media_player: media_player.google_downstairs
          message: It is time for Lucas's allergy shot.
        alias: Announce "It is time for Lucas's allergy shot."
        enabled: true
    - service: timer.cancel
      data: {}
      target:
        entity_id: timer.reminder_lucas_xolaire
    - service: timer.start
      data:
        duration: '1:00:00'
      target:
        entity_id: timer.reminder_lucas_xolaire
    alias: When triggerd by TIMER_COMPLETE event.
  - if:
    - condition: trigger
      id: shot_given
    then:
    - parallel:
      - alias: Clear the message prompt after the timeout ends.
        service: script.notify_mobile_clear
        data:
          who: brian
          tag: REMINDER_XOLAIRE
      - service: timer.cancel
        data: {}
        target:
          entity_id: timer.reminder_lucas_xolaire
        alias: Cancel the reminder timer.
    alias: When triggered by SHOT_GIVEN button press.
  mode: single
- id: '1667443521533'
  alias: Porch light sync
  description: ''
  trigger:
  - platform: state
    entity_id: light.porch
    alias: When porch light changes
  condition: []
  action:
  - if:
    - condition: and
      conditions:
      - condition: state
        entity_id: light.porch
        state: 'on'
      - condition: numeric_state
        entity_id: light.porch
        attribute: brightness
        above: 0
      alias: If porch is on and brightness is > 0.
    then:
    - service: light.turn_on
      data:
        brightness: '{{ state_attr("light.porch","brightness") }}

          '
      target:
        entity_id: light.path_lights
      alias: Turn on path lights and match brightness.
    - type: turn_on
      device_id: f4bca7d83e51cfdd4bb3cf5910b1c97a
      entity_id: light.porch_dimmer
      domain: light
    else:
    - service: light.turn_off
      data: {}
      target:
        entity_id: light.path_lights
    - type: turn_off
      device_id: cd6cadbf01fe68bb03b91e32332447b3
      entity_id: light.porch_dimmer
      domain: light
    alias: Sync the path lights with the porch light's current state.
  mode: single
- id: '1667516445872'
  alias: Front door/driveway person detection clears
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.driveway_person_occupancy
    - binary_sensor.driveway_flood_motion
    - binary_sensor.front_door_person_occupancy
    to: 'off'
    from: 'on'
    id: occupancy_cleared
    alias: When person occupancy is cleared.
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.driveway_front_door_person_detected
    id: timer_finished
    alias: When person detection timer finishes.
  condition:
  - condition: numeric_state
    entity_id: sensor.outdoor_illuminance_educated_guessor
    below: 2000
    alias: Only restore the lights when when it is night.
  action:
  - if:
    - condition: and
      conditions:
      - condition: trigger
        id: occupancy_cleared
      - condition: and
        conditions:
        - condition: state
          entity_id: binary_sensor.driveway_person_occupancy
          state: 'off'
        - condition: state
          entity_id: binary_sensor.front_door_person_occupancy
          state: 'off'
        - condition: state
          entity_id: binary_sensor.driveway_flood_motion
          state: 'off'
    then:
    - service: timer.start
      data:
        duration: 00:05:00
      target:
        entity_id: timer.driveway_front_door_person_detected
      alias: Start the light restoration countdown timer.
    alias: When person occupancy is cleared.
  - if:
    - condition: trigger
      id: timer_finished
    then:
    - service: scene.turn_on
      data: {}
      target:
        entity_id: scene.driveway_front_door_presence_snapshot
      alias: Activate the scene to restore the lights previous states.
    - service: select.select_option
      data:
        option: Auto
      target:
        entity_id: select.driveway_flood_mode
    - service: light.turn_off
      data: {}
      target:
        entity_id: light.driveway_flood_accent
    - if:
      - condition: state
        entity_id: switch.adaptive_lighting_home_entry
        state: 'on'
      then:
      - service: switch.turn_off
        target:
          entity_id: switch.adaptive_lighting_home_entry
        alias: Turn off adaptive lighting control temporarily.
        data: {}
      - delay:
          seconds: 1
      - service: switch.turn_on
        target:
          entity_id: switch.adaptive_lighting_home_entry
        alias: Turn adaptive lighting control back on.
        data: {}
      alias: Restore adaptive lighting automated control.
    alias: When person detection timer finishes.
  mode: single
- id: '1667620286387'
  alias: Front door locked
  description: ''
  trigger:
  - platform: state
    entity_id:
    - lock.front_door
    not_from: unavailable
    to: locked
  condition: []
  action:
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.leave_unlocked
    alias: Turn off LEAVE UNLOCKED.
  - service: select.select_option
    data:
      option: Auto
    target:
      entity_id: select.driveway_flood_mode
    alias: Restore driveway flood light to “Auto”.
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.driveway_flood_accent
    alias: Turn off the flood’s accent ring so the camera can have a better view.
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - if:
    - condition: state
      entity_id: switch.adaptive_lighting_home_entry
      state: 'on'
    then:
    - service: switch.turn_off
      target:
        entity_id: switch.adaptive_lighting_home_entry
      alias: Turn off adaptive lighting control temporarily.
      data: {}
    - delay:
        seconds: 1
    - service: switch.turn_on
      target:
        entity_id: switch.adaptive_lighting_home_entry
      alias: Turn adaptive lighting control back on.
      data: {}
    alias: Restore adaptive lighting automated control.
    enabled: true
  mode: single
