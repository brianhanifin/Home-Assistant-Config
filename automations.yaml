- id: '1588556714529'
  alias: Maintenance at midnight
  description: Runs every night at midnight.
  trigger:
  - platform: time
    at: 00:00:00
  condition: []
  action:
  - data:
      message: Daily maintenance begins.
      type: warning
      duration: 300
    service: script.notify_web
  - service: homeassistant.turn_off
    target:
      entity_id:
      - input_boolean.guest_mode
      - input_boolean.leave_unlocked
    data: {}
  - data: {}
    service: script.holiday_sensors_update
  - data:
      keep_days: 10
      repack: true
    service: recorder.purge
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.docker_unifi
  - delay:
      hours: 0
      minutes: 0
      seconds: 15
      milliseconds: 0
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.docker_unifi
  - service: script.notify_web
    data:
      type: success
      message: Daily maintenance complete.
  mode: single
- id: '1615053055187'
  alias: Bedroom dimmer multi-click handler
  description: ''
  use_blueprint:
    path: kpine/ge_double.yaml
    input:
      device: 8bef4ccfe78c1356e14212171ff1bfc7
      double_tap_on:
      - service: light.turn_on
        data:
          transition: 0
          brightness_pct: 100
        target:
          entity_id:
          - light.bedroom
          - light.bedroom_east
          - light.bedroom_table_lamp
      double_tap_off:
      - service: homeassistant.turn_off
        data: {}
        target:
          entity_id:
          - switch.sound_machine
          - climate.bedroom_thermostat
          - fan.bedroom
          - switch.sound_machine
          - light.bedroom
          - light.bedroom_table_lamp
          - light.bedroom_east
- id: '1618159056314'
  alias: Startup
  description: Actions to run at startup.
  trigger:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - service: script.notify_web
    data:
      message: Startup automation begins.
      type: warning
      duration: 120
  - service: frontend.set_theme
    data:
      name: Mushroom
  - delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  - service: script.inovelli_led_set_defaults
    data:
      entity_id: light.family_room
      color: Teal
  - service: watchman.report
    data: {}
  - service: script.notify_web
    data:
      message: Startup automation complete.
      type: success
      duration: 60
  - service: automation.turn_off
    data: {}
    target:
      entity_id: automation.startup
  mode: single
  initial_state: true
- id: '1620056955070'
  alias: 'Scheduled tasks: hourly'
  description: Tasks to run every hour.
  trigger:
  - platform: time_pattern
    hours: /1
  condition: []
  action:
  - service: script.refresh_update_sensors
  mode: single
- id: '1620532169172'
  alias: Keep startup automation off
  description: The startup automation will turn back on after an automation reload.
    So turn it right back off when it changes from "unavailable" to "on".
  trigger:
  - platform: event
    event_type: automation_reloaded
  condition:
  - condition: template
    value_template: '{%- set uptime_minutes = as_timestamp(now()) - as_timestamp(states("sensor.last_restart"))|float(default=0)
      / 60 %}

      {{ uptime_minutes > 5 }}'
  action:
  - service: automation.turn_off
    target:
      entity_id: automation.startup
  mode: single
- id: '1624556633877'
  alias: Safety alert garage door obstruction detected
  description: Alert when the garage door is unable to close due an obstruction.
  trigger:
  - platform: state
    entity_id: cover.garage_door
    attribute: obstruction-detected
    from: 'false'
    to: 'true'
    for: 0:01:00
  condition: []
  action:
  - service: script.notify_speech
    data:
      media_player: media_player.google_welcome
      message: The garage door cannot close due to an obstruction. Please help the
        garage door close safely.
  - service: script.notify_mobile
    data:
      title: Garage door obstructed
      url: /lovelace/outdoor
      message: The garage door cannot close due to an obstruction. Please help the
        garage door close safely.
      critical: true
  mode: single
- id: '1638465871838'
  alias: Maintenance before sunrise
  description: 'Runs every day 2 hours before sunrise.

    1. Reset Adaptive lighting switches.

    2. Update watchman report.

    3. Bedroom Do Not Disturb'
  trigger:
  - platform: sun
    event: sunrise
    offset: '-2:00:00'
  condition: []
  action:
  - service: switch.turn_off
    data:
      entity_id: '{{ switches }}'
  - delay:
      seconds: 5
  - service: switch.turn_on
    data:
      entity_id: '{{ switches }}'
  - service: watchman.report
    data: {}
  - if:
    - condition: state
      entity_id: switch.google_bedroom_do_not_disturb
      state: 'off'
    then:
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.google_bedroom_do_not_disturb
  mode: single
  variables:
    switches: "{% set adaptive_lighting = namespace(switches=[]) %}\n{%- for entity
      in states.switch if 'switch.adaptive_lighting_' in entity.entity_id\n      and
      entity.entity_id[25:30] not in [\"adapt\",\"sleep\"] %}\n  {%- set adaptive_lighting.switches
      = adaptive_lighting.switches + [ entity ] %}\n{%- endfor %} {{- adaptive_lighting.switches
      | map(attribute='entity_id') | list }}\n"
- id: '1638910619111'
  alias: 'Maintenace: lights off after sunrise'
  description: Turn the entry and porch lights off after sunrise.
  trigger:
  - platform: sun
    event: sunrise
    offset: +00:45:00
  action:
  - type: turn_off
    device_id: 1ad4b3bd16edcc7d4961b3e95ed57f70
    entity_id: light.home_entry
    domain: light
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.porch
- id: '1640128623256'
  alias: 'Maintenance: lights before sunset'
  description: ''
  trigger:
  - platform: sun
    event: sunset
    offset: -00:30:00
  action:
  - service: light.turn_on
    target:
      device_id:
      - 1ad4b3bd16edcc7d4961b3e95ed57f70
      - 385bbbe37417eec30709aadfd0f37152
    data: {}
  - service: script.say
    data:
      media_player: media_player.google_kitchen
      say_dark_outside: 'true'
  - if:
    - condition: state
      entity_id: binary_sensor.work_day
      state: 'on'
    then:
    - service: light.turn_on
      data: {}
      target:
        entity_id:
        - light.family_room
        - light.table_lamp
    enabled: false
  mode: single
- id: '1640887750655'
  alias: Wet laundry Family room LED indicator
  description: The light will chase blue when the laundry wet alert is active.
  use_blueprint:
    path: brianhanifin/inovelli_led_notify.yaml
    input:
      trigger_entity_id: alert.wet_laundry
      on_trigger_state: 'on'
      off_trigger_state: idle
      inovelli_entity_id: light.family_room
      color: Blue
      effect: Chase
      duration: Indefinitely
- id: '1642400705340'
  alias: 'Remote: Brian bedside'
  description: ''
  use_blueprint:
    path: mozartbanging/zigbee2mqtt-aqara-opple-wxcjkg13lm-3-band-switch-all-custom-buttons.yaml
    input:
      switch: sensor.remote_brian_bedside_action
      button_1_single:
      - service: light.toggle
        data:
          transition: 0
        target:
          entity_id: light.bedroom
      button_2_single:
      - service: light.toggle
        data:
          transition: 0
        target:
          entity_id: light.bedroom_east
      button_1_double:
      - service: light.toggle
        target:
          device_id: ca15d133b0892224f12740ec003bf25c
        data:
          transition: 0
      button_2_double:
      - service: light.toggle
        data:
          transition: 0
        target:
          device_id: ca15d133b0892224f12740ec003bf25c
      button_3_single:
      - choose:
        - conditions:
          - condition: state
            entity_id: binary_sensor.bedroom_fan_power
            state: 'on'
          sequence:
          - service: fan.turn_off
            data: {}
            target:
              entity_id: fan.bedroom
        default:
        - service: fan.turn_on
          data: {}
          target:
            entity_id: fan.bedroom
      button_4_single:
      - service: switch.toggle
        target:
          device_id: 4fb4fa5e3d2742488c93b02c34bbd7e8
        data: {}
      button_6_single:
      - service: climate.turn_off
        target:
          entity_id: climate.bedroom_thermostat
        data: {}
      button_5_single:
      - choose:
        - conditions:
          - condition: state
            entity_id: climate.bedroom_thermostat
            state: cool
          sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: climate.bedroom_thermostat
            data:
              hvac_mode: fan_only
        default:
        - service: climate.set_hvac_mode
          target:
            entity_id: climate.bedroom_thermostat
          data:
            hvac_mode: cool
- id: '1642402019243'
  alias: 'Remote: Nerene bedside'
  description: ''
  use_blueprint:
    path: mozartbanging/zigbee2mqtt-aqara-opple-wxcjkg13lm-3-band-switch-all-custom-buttons.yaml
    input:
      switch: sensor.remote_nerene_bedside_action
      button_1_single:
      - service: light.toggle
        data:
          transition: 0
        target:
          entity_id: light.bedroom
      button_2_single:
      - service: light.toggle
        data:
          transition: 0
        target:
          entity_id: light.bedroom_east
      button_1_double:
      - service: light.toggle
        target:
          device_id: ca15d133b0892224f12740ec003bf25c
        data:
          transition: 0
      button_2_double:
      - service: light.toggle
        data:
          transition: 0
        target:
          device_id: ca15d133b0892224f12740ec003bf25c
      button_3_single:
      - choose:
        - conditions:
          - condition: state
            entity_id: binary_sensor.bedroom_fan_power
            state: 'on'
          sequence:
          - service: fan.turn_off
            data: {}
            target:
              entity_id: fan.bedroom
        default:
        - service: fan.turn_on
          data: {}
          target:
            entity_id: fan.bedroom
      button_4_single:
      - service: switch.toggle
        target:
          device_id: 4fb4fa5e3d2742488c93b02c34bbd7e8
        data: {}
      button_6_single:
      - service: climate.turn_off
        target:
          entity_id: climate.bedroom_thermostat
        data: {}
      button_5_single:
      - choose:
        - conditions:
          - condition: state
            entity_id: climate.bedroom_thermostat
            state: cool
          sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: climate.bedroom_thermostat
            data:
              hvac_mode: fan_only
        default:
        - service: climate.set_hvac_mode
          target:
            entity_id: climate.bedroom_thermostat
          data:
            hvac_mode: cool
- id: '1642441568665'
  alias: 'Z2M - Remote: Lucas bedside'
  description: ''
  use_blueprint:
    path: rhl2401/zigbee2mqtt_aqara_wireless_switch.yaml
    input:
      switch: sensor.remote_lucas_bedside_action
      press_single:
      - service: light.toggle
        target:
          device_id: 759c08b03f409722c65c5fddb29837d1
        data:
          transition: 0
      press_double:
      - choose:
        - conditions:
          - condition: state
            entity_id: climate.lucas_room_thermostat
            state: 'off'
          sequence:
          - service: climate.turn_on
            target:
              entity_id: climate.lucas_room_thermostat
        default:
        - service: climate.turn_off
          target:
            entity_id: climate.lucas_room_thermostat
- id: '1642442618846'
  alias: 'Z2M - Remote: Kyle bedside'
  description: ''
  use_blueprint:
    path: rhl2401/zigbee2mqtt_aqara_wireless_switch.yaml
    input:
      switch: sensor.remote_kyle_bedside_action
      press_single:
      - service: light.toggle
        data:
          transition: 0
          brightness_pct: 100
        target:
          entity_id: light.kyle_bedside
- id: '1642443845360'
  alias: 'Z2M - Remote: family room 5 button'
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1524_e1810.yaml
    input:
      integration: Zigbee2MQTT
      controller_entity: sensor.remote_family_room_action
      helper_last_controller_event: input_text.z2m_blueprint_helper_last_controller_event
      action_button_up_short:
      - service: light.turn_on
        target:
          device_id:
          - 2d8b03f66fda68a6e0f7b2a506a33b02
          - 42fec827b0c1823c608f8d9a9cdac97e
        data:
          transition: 1
      action_button_down_short:
      - service: light.turn_off
        target:
          device_id:
          - 2d8b03f66fda68a6e0f7b2a506a33b02
          - 42fec827b0c1823c608f8d9a9cdac97e
        data:
          transition: 1
      action_button_left_short:
      - service: light.turn_off
        data:
          transition: 1
        target:
          device_id: 63789fb09fae954b2c90a2aa98f6b102
      action_button_right_short:
      - service: light.turn_on
        target:
          device_id: 63789fb09fae954b2c90a2aa98f6b102
        data:
          transition: 1
- id: '1642448378521'
  alias: 'Z2M - Remote:  printer'
  description: ''
  use_blueprint:
    path: freakshock/zigbee2mqtt-xiaomi-mijia-round-wireless-remote-switch-wxkg01lm-actions.yaml
    input:
      button_sensor: sensor.remote_printer_action
      remote_button_single_press:
      - service: switch.toggle
        target:
          device_id: b397a55fe03e4571a4cb668d7064b277
- id: '1642908642407'
  alias: Doorbell pushed
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.doorbell_action
    to: bell1
  condition: []
  action:
  - service: script.notify_audio
    data:
      audio_file: media-source://media_source/local/audio/jetsons-doorbell.mp3
      speakers:
      - media_player.google_family_room_display
      volume: 75
  - parallel:
    - service: script.cast
      data:
        displays:
        - 7d6b52507e25e7eeba10914e56052d1c
        dashboard_path: dashboard-cast
        view_path: cameras
        dismiss_after: 120
    - service: script.notify_mobile
      data:
        who: brian
        title: Doorbell
        message: Someone pushed the doorbell.
        camera: camera.front_door
    - service: script.notify_web
      data:
        message: Someone pressed the doorbell!
        duration: 60
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - service: script.cast
    data:
      displays:
      - 0aae07dda66f42e9b8a67979e34770d0
      dashboard_path: dashboard-cast
      view_path: cameras
      dismiss_after: 120
  - delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  mode: single
- id: '1643829963937'
  alias: HACS install event - update sensors
  description: ''
  trigger:
  - platform: event
    event_type: hacs/repository
    event_data:
      action: install
  condition: []
  action:
  - delay:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
  - service: homeassistant.update_entity
    data: {}
    target:
      entity_id: sensor.updates
  mode: single
- id: '1643862026593'
  alias: External IP changed
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.external_ip
  condition: []
  action:
  - service: script.notify_mobile
    data:
      who: brian
      title: IP changed
      message: 'From: {{trigger.from_state.state}}

        To: {{trigger.to_state.state}}'
  - if:
    - condition: template
      value_template: '{{ trigger.to_state.state=="unavailable"}}'
    then:
    - service: switch.turn_off
      data: {}
      target:
        entity_id: switch.docker_unifi
    - delay:
        hours: 0
        minutes: 0
        seconds: 15
        milliseconds: 0
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.docker_unifi
    else: []
  mode: single
- id: '1644783738380'
  alias: Google next timer actions
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.google_next_timer
    attribute: end_time
    id: update_end_time
  - platform: event
    event_type: timer.started
    event_data:
      entity_id: timer.google_next_timer
    id: timer_started
    enabled: true
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.google_next_timer
    id: timer_finished
  - platform: event
    event_type:
    - timer.cancelled
    - timer.paused
    event_data:
      entity_id: timer.google_next_timer
    id: timer_cancelled
  - platform: state
    entity_id: input_button.google_next_timer_cancel
    id: cancel_button_pressed
  condition: []
  action:
  - if:
    - condition: template
      value_template: '{{ state_attr("sensor.google_next_timer","end_time") == none
        }}'
    then:
    - service: timer.cancel
      data: {}
      target:
        entity_id: timer.google_next_timer
    - service: media_player.turn_off
      target:
        entity_id: media_player.google_kitchen
      data: {}
    else:
    - choose:
      - conditions:
        - condition: trigger
          id: update_end_time
        sequence:
        - service: timer.start
          target:
            entity_id: timer.google_next_timer
          data:
            duration: '{%- set now = now()|as_timestamp %}

              {%- set end_time = state_attr("sensor.google_next_timer","end_time")|as_timestamp
              %}

              {%- set seconds_until_end = end_time - now %}

              {{ seconds_until_end }}

              '
        - delay:
            seconds: 5
        - service: script.cast
          continue_on_error: true
          data:
            dashboard_path: dashboard-cast
            view_path: timers
            display:
            - 0aae07dda66f42e9b8a67979e34770d0
            - 7d6b52507e25e7eeba10914e56052d1c
      - conditions:
        - condition: trigger
          id: timer_started
          enabled: true
        sequence:
        - service: script.cast
          data:
            displays:
            - 7d6b52507e25e7eeba10914e56052d1c
            dashboard_path: dashboard-cast
            view_path: timers
      - conditions:
        - condition: trigger
          id: timer_finished
        sequence:
        - service: script.notify_speech
          data:
            media_player: media_player.google_kitchen
            message: Your {{ state_attr("sensor.google_next_timer", "label") }} just
              ended.
        - service: script.notify_web
          data:
            type: alert
            title: '{{ state_attr("sensor.google_next_timer", "label") }} has ended'
            message: '{%- set end_time = state_attr("sensor.google_next_timer","end_time")|default(now())|as_datetime
              %}

              **{{ state_attr("sensor.google_next_timer", "label") }}** {{ " ended
              at " ~

              "{:1}:{:02}:{:02}".format(end_time.hour, end_time.minute, end_time.second)
              }}

              '
        - service: script.cast
          continue_on_error: true
          data:
            dashboard_path: dashboard-cast
            view_path: timers
            dismiss_after: 120
            display:
            - 0aae07dda66f42e9b8a67979e34770d0
            - 7d6b52507e25e7eeba10914e56052d1c
      - conditions:
        - condition: or
          conditions:
          - condition: trigger
            id: cancel_button_pressed
          - condition: trigger
            id: timer_cancelled
        sequence:
        - service: google_home.delete_timer
          data:
            entity_id: '{{ state_attr("sensor.google_next_timer","active_sensor")
              }}'
            timer_id: '{{ state_attr("sensor.google_next_timer","id") }}'
        - service: timer.cancel
          target:
            entity_id: timer.google_next_timer
          data: {}
        - service: script.notify_web
          data:
            message: Timer stopped
      default: []
  mode: single
- id: '1654047415255'
  alias: Wireless access point restart
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.alert_wirelessap2_offline
    to: 'on'
    alias: 'Wireless Access Point #2 stays offline'
    for:
      hours: 0
      minutes: 2
      seconds: 30
  condition: []
  action:
  - type: turn_off
    device_id: bc23d534656122cd2d15fcbaf69c2dbd
    entity_id: switch.wirelessap2_power_cycler
    domain: switch
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.docker_unifi
  - delay:
      hours: 0
      minutes: 0
      seconds: 15
      milliseconds: 0
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.docker_unifi
  - delay:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
  mode: single
- id: '1654483867439'
  alias: Vacuum update status periodically
  description: ''
  trigger:
  - platform: time_pattern
    hours: /3
    minutes: '0'
  condition:
  - condition: device
    device_id: 8532ec8c935bfb73fc9438d6a98033cb
    domain: vacuum
    entity_id: vacuum.family_room
    type: is_docked
  - condition: device
    device_id: 05429a8986c6f325628f5d664519825e
    domain: vacuum
    entity_id: vacuum.play_room
    type: is_docked
  action:
  - service: script.vacuum_update
    data:
      vacuum:
      - vacuum.family_room
      - vacuum.play_room
  mode: single
- id: '1654484047176'
  alias: Vacuum update status while not docked
  description: ''
  trigger:
  - platform: event
    event_type: call_service
    id: family_room
    event_data:
      domain: vacuum
      service: start
      service_data:
        entity_id: vacuum.family_room
  - platform: event
    event_type: call_service
    id: play_room
    event_data:
      domain: vacuum
      service: start
      service_data:
        entity_id: vacuum.play_room
  condition: []
  action:
  - service: script.vacuum_update
    data: {}
  - wait_for_trigger:
    - platform: event
      event_type: state_changed
      event_data:
        entity_id: vacuum.family_room
    - platform: event
      event_type: state_changed
      event_data:
        entity_id: vacuum.play_room
    timeout:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  - if:
    - condition: trigger
      id: family_room
    then:
    - repeat:
        until:
        - condition: device
          device_id: 8532ec8c935bfb73fc9438d6a98033cb
          domain: vacuum
          entity_id: vacuum.family_room
          type: is_docked
        sequence:
        - delay:
            hours: 0
            minutes: 2
            seconds: 30
            milliseconds: 0
        - service: script.vacuum_update
          data:
            vacuum:
            - vacuum.family_room
  - if:
    - condition: trigger
      id: play_room
    then:
    - repeat:
        until:
        - condition: device
          device_id: 05429a8986c6f325628f5d664519825e
          domain: vacuum
          entity_id: vacuum.play_room
          type: is_docked
        sequence:
        - delay:
            hours: 0
            minutes: 2
            seconds: 30
            milliseconds: 0
        - service: script.vacuum_update
          data:
            vacuum:
            - vacuum.play_room
  mode: parallel
  max: 2
- id: '1654547714136'
  alias: Vacuum refresh until charged
  description: 'Refresh state when docked until 100% charged.

    '
  trigger:
  - platform: device
    device_id: 8532ec8c935bfb73fc9438d6a98033cb
    domain: vacuum
    entity_id: vacuum.family_room
    type: docked
    id: family_room
  - platform: device
    device_id: 05429a8986c6f325628f5d664519825e
    domain: vacuum
    entity_id: vacuum.play_room
    type: docked
    id: play_room
  condition: []
  action:
  - if:
    - condition: trigger
      id: family_room
    then:
    - repeat:
        until:
        - condition: numeric_state
          entity_id: vacuum.family_room
          attribute: battery_level
          above: '99'
        sequence:
        - delay:
            hours: 0
            minutes: 10
            seconds: 0
            milliseconds: 0
        - service: script.vacuum_update
          data:
            vacuum:
            - vacuum.family_room
  - if:
    - condition: trigger
      id: play_room
    then:
    - repeat:
        until:
        - condition: numeric_state
          entity_id: vacuum.play_room
          attribute: battery_level
          above: '99'
        sequence:
        - delay:
            hours: 0
            minutes: 10
            seconds: 0
            milliseconds: 0
        - service: script.vacuum_update
          data:
            vacuum:
            - vacuum.play_room
  mode: single
- id: '1655258894395'
  alias: Update day off + work day modified sensors
  description: ''
  trigger:
  - id: calendar
    platform: calendar
    entity_id: calendar.nerene
    event: start
  - platform: homeassistant
    event: start
    id: restart
    enabled: true
  - id: end_of_day
    platform: time
    at: '23:59:00'
  - platform: time
    at: 00:01:00
    id: start_of_day
  condition: []
  action:
  - if:
    - condition: or
      conditions:
      - condition: trigger
        id: calendar
      - condition: trigger
        id: start_of_day
      - condition: trigger
        id: restart
    then:
    - service: script.store_mqtt_sensor
      data:
        name: nerene_events_today
        state: "{%- set today = now()|as_timestamp %} {%- set event_date = state_attr(\"calendar.nerene\",\"start_time\")|as_timestamp
          %} {%- if today >= event_date %}\n  {%- set events = state_attr(\"binary_sensor.days_off\",\"events_today\")|trim
          %}\n  {%- set events = events ~ \",\" if events not in [\"\",\"None\"] %}\n
          \ {{ events ~ state_attr(\"calendar.nerene\",\"message\") }}\n{%- else %}\n
          \ {%- set events_today = state_attr(\"binary_sensor.days_off\",\"events_today\")
          %}\n  {{ iif(events_today is not none, events_today, \"\") }}\n{%- endif
          %}\n"
    else: []
  - if:
    - condition: trigger
      id: end_of_day
    then:
    - service: script.store_mqtt_sensor
      data:
        name: nerene_events_today
        state: ''
    - delay:
        hours: 0
        minutes: 0
        seconds: 0
        milliseconds: 0
  - service: homeassistant.update_entity
    data: {}
    target:
      entity_id:
      - binary_sensor.day_off
      - binary_sensor.work_day_modified
      - binary_sensor.work_day
  mode: queued
  max: 10
- id: '1662393782118'
  alias: 'Multi-click handler: family room'
  description: ''
  use_blueprint:
    path: brianhanifin/zwave_js_inovelli_lzw31_sn_red_series_dimmer.yaml
    input:
      inovelli_switch: 2d8b03f66fda68a6e0f7b2a506a33b02
      config_button:
      - service: homeassistant.turn_off
        data: {}
        target:
          area_id: family_room
      button_a2:
      - service: light.turn_on
        data:
          brightness_pct: 100
        target:
          area_id:
          - family_room
      button_b:
      - service: light.turn_off
        data: {}
        target:
          area_id: family_room
      button_b2:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.family_room_floor_lamp
      button_a3:
      - service: fan.turn_on
        data: {}
        target:
          entity_id: fan.family_room
      button_b3:
      - service: fan.turn_off
        data: {}
        target:
          entity_id: fan.family_room
      button_a4:
      - service: light.turn_on
        data:
          brightness_pct: 100
        target:
          area_id:
          - family_room
          - kitchen
          - dining_room
          - outside
          entity_id:
          - light.home_entry
      button_b4:
      - service: light.turn_off
        data: {}
        target:
          area_id:
          - family_room
          - kitchen
          - dining_room
          entity_id: light.home_entry
      button_a5:
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.guest_mode
      button_b5:
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id: input_boolean.guest_mode
- id: '1664133526340'
  alias: 'Remote: Nerene wakeup button'
  description: Sets wakeup light to turn on in 8 hours. Each subsequent push adds
    one hour to the timer.
  use_blueprint:
    path: freakshock/zigbee2mqtt-xiaomi-mijia-round-wireless-remote-switch-wxkg01lm-actions.yaml
    input:
      button_sensor: sensor.remote_nerene_wakeup_action
      remote_button_single_press:
      - if:
        - condition: not
          conditions:
          - condition: state
            entity_id: timer.nerene_wakeup_light
            state: active
          alias: If the timer is not active
        then:
        - service: timer.cancel
          data: {}
          target:
            entity_id: timer.nerene_wakeup_light
          alias: Reset the timer
        - service: timer.start
          data:
            duration: '8:00:00'
          target:
            entity_id: timer.nerene_wakeup_light
          alias: Start wakeup light countdown
        else:
        - service: timer.pause
          data: {}
          target:
            entity_id: timer.nerene_wakeup_light
          alias: Pause the timer
        - service: timer.start
          data:
            duration: '{%- set time = state_attr("timer.nerene_wakeup_light", "remaining").split(":")
              %} {%- set hours_remaining = time[0]|int %} {%- set new_time = (hours_remaining+1)
              ~":"~ time[1] ~":"~ time[2] %} {{ new_time }}

              '
          target:
            entity_id: timer.nerene_wakeup_light
          alias: Continue timer with added hour
      remote_button_long_press:
      - service: timer.cancel
        data: {}
        target:
          entity_id: timer.nerene_wakeup_light
        alias: Cancel wakeup light
- id: '1664135234650'
  alias: Nerene wakeup timer complete
  description: ''
  trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.nerene_wakeup_light
  condition: []
  action:
  - service: script.event_wakeup_nerene
    data: {}
    alias: Call script.event_wakeup_nerene
  mode: single
- id: '1664912203010'
  alias: Open/close house thermostat (a/c) change
  description: Actions to take when the alert has been cleared.
  trigger:
  - id: windows_open
    platform: state
    entity_id: binary_sensor.house_windows
    from: 'off'
    to: 'on'
    for:
      seconds: 30
    alias: When the windows stay open.
  - id: sliding_door_open
    platform: state
    entity_id: binary_sensor.sliding_door
    from: 'off'
    to: 'on'
    for:
      minutes: 1
    alias: When the sliding door stays open.
  - platform: state
    entity_id:
    - binary_sensor.house_windows
    from: 'on'
    to: 'off'
    id: windows_closed
    alias: When the windows close.
  - platform: state
    entity_id:
    - binary_sensor.sliding_door
    from: 'on'
    to: 'off'
    id: door_closed
    alias: When the sliding door closes.
  condition: []
  action:
  - if:
    - condition: or
      conditions:
      - condition: trigger
        id: windows_open
      - condition: trigger
        id: sliding_door_open
      alias: When the windows or sliding door have been opened.
    then:
    - service: climate.turn_off
      data: {}
      target:
        entity_id: climate.home_thermostat
    alias: Turn off the thermostat when the house is left open.
  - if:
    - condition: and
      conditions:
      - condition: template
        value_template: "{{\n  trigger.id in [\"windows_closed\",\"door_closed\"]\n
          \ and is_state(\"binary_sensor.house_windows\",\"off\")\n  and is_state(\"binary_sensor.sliding_door\",\"off\")\n}}"
        alias: When the house has just been closed.
      - condition: template
        value_template: '{{ is_state("climate.home_thermostat","off") }}'
        alias: Thermostat is off
      alias: When the house is closed and the thermostat is off.
    then:
    - service: climate.turn_on
      data: {}
      target:
        entity_id: climate.home_thermostat
    else: []
    alias: Turn on the thermostat when the house when closed
  mode: single
- id: '1664913334700'
  alias: Away mode
  description: ''
  trigger:
  - id: to_on
    platform: state
    entity_id: input_boolean.away_mode
    from: 'off'
    to: 'on'
    alias: Away mode on
  - id: to_off
    platform: state
    entity_id: input_boolean.away_mode
    from: 'on'
    to: 'off'
    alias: Away mode off
    enabled: false
  condition: []
  action:
  - if:
    - condition: device
      device_id: 251811656468e59987a59a49a5018a8e
      domain: cover
      entity_id: cover.garage_door
      type: is_open
    then:
    - service: cover.close_cover
      entity_id: cover.garage_door
    alias: Close an open garage door
  - if:
    - condition: device
      device_id: f6a7f9561a7a8b48602809e1789385f4
      domain: lock
      entity_id: lock.front_door
      type: is_unlocked
    then:
    - service: lock.lock
      data: {}
      target:
        device_id: f6a7f9561a7a8b48602809e1789385f4
      alias: Lock front door
    alias: Lock and unlocked front door
  - if:
    - condition: not
      conditions:
      - condition: device
        device_id: 90294c771af3341b24b8836b59e002ad
        domain: climate
        entity_id: climate.bedroom_thermostat
        type: is_hvac_mode
        hvac_mode: 'off'
        alias: Is the bedroom A/C off?
      alias: Bedroom A/C is running
    then:
    - device_id: 90294c771af3341b24b8836b59e002ad
      domain: climate
      entity_id: climate.bedroom_thermostat
      type: set_hvac_mode
      hvac_mode: 'off'
      alias: Turn off Bedroom A/C
    alias: Turn off a running bedroom A/C
  - if:
    - condition: not
      conditions:
      - condition: device
        device_id: 877557b634269a08b5bf0439f9a314b5
        domain: climate
        entity_id: climate.lucas_room_thermostat
        type: is_hvac_mode
        hvac_mode: 'off'
        alias: Is Lucas' A/C off?
      alias: Lucas' A/C is running
    then:
    - device_id: 877557b634269a08b5bf0439f9a314b5
      domain: climate
      entity_id: climate.lucas_room_thermostat
      type: set_hvac_mode
      hvac_mode: 'off'
  - service: script.turn_on
    entity_id: script.shutdown_routine
  mode: restart
- id: '1664914391038'
  alias: Leave unlocked
  description: ''
  trigger:
  - id: to_on
    platform: state
    entity_id: input_boolean.leave_unlocked
    from: 'off'
    to: 'on'
    alias: Leave unlocked turns on
  - id: to_off
    platform: state
    entity_id: input_boolean.leave_unlocked
    from: 'on'
    to: 'off'
    alias: Leave unlocked turns off
  condition: []
  action:
  - alias: Cancel the relock countdown timer.
    service: timer.cancel
    target:
      entity_id: timer.front_door_unlocked
    data: {}
  - alias: If the mode is turned on AND the door is currently unlocked
    choose:
    - conditions: '{{ trigger.id == "to_off" and is_state("lock.front_door","unlocked")
        }}'
      sequence:
      - alias: Restart the timer.
        service: timer.start
        target:
          entity_id: timer.front_door_unlocked
        data: {}
  mode: restart
- id: '1664914465831'
  alias: Guest mode
  description: ''
  trigger:
  - id: to_on
    platform: state
    entity_id: input_boolean.guest_mode
    from: 'off'
    to: 'on'
  - id: to_off
    platform: state
    entity_id: input_boolean.guest_mode
    from: 'on'
    to: 'off'
  condition: []
  action:
  - choose:
    - conditions: '{{ trigger.id == "to_on" }}'
      sequence:
      - alias: Disable the automatic front door lock.
        service: input_boolean.turn_on
        target:
          entity_id: input_boolean.leave_unlocked
        data: {}
      - alias: Disable Adaptive Lighting automated control.
        service: switch.turn_off
        data:
          entity_id: '{{ adaptive_switches }}'
      - delay:
          seconds: 2
      - alias: 'Kitchen Lights: Turn On'
        service: switch.turn_on
        target:
          area_id:
          - kitchen
        data: {}
      - alias: 'Dining + Family room Lights: Turn On'
        service: light.turn_on
        data:
          entity_id: '{{ lights_on }}'
          brightness: 255
          kelvin: 4000
        target:
          area_id:
          - dining_room
          - family_room
    default:
    - alias: Restore the automatic front door lock.
      service: input_boolean.turn_off
      target:
        entity_id: input_boolean.leave_unlocked
      data: {}
    - alias: Kitchen lights to turn off
      service: switch.turn_off
      target:
        area_id:
        - kitchen
      data: {}
    - alias: Dining + Family room lights to turn off
      service: light.turn_off
      target:
        entity_id: light.family_room_floor_lamp
        area_id:
        - dining_room
      data: {}
    - delay:
        seconds: 2
    - alias: Restore Adaptive Lighting automated control.
      service: switch.turn_on
      data:
        entity_id: '{{ adaptive_switches }}'
  - service: script.say
    data:
      message: '{{ speech }}'
  mode: restart
  variables:
    adaptive_switches: "{% set adaptive_lighting = namespace(switches=[]) %}\n{%-
      for entity in states.switch if 'switch.adaptive_lighting_' in entity.entity_id\n
      \     and entity.entity_id[25:30] not in [\"adapt\",\"sleep\"] %}\n  {%- set
      adaptive_lighting.switches = adaptive_lighting.switches + [ entity ] %}\n{%-
      endfor %}\n{{- adaptive_lighting.switches | map(attribute='entity_id') | list
      }}\n"
    lights_on: '{% set group_id= ''group.guest_mode_lights'' %}

      {%- set lights_on = expand(group_id) | selectattr(''entity_id'',''in'',state_attr(group_id,''entity_id''))
      | selectattr(''state'',''eq'',''on'') | map(attribute=''entity_id'') | list
      %}

      {{- "none" if lights_on|count==0 else lights_on }}

      '
    speech: "{%- if trigger.id == \"to_on\" %}\n  {{ [\n    \"Guest Mode has been
      enabled for the rest of the day.\",\n    \"Switching to guest mode! \",\n    \"I
      have enabled guest mode for the rest of the day. \",\n    \"System Guest Mode
      has been enabled.\",\n    \"Guest mode enabled.\",\n    \"Awesome! I will take
      the rest of the day off.  Guest mode has been enabled.\",\n    \"Guest Mode
      enabled.  In other words, Manual Mode engaged.\",\n    \"Guest mode enabled.
      \ Have Fun!\",\n    \"Family, Friends and Fun.  Guest mode has been enabled
      today.\",\n    \"Guest Mode enabled.  I am still doing stuff behind the scenes
      but probably will not turn off the lights on you.\"\n  ] | random }}\n{%- else
      %}\n  {{ [\n    \"Guest Mode has been disabled.\",\n    \"Guest Mode disabled.\"\n
      \   ] | random }}\n{%- endif %}\n"
- id: '1664914665819'
  alias: Holiday colors apply
  description: Apply the light colors assigned to the current holiday.
  trigger:
  - platform: state
    entity_id:
    - light.porch
    - light.table_lamp
    from: 'off'
    to: 'on'
  condition:
  - condition: template
    value_template: '{{ states("sensor.holiday")|lower not in ['''',''unavailable'']
      }}'
  action:
  - service: script.holiday_color_change
    data: {}
  mode: single
- id: '1664914752234'
  alias: TTS phrase selected
  description: ''
  trigger:
  - platform: state
    entity_id: input_select.tts_phrases
  condition: []
  action:
  - service: script.tts_phrase_say
    data: {}
  mode: single
- id: '1664914932708'
  alias: Event template reload
  description: ''
  trigger:
  - platform: event
    event_type: event_template_reloaded
  condition: []
  action:
  - service: script.refresh_count_sensors
    data: {}
  mode: single
- id: '1664915034973'
  alias: 'Restart addon: SDR'
  description: Restart the SDR addon when a sensor temperature goes unavailable.
  trigger:
  - platform: state
    entity_id:
    - sensor.backyard_temperature
    - sensor.fridge_temperature
    - sensor.garage_fridge_temperature
    to: unavailable
    for:
      minutes: 5
  condition: []
  action:
  - alias: Check again, and restart the addon to resolve the MQTT connection failure?
    choose:
    - conditions: '{{ is_state(''sensor.backyard_temperature'',''unavailable'') or
        is_state(''sensor.fridge_temperature'',''unavailable'') or is_state(''sensor.garage_fridge_temperature'',''unavailable'')
        }}'
      sequence:
      - service: hassio.addon_restart
        data:
          addon: d63406df_sdr2mqtt
      - service: script.notify_web
        data:
          type: warning
          title: 'Restart addon: SDR to Home Assistant [Automation]'
          message: The backyard temperature sensor has been unavailable for 5 minutes.
            An attempt has been made to restart the addon.
  mode: single
- id: '1664915086230'
  alias: Restart Unifi
  description: When a disabled PC is re-enabled restart the Unifi docker to ensure
    the change is applied.
  trigger:
  - platform: state
    entity_id:
    - switch.network_blackpc
    - switch.network_bluepc
    - switch.network_greenpc
    - switch.network_redpc
    from: 'off'
    to: 'on'
  condition: []
  action:
  - service: switch.turn_off
    target:
      entity_id: switch.docker_unifi
    data: {}
  - delay:
      seconds: 15
  - service: switch.turn_on
    target:
      entity_id: switch.docker_unifi
    data: {}
  mode: single
- id: '1664915161123'
  alias: Restart Z-wave_JS 2 mqtt
  description: ''
  trigger:
  - platform: state
    entity_id: switch.docker_zwavejs2mqtt
    from: 'on'
    to:
    for:
      minutes: 10
  condition: []
  action:
  - service: switch.turn_off
    target:
      entity_id: switch.docker_zwavejs2mqtt
    data: {}
  - delay:
      seconds: 30
  - service: switch.turn_on
    target:
      entity_id: switch.docker_zwavejs2mqtt
    data: {}
  mode: single
- id: '1664915191810'
  alias: Restart Zigbee 2 mqtt
  description: ''
  trigger:
  - platform: state
    entity_id: switch.docker_zigbee2mqtt
    from: 'on'
    to:
    for:
      minutes: 10
  condition: []
  action:
  - service: switch.turn_off
    target:
      entity_id: switch.docker_zigbee2mqtt
    data: {}
  - delay:
      seconds: 30
  - service: switch.turn_on
    target:
      entity_id: switch.docker_zigbee2mqtt
    data: {}
  mode: single
- id: '1664918803941'
  alias: 'Presence: family all departed'
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.family_present
    for:
      hours: 0
      minutes: 30
      seconds: 0
    enabled: true
    to: '0'
  condition:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  action:
  - service: input_boolean.turn_on
    entity_id: input_boolean.away_mode
    alias: Turn on away mode
  - service: notify.brian
    data:
      title: Away mode turned on
      message: Family present is 0.
  mode: single
- id: '1664919499650'
  alias: 'Presence: family arrival'
  description: The house will welcome the family member home, after the entry the
    house via the front or garage entry doors.
  trigger:
  - platform: state
    entity_id:
    - person.brian
    - person.eric
    - person.heather
    - person.lucas
    - person.nerene
    - person.sandy
    from: not_home
    to: home
    variables:
      old_state: '{{ trigger.from_state.state }}'
      new_state: '{{ trigger.to_state.state }}'
      person: '{{ trigger.to_state.object_id }}'
      source: '{{ trigger.to_state.attributes.source }}'
    alias: When someone arrives at home
  condition:
  - condition: template
    value_template: '{{ old_state != new_state }}'
    alias: old_state != new_state
  - condition: template
    value_template: '{{ new_state != ''unknown'' }}'
    alias: new_state != 'unknown'
  - condition: template
    value_template: '{{ is_state(''automation.startup'',''off'') }}'
    alias: Don't allow status change shortly after startup to avoid phantom changes.
  - condition: and
    conditions:
    - condition: time
      before: 06:00:00
      alias: Between midnight and 6am
      after: 00:00:00
    - condition: template
      value_template: '{{ is_state_attr(source,''vlan'',''0'') }}'
      alias: 'Ignore UniFi sourced changes (vlan: 0)'
    alias: 'Ignore UniFi sourced changes (vlan: 0) overnight to help avoid false "aways"
      caused by sleepy iPhones.'
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.away_mode
    alias: Turn off away mode
  - alias: Wait for an entry door to open before making the announcement.
    wait_for_trigger:
      platform: state
      entity_id:
      - binary_sensor.front_door
      - binary_sensor.garage_entry_door
      from: 'off'
      to: 'on'
    timeout:
      minutes: '5'
    continue_on_timeout: false
  - service: script.say
    data:
      media_player: media_player.google_welcome
      person_arriving: '{{ trigger.entity_id.split(''.'')[1]|title|replace(''_'',
        '' '') }}'
      say_greeting: 'true'
      say_inside_weather: 'true'
      say_outside_weather: 'true'
    alias: Welcome home announcement!
  mode: single
- id: '1664922391248'
  alias: 'Presence: leaving costco'
  description: Notify when Nerene or Brian leaves Costco.
  trigger:
  - platform: zone
    event: leave
    zone: zone.costco
    entity_id:
    - person.brian
    - person.nerene
  condition:
  - condition: time
    after: 06:00:00
    before: '21:00:00'
  action:
  - service: script.say
    data:
      media_player: media_player.google_downstairs
      message: "{% set message = [\n  \"Just a head's up, [name1] is done at Costco.\",\n
        \ \"Your [name2] is on the way home from Costco.\"\n]|random %} {% set name
        = trigger.to_state.friendly_name %} {% if ['name2'] in message %}\n  {% if
        name == \"Nerene\" %}\n    {% set name = \"mom\" %}\n  {% elif name == \"Brian\"
        %}\n    {% set name = \"dad\" %}\n  {% endif %}\n{% endif %} {{ message|replace(\"[name1]\",name)|replace(\"[name2]\",name)
        }}"
      say_greeting: 'false'
  - delay:
      minutes: 5
    alias: 'Cool down timer. When "mode: single" this stops this automation from running
      more often than this.'
  mode: single
- id: '1664922577571'
  alias: 'Presence: Nerene is almost home!'
  description: Notify when Nerene is almost home!
  trigger:
  - platform: numeric_state
    entity_id: proximity.nerene_home
    value_template: '{{ states(''proximity.nerene_home'')|float(default=0) }}'
    below: 1
    alias: When Nerene is near home
  condition:
  - condition: state
    entity_id: input_select.nerene
    state: Away
  action:
  - service: script.say
    data:
      media_player: media_player.google_downstairs
      message: "{{ [\n  \"Your mom is almost home. Be ready to give her a big hug
        after her long day! \",\n  \"One of your favorite people is almost here! Mah,
        ma, mama, mom. \",\n  \"Guess what? ... Chicken butt. ... Your mom is almost
        home. \"\n]|random }}\n"
      say_greeting: 'false'
  - delay:
      minutes: 60
    alias: Cool down timer.
  mode: single
- id: '1664922676671'
  alias: 'Presence: Nerene has left court'
  description: Notify when Nerene leaves court.
  trigger:
  - platform: zone
    event: leave
    zone: zone.court
    entity_id: person.nerene
  condition:
  - condition: time
    after: '13:00:00'
    before: '17:00:00'
  action:
  - service: script.say
    data_template:
      media_player: media_player.google_downstairs
      message: "{{ [\n  \"Just a head's up, Nerene is done with court.\",\n  \"Your
        mom is on her way home from court.\"\n]|random }}\n"
      say_greeting: 'false'
  mode: single
- id: '1664922848999'
  alias: 'Extended presence: location update'
  description: When someone's standard presence location updates
  trigger:
  - platform: state
    entity_id:
    - person.brian
    - person.eric
    - person.heather
    - person.lucas
    - person.nerene
    - person.sandy
    variables:
      new_state: '{{ trigger.to_state.state }}'
      old_state: '{{ trigger.from_state.state }}'
      option: "{%- if new_state == \"home\" -%}\n  Just arrived\n{%- else -%}\n  Just
        left\n{%- endif -%}\n"
      person: '{{ trigger.to_state.object_id }}'
      source: '{{ trigger.to_state.attributes.source }}'
  condition:
  - '{{ old_state != new_state }}'
  - '{{ new_state != "unknown"}}'
  - '{{ is_state("automation.startup","off") }}'
  - condition: not
    conditions:
    - '{{ now().hour < 6 and state_attr(source,"vlan") == "0" }}'
  action:
  - service: input_select.select_option
    data:
      entity_id: input_select.{{ person }}
      option: '{{ option }}'
  - service: timer.start
    data:
      entity_id: timer.xpresence_{{ person }}
      duration: 00:10:00
  mode: queued
- id: '1664923113559'
  alias: 'Extended presence: timer expired'
  description: When a timer finishes it is time to update their extended presence
    status.
  trigger:
  - platform: event
    event_type: timer.finished
    variables:
      person: '{{ trigger.event.data.entity_id[16:] }}'
      current_option: '{{ states("input_select." + person) }}

        '
  condition:
  - condition: template
    value_template: '{{ trigger.event.data.entity_id[:15] == "timer.xpresence" }}'
    alias: Continue for Extended Presence timers only.
  - condition: template
    value_template: '{{ current_option not in [none,"unknown",""] }}'
    alias: When current option is valid.
  action:
  - variables:
      next_options:
        Just arrived: Home
        Just left: Away
        Away: Extended away
      next_option: '{{ next_options[current_option] }}'
  - service: input_select.select_option
    data:
      entity_id: input_select.{{ person }}
      option: '{{ next_option }}'
    alias: Update with the status.
  - if:
    - condition: template
      value_template: '{{ next_option == "Away" }}'
      alias: Status is Away.
    then:
    - service: timer.start
      data:
        entity_id: timer.xpresence_{{ person }}
        duration: '23:59:59'
    alias: Start the timer when the status is Away.
  mode: queued
- id: '1664993172895'
  alias: Computer schedule
  description: Cut internet when the boys should be in bed, and restore the internet
    when play is allowed.
  trigger:
  - platform: state
    entity_id:
    - schedule.computer_school
    - schedule.computer_vacation
    alias: When schedule state changes
    from: 'off'
    to: 'on'
  condition: []
  action:
  - variables:
      schedule: '{{ trigger.to_state.object_id.split("_")[1]}}'
      new_state: '{{ trigger.to_state.state }}'
      middle_school_day: '{{ is_state("binary_sensor.middle_school_day","on") }}'
      middle_school_day_tomorrow: '{{ is_state("binary_sensor.middle_school_day_tomorrow","on")
        }}'
      high_school_day: '{{ is_state("binary_sensor.high_school_day","on") }}'
      high_school_day_tomorrow: '{{ is_state("binary_sensor.high_school_day_tomorrow","on")
        }}'
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ schedule == "school" }}'
        alias: Triggered by school schedule
      sequence:
      - if:
        - condition: time
          before: 08:01:00
          after: 01:01:00
          alias: Before middle school
        - condition: template
          value_template: '{{ middle_school_day }}'
          alias: Today is a middle school day.
        then:
        - service: switch.turn_{{ new_state }}
          target:
            entity_id: switch.network_bluepc
          alias: Turn on/off the network connection.
        else:
        - if:
          - condition: template
            value_template: '{{ middle_school_day_tomorrow }}'
            alias: Tomorrow is a middle school day.
          then:
          - service: switch.turn_{{ new_state }}
            target:
              entity_id: switch.network_bluepc
            alias: Turn on/off the network connection.
        alias: Middle school day
      - if:
        - condition: time
          before: 09:31:00
          after: 01:01:00
          alias: Before high school
        - condition: template
          value_template: '{{ high_school_day }}'
          alias: Today is a high school day.
        then:
        - service: switch.turn_{{ new_state }}
          target:
            entity_id:
            - switch.network_redpc
            - switch.network_greenpc
          alias: Turn on/off the network connection.
        else:
        - if:
          - condition: template
            value_template: '{{ high_school_day_tomorrow }}'
            alias: Tomorrow is a high school day.
          then:
          - service: switch.turn_{{ new_state }}
            target:
              entity_id:
              - switch.network_redpc
              - switch.network_greenpc
            alias: Turn on/off the network connection.
        alias: High school day
    - conditions:
      - condition: template
        value_template: '{{ schedule == "vacation" }}'
        alias: Triggered by vacation schedule
      sequence:
      - if:
        - condition: time
          before: 08:01:00
          after: 01:01:00
          alias: Vacation day morning
        - condition: template
          value_template: '{{ not middle_school_day }}'
          alias: Today is not a middle school day.
        then:
        - service: switch.turn_{{ new_state }}
          target:
            entity_id: switch.network_bluepc
          alias: Turn on/off the network connection.
        else:
        - if:
          - condition: template
            value_template: '{{ not middle_school_day_tomorrow }}'
            alias: Tomorrow is not a middle school day.
          then:
          - service: switch.turn_{{ new_state }}
            target:
              entity_id: switch.network_bluepc
            alias: Turn on/off the network connection.
          alias: Tomorrow is not a middle school day
        alias: Middle school vacation
      - if:
        - condition: time
          before: 09:31:00
          after: 01:01:00
          alias: Vacation day morning
        - condition: template
          value_template: '{{ not high_school_day }}'
          alias: Today is not a high school day.
        then:
        - service: switch.turn_{{ new_state }}
          target:
            entity_id:
            - switch.network_redpc
            - switch.network_greenpc
          alias: Turn on/off the network connection.
        else:
        - if:
          - condition: template
            value_template: '{{ not high_school_day_tomorrow }}'
            alias: Tomorrow is not a high school day.
          then:
          - service: switch.turn_{{ new_state }}
            target:
              entity_id:
              - switch.network_redpc
              - switch.network_greenpc
            alias: Turn on/off the network connection.
          alias: Tomorrow is not a high school day
        alias: High school vacation
    alias: Choose actions based on which schedule triggered.
  mode: single
